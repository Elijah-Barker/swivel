==============================================================================
Debug log for CPU2017.  This file contains very detailed debugging
output from the CPU2017 tools (as if "--verbose 99" had been specified) and is
typically useful only to developers of the CPU2017 toolset.

For a successful run, this debug log will be removed automatically, unless you
specify "--keeptmp" on the command line, or "keeptmp=1" in your config file.

If you file a support request with cpu2017support@spec.org, you may be
asked to submit this file.
------------------------------------------------------------------------------

Environment variables that may have been set or changed by shrc:
SPEC: /home/ucsd/SpectreSandboxing/spec2017
PATH: /home/ucsd/SpectreSandboxing/spec2017/bin:/home/ucsd/.cargo/bin:/home/ucsd/.local/bin:/home/ucsd/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
SPECPERLLIB: /home/ucsd/SpectreSandboxing/spec2017/bin/lib:/home/ucsd/SpectreSandboxing/spec2017/bin
LD_LIBRARY_PATH: 
DYLD_LIBRARY_PATH: 
LC_ALL: C
LC_LANG: C
SPECDB_PWD: /home/ucsd/SpectreSandboxing/spec2017/config
------------------------------------------------------------------------------

Runspec's verbose version output:
                 This is the SPEC CPU2017 benchmark tools suite.

Version summary:
    CPU2017 version: 1.0.2
 Benchmarks version: 1.0.2
      Tools version: 1.0.2
    runcpu version: v5825 ($Id: runcpu 5825 2017-06-28 16:13:35Z CloyceS $)

Tools information:
 Tools package installed: linux-x86_64
 File locking method: fcntl(2) (probably network-safe)
Mode |  UID  |  GID  |   Size  |   Modification Time  | Name
0755 | 1004  | 1004  | 1963960 |  2020-04-08 18:13:53 | specperl
0755 | 1004  | 1004  |  253616 |  2020-04-08 18:13:53 | specmake
0755 | 1004  | 1004  |   43992 |  2020-04-08 18:13:53 | specinvoke
0755 | 1004  | 1004  |  272664 |  2020-04-08 18:13:53 | specrxp
0777 | 0     | 0     |    1577 |  2020-05-21 19:14:44 | runcpu
0777 | 0     | 0     |  177367 |  2020-05-21 19:14:44 | harness/runcpu
0777 | 0     | 0     |    1577 |  2020-05-21 19:14:44 | specpp
0777 | 0     | 0     |   89993 |  2020-05-21 19:14:44 | harness/specpp
0777 | 0     | 0     |    1577 |  2020-05-21 19:14:44 | specdiff
0777 | 0     | 0     |    9806 |  2020-05-21 19:14:44 | harness/specdiff
0755 | 1004  | 1004  |  269856 |  2020-04-08 18:13:53 | specxz
0755 | 1004  | 1004  |   77056 |  2020-04-08 18:13:53 | specsha512sum

Version info for specperl (specperl): This is specperl 5, version 24, subversion 0 (v5.24.0) built for x86_64-linux
                                      Compiled at Apr  8 2020 18:03:45
                                      For more detail on specperl, say 'specperl -V'
Version info for specmake (specmake): GNU Make 4.2.1
Version info for specinvoke (specinvoke): specinvoke r4356 (OS implementation r4356)
Version info for specrxp ($SPEC/bin/specrxp): RXP 1.5.0 Copyright Richard Tobin, LTG, HCRC, University of Edinburgh
                                              Modified for use in SPEC benchmarks - 14 April 2011
Version info for specpp ($SPEC/bin/specpp): specpp version 1.8.0SPEC
Version info for specxz ($SPEC/bin/specxz): xz (XZ Utils) 5.2.2
Version info for specsha512sum ($SPEC/bin/specsha512sum): sha512sum (specsum) 1.3

==============================================================================

1590176470.97: runcpu v5825 started at 2020-05-22 12:41:10 on "tigerlake1-ravi"
1590176470.97: runcpu is: /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu
1590176470.97: runcpu: runcpu --config=wasm_lucet --action=build --define cores=1 602
1590176470.97: toolset: linux-x86_64

1590176470.98: Locating benchmarks...Created default regexp '(?:^|(?<=\s))[-/]DSPEC(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]USPEC(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for USPEC in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_CPU(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_CPU in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DNDEBUG(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DNDEBUG in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]UNDEBUG(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for UNDEBUG in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_WINDOWS(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_WINDOWS in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_MEM_IO(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_MEM_IO in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_ILP32(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_ILP32 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_P64(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_P64 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_LP64(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_LP64 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_ILP64(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_ILP64 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_SUPPRESS_OPENMP(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_SUPPRESS_OPENMP in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_AUTO_SUPPRESS_OPENMP(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_AUTO_SUPPRESS_OPENMP in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_OPENMP(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_OPENMP in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_NO_AUTO_BYTEORDER(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_NO_AUTO_BYTEORDER in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176470.98: Reading suite directory for 'flags-mandatory.xml', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176470.98: Reading suite directory for 'CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176470.98:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '557.xz_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/557.xz_r/Spec/object.pm in 0.001075983s
1590176470.99:     Instantiated Spec::Benchmark::xz_r557 in 0.000251055s
1590176470.99:     Finding src.alts took 0.000023127s
1590176470.99:   Setting up xz_r took 0.001498938s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_any_fortran.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '508.namd_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/508.namd_r/Spec/object.pm in 0.000208139s
1590176470.99:     Instantiated Spec::Benchmark::namd_r508 in 0.000164986s
1590176470.99:     Finding src.alts took 0.000016928s
1590176470.99:   Setting up namd_r took 0.000514030s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '554.roms_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/554.roms_r/Spec/object.pm in 0.000836849s
1590176470.99:     Instantiated Spec::Benchmark::roms_r554 in 0.000173092s
1590176470.99:     Finding src.alts took 0.000018835s
1590176470.99:   Setting up roms_r took 0.001157999s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_pure_cpp.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '996.specrand_fs'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/996.specrand_fs/Spec/object.pm in 0.000228882s
1590176470.99:     Instantiated Spec::Benchmark::specrand_fs996 in 0.000122070s
1590176470.99:     Finding src.alts took 0.000015020s
1590176470.99:   Setting up specrand_fs took 0.000483990s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_pure_cpp.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '500.perlbench_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/500.perlbench_r/Spec/object.pm in 0.000711918s
1590176470.99:     Instantiated Spec::Benchmark::perlbench_r500 in 0.000152111s
1590176470.99:     Finding src.alts took 0.000017881s
1590176470.99:   Setting up perlbench_r took 0.001013994s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_pure_c.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '519.lbm_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/519.lbm_r/Spec/object.pm in 0.000193119s
1590176470.99:     Instantiated Spec::Benchmark::lbm_r519 in 0.000115871s
1590176470.99:     Finding src.alts took 0.000013828s
1590176470.99:   Setting up lbm_r took 0.000437021s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_any_c.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '627.cam4_s'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/627.cam4_s/Spec/object.pm in 0.000313997s
1590176470.99:     Instantiated Spec::Benchmark::cam4_s627 in 0.000134945s
1590176470.99:     Finding src.alts took 0.000015020s
1590176470.99:   Setting up cam4_s took 0.000581980s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '548.exchange2_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/548.exchange2_r/Spec/object.pm in 0.000190973s
1590176470.99:     Instantiated Spec::Benchmark::exchange2_r548 in 0.000115156s
1590176470.99:     Finding src.alts took 0.000021935s
1590176470.99:   Setting up exchange2_r took 0.000432968s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intopenmp.bset'
1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '505.mcf_r'
1590176470.99:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/505.mcf_r/Spec/object.pm in 0.000202179s
1590176470.99:     Instantiated Spec::Benchmark::mcf_r505 in 0.000117779s
1590176470.99:     Finding src.alts took 0.000015020s
1590176470.99:   Setting up mcf_r took 0.000464916s

1590176470.99:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed_c.bset'
1590176471.00:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '538.imagick_r'
1590176471.00:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/538.imagick_r/Spec/object.pm in 0.000493050s
1590176471.00:     Instantiated Spec::Benchmark::imagick_r538 in 0.000123024s
1590176471.00:     Finding src.alts took 0.000017881s
1590176471.00:   Setting up imagick_r took 0.000761032s

1590176471.00:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_pure_c.bset'
1590176471.00:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_any_cpp.bset'
1590176471.00:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '502.gcc_r'
1590176471.01:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/Spec/object.pm in 0.009133101s
1590176471.01:     Instantiated Spec::Benchmark::gcc_r502 in 0.000274897s
1590176471.01:     Finding src.alts took 0.000020981s
1590176471.01:   Setting up gcc_r took 0.009591818s

1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_pure_cpp.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'osdi.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed_cpp.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed_fortran.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_pure_fortran.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed_cpp.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '648.exchange2_s'
1590176471.01:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/648.exchange2_s/Spec/object.pm in 0.000219822s
1590176471.01:     Instantiated Spec::Benchmark::exchange2_s648 in 0.000115871s
1590176471.01:     Finding src.alts took 0.000014067s
1590176471.01:   Setting up exchange2_s took 0.000465870s

1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '631.deepsjeng_s'
1590176471.01:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/631.deepsjeng_s/Spec/object.pm in 0.000177860s
1590176471.01:     Instantiated Spec::Benchmark::deepsjeng_s631 in 0.000111103s
1590176471.01:     Finding src.alts took 0.000012875s
1590176471.01:   Setting up deepsjeng_s took 0.000407934s

1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'any_c.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'serial_speed.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mini.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '603.bwaves_s'
1590176471.01:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/603.bwaves_s/Spec/object.pm in 0.000238895s
1590176471.01:     Instantiated Spec::Benchmark::bwaves_s603 in 0.000142813s
1590176471.01:     Finding src.alts took 0.000013828s
1590176471.01:   Setting up bwaves_s took 0.000509977s

1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'any_fortran.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_any_c.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpopenmp.bset'
1590176471.01:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '523.xalancbmk_r'
1590176471.01:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/523.xalancbmk_r/Spec/object.pm in 0.000504971s
1590176471.01:     Instantiated Spec::Benchmark::xalancbmk_r523 in 0.000157118s
1590176471.01:     Finding src.alts took 0.000018120s
1590176471.02:   Setting up xalancbmk_r took 0.000817060s

1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_any_fortran.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_any_fortran.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '654.roms_s'
1590176471.02:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/654.roms_s/Spec/object.pm in 0.000484943s
1590176471.02:     Instantiated Spec::Benchmark::roms_s654 in 0.000117064s
1590176471.02:     Finding src.alts took 0.000017166s
1590176471.02:   Setting up roms_s took 0.000754118s

1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'pure_cpp.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_pure_c.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed_cpp.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '549.fotonik3d_r'
1590176471.02:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/549.fotonik3d_r/Spec/object.pm in 0.000228882s
1590176471.02:     Instantiated Spec::Benchmark::fotonik3d_r549 in 0.000109911s
1590176471.02:     Finding src.alts took 0.000015020s
1590176471.02:   Setting up fotonik3d_r took 0.000463963s

1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'any_cpp.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_pure_fortran.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'pure_c.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '625.x264_s'
1590176471.02:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/625.x264_s/Spec/object.pm in 0.000504971s
1590176471.02:     Instantiated Spec::Benchmark::x264_s625 in 0.000129938s
1590176471.02:     Finding src.alts took 0.000015974s
1590176471.02:   Setting up x264_s took 0.000777960s

1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '511.povray_r'
1590176471.02:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/511.povray_r/Spec/object.pm in 0.000314951s
1590176471.02:     Instantiated Spec::Benchmark::povray_r511 in 0.000115871s
1590176471.02:     Finding src.alts took 0.000015974s
1590176471.02:   Setting up povray_r took 0.000561953s

1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed_c.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed_fortran.bset'
1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '600.perlbench_s'
1590176471.02:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/600.perlbench_s/Spec/object.pm in 0.000337124s
1590176471.02:     Instantiated Spec::Benchmark::perlbench_s600 in 0.000113964s
1590176471.02:     Finding src.alts took 0.000015974s
1590176471.02:   Setting up perlbench_s took 0.000597000s

1590176471.02:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate.bset'
1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '531.deepsjeng_r'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/531.deepsjeng_r/Spec/object.pm in 0.000192881s
1590176471.03:     Instantiated Spec::Benchmark::deepsjeng_r531 in 0.000108004s
1590176471.03:     Finding src.alts took 0.000014067s
1590176471.03:   Setting up deepsjeng_r took 0.000435829s

1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed_c.bset'
1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '527.cam4_r'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/527.cam4_r/Spec/object.pm in 0.002496958s
1590176471.03:     Instantiated Spec::Benchmark::cam4_r527 in 0.000244141s
1590176471.03:     Finding src.alts took 0.000019073s
1590176471.03:   Setting up cam4_r took 0.002902985s

1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_pure_fortran.bset'
1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '520.omnetpp_r'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/520.omnetpp_r/Spec/object.pm in 0.000275135s
1590176471.03:     Instantiated Spec::Benchmark::omnetpp_r520 in 0.000118017s
1590176471.03:     Finding src.alts took 0.000015020s
1590176471.03:   Setting up omnetpp_r took 0.000525951s

1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '649.fotonik3d_s'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/649.fotonik3d_s/Spec/object.pm in 0.000183105s
1590176471.03:     Instantiated Spec::Benchmark::fotonik3d_s649 in 0.000115871s
1590176471.03:     Finding src.alts took 0.000014067s
1590176471.03:   Setting up fotonik3d_s took 0.000420094s

1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '998.specrand_is'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/998.specrand_is/Spec/object.pm in 0.000195980s
1590176471.03:     Instantiated Spec::Benchmark::specrand_is998 in 0.000108004s
1590176471.03:     Finding src.alts took 0.000011921s
1590176471.03:   Setting up specrand_is took 0.000421047s

1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '525.x264_r'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/525.x264_r/Spec/object.pm in 0.000560999s
1590176471.03:     Instantiated Spec::Benchmark::x264_r525 in 0.000127077s
1590176471.03:     Finding src.alts took 0.000019073s
1590176471.03:   Setting up x264_r took 0.000826120s

1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed.bset'
1590176471.03:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '510.parest_r'
1590176471.03:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/510.parest_r/Spec/object.pm in 0.000286102s
1590176471.03:     Instantiated Spec::Benchmark::parest_r510 in 0.000120878s
1590176471.04:     Finding src.alts took 0.000015974s
1590176471.04:   Setting up parest_r took 0.000555992s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'specrate.bset'
1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_any_cpp.bset'
1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '638.imagick_s'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/638.imagick_s/Spec/object.pm in 0.000386953s
1590176471.04:     Instantiated Spec::Benchmark::imagick_s638 in 0.000113964s
1590176471.04:     Finding src.alts took 0.000015974s
1590176471.04:   Setting up imagick_s took 0.000642061s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '619.lbm_s'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/619.lbm_s/Spec/object.pm in 0.000207901s
1590176471.04:     Instantiated Spec::Benchmark::lbm_s619 in 0.000111103s
1590176471.04:     Finding src.alts took 0.000012875s
1590176471.04:   Setting up lbm_s took 0.000441074s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_any_fortran.bset'
1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '541.leela_r'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/541.leela_r/Spec/object.pm in 0.000192165s
1590176471.04:     Instantiated Spec::Benchmark::leela_r541 in 0.000108004s
1590176471.04:     Finding src.alts took 0.000014067s
1590176471.04:   Setting up leela_r took 0.000422001s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '507.cactuBSSN_r'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/507.cactuBSSN_r/Spec/object.pm in 0.000406981s
1590176471.04:     Instantiated Spec::Benchmark::cactuBSSN_r507 in 0.000152111s
1590176471.04:     Finding src.alts took 0.000016928s
1590176471.04:   Setting up cactuBSSN_r took 0.000699997s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '526.blender_r'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/526.blender_r/Spec/object.pm in 0.001111984s
1590176471.04:     Instantiated Spec::Benchmark::blender_r526 in 0.000136852s
1590176471.04:     Finding src.alts took 0.000016928s
1590176471.04:   Setting up blender_r took 0.001392126s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '621.wrf_s'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/621.wrf_s/Spec/object.pm in 0.001223803s
1590176471.04:     Instantiated Spec::Benchmark::wrf_s621 in 0.000180960s
1590176471.04:     Finding src.alts took 0.000017881s
1590176471.04:   Setting up wrf_s took 0.001553059s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'specspeed.bset'
1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_any_c.bset'
1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '521.wrf_r'
1590176471.04:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/521.wrf_r/Spec/object.pm in 0.001469135s
1590176471.04:     Instantiated Spec::Benchmark::wrf_r521 in 0.000195980s
1590176471.04:     Finding src.alts took 0.000019073s
1590176471.04:   Setting up wrf_r took 0.001821995s

1590176471.04:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '628.pop2_s'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/628.pop2_s/Spec/object.pm in 0.001826048s
1590176471.05:     Instantiated Spec::Benchmark::pop2_s628 in 0.000200987s
1590176471.05:     Finding src.alts took 0.000018835s
1590176471.05:   Setting up pop2_s took 0.002182961s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '641.leela_s'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/641.leela_s/Spec/object.pm in 0.000190973s
1590176471.05:     Instantiated Spec::Benchmark::leela_s641 in 0.000106812s
1590176471.05:     Finding src.alts took 0.000012159s
1590176471.05:   Setting up leela_s took 0.000417948s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '623.xalancbmk_s'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/623.xalancbmk_s/Spec/object.pm in 0.000243902s
1590176471.05:     Instantiated Spec::Benchmark::xalancbmk_s623 in 0.000105143s
1590176471.05:     Finding src.alts took 0.000014067s
1590176471.05:   Setting up xalancbmk_s took 0.000470877s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'openmp.bset'
1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_any_cpp.bset'
1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed_fortran.bset'
1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '607.cactuBSSN_s'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/607.cactuBSSN_s/Spec/object.pm in 0.000216961s
1590176471.05:     Instantiated Spec::Benchmark::cactuBSSN_s607 in 0.000119925s
1590176471.05:     Finding src.alts took 0.000015020s
1590176471.05:   Setting up cactuBSSN_s took 0.000468016s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate.bset'
1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '999.specrand_ir'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/999.specrand_ir/Spec/object.pm in 0.000211000s
1590176471.05:     Instantiated Spec::Benchmark::specrand_ir999 in 0.000123024s
1590176471.05:     Finding src.alts took 0.000014782s
1590176471.05:   Setting up specrand_ir took 0.000468969s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '605.mcf_s'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/605.mcf_s/Spec/object.pm in 0.000203848s
1590176471.05:     Instantiated Spec::Benchmark::mcf_s605 in 0.000112057s
1590176471.05:     Finding src.alts took 0.000012875s
1590176471.05:   Setting up mcf_s took 0.000434160s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'serial.bset'
1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '503.bwaves_r'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/503.bwaves_r/Spec/object.pm in 0.000240088s
1590176471.05:     Instantiated Spec::Benchmark::bwaves_r503 in 0.000133038s
1590176471.05:     Finding src.alts took 0.000015020s
1590176471.05:   Setting up bwaves_r took 0.000504971s

1590176471.05:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '620.omnetpp_s'
1590176471.05:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/620.omnetpp_s/Spec/object.pm in 0.000210047s
1590176471.05:     Instantiated Spec::Benchmark::omnetpp_s620 in 0.000107050s
1590176471.05:     Finding src.alts took 0.000012875s
1590176471.06:   Setting up omnetpp_s took 0.000436068s

1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '657.xz_s'
1590176471.06:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/657.xz_s/Spec/object.pm in 0.000296116s
1590176471.06:     Instantiated Spec::Benchmark::xz_s657 in 0.000111818s
1590176471.06:     Finding src.alts took 0.000015974s
1590176471.06:   Setting up xz_s took 0.000539780s

1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_pure_c.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_any_c.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'pure_fortran.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_pure_fortran.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_any_cpp.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '644.nab_s'
1590176471.06:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/644.nab_s/Spec/object.pm in 0.000217915s
1590176471.06:     Instantiated Spec::Benchmark::nab_s644 in 0.000111818s
1590176471.06:     Finding src.alts took 0.000014067s
1590176471.06:   Setting up nab_s took 0.000463009s

1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '997.specrand_fr'
1590176471.06:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/997.specrand_fr/Spec/object.pm in 0.000216961s
1590176471.06:     Instantiated Spec::Benchmark::specrand_fr997 in 0.000115156s
1590176471.06:     Finding src.alts took 0.000013828s
1590176471.06:   Setting up specrand_fr took 0.000455856s

1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'CPU.bset'
1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '544.nab_r'
1590176471.06:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/544.nab_r/Spec/object.pm in 0.000260115s
1590176471.06:     Instantiated Spec::Benchmark::nab_r544 in 0.000116110s
1590176471.06:     Finding src.alts took 0.000015020s
1590176471.06:   Setting up nab_r took 0.000504971s

1590176471.06:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '602.gcc_s'
1590176471.06:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/Spec/object.pm in 0.000270128s
1590176471.06:     Instantiated Spec::Benchmark::gcc_s602 in 0.000110865s
1590176471.06:     Finding src.alts took 0.000013828s
1590176471.06:   Setting up gcc_s took 0.000510931s

1590176471.06: Setting up suite took 0.078989983s
1590176471.06: Reading suite directory for 'Makefile.defaults', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176471.06: Reading suite directory for 'version.txt', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176471.06: found 47 benchmarks in 55 benchsets.
1590176471.07: Reading config file '/home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg'
1590176471.07: NOTICE: Skipping expression evaluation for 'build_ncpus' on line 27 of
1590176471.07:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg
1590176471.07: NOTICE: Skipping expression evaluation for 'version' on line 30 of
1590176471.07:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg
1590176471.07: NOTICE: Expression evaluation for 'gccpath' on line 117 of
1590176471.07:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg succeeded.
1590176471.07:         Expression:     '/usr/'
1590176471.07:         Returned value: ''
1590176471.08: NOTICE: Expression evaluation for 'numxzthreads' on line 187 of
1590176471.08:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg succeeded.
1590176471.08:         Expression:     '1 * 2'
1590176471.08:         Returned value: '2'

1590176471.13:   '602.gcc_s' added
1590176471.13: 1 configuration selected:

1590176471.13: Action   Benchmarks
1590176471.13: ------   ----------------------------------------------------------------------
1590176471.13: build    602.gcc_s                                                             
1590176471.13: -------------------------------------------------------------------------------
1590176471.13: 
1590176471.13: Setting up environment for running 602.gcc_s...
1590176471.13: Setting KMP_AFFINITY = "granularity=fine,compact"
1590176471.13: Setting LD_LIBRARY_PATH = "/home/ucsd/SpectreSandboxing/spec2017/lib/ia32:/home/ucsd/SpectreSandboxing/spec2017/lib/intel64"
1590176471.13: Setting OMP_STACKSIZE = "192M"
1590176471.13: Starting runcpu for 602.gcc_s...
1590176471.13:    /home/ucsd/SpectreSandboxing/spec2017/bin/specperl /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu --configfile wasm_lucet --action build --define cores=1 --noreportable --nopower --runmode speed --tune base --size refspeed 602.gcc_s
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]USPEC(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for USPEC in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_CPU(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_CPU in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DNDEBUG(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DNDEBUG in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]UNDEBUG(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for UNDEBUG in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_WINDOWS(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_WINDOWS in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_MEM_IO(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_MEM_IO in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_ILP32(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_ILP32 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_P64(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_P64 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_LP64(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_LP64 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_ILP64(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_ILP64 in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_SUPPRESS_OPENMP(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_SUPPRESS_OPENMP in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_AUTO_SUPPRESS_OPENMP(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_AUTO_SUPPRESS_OPENMP in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_OPENMP(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_OPENMP in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Created default regexp '(?:^|(?<=\s))[-/]DSPEC_NO_AUTO_BYTEORDER(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for DSPEC_NO_AUTO_BYTEORDER in /home/ucsd/SpectreSandboxing/spec2017/benchspec/flags-mandatory.xml
1590176471.49: Reading suite directory for 'flags-mandatory.xml', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176471.49: Reading suite directory for 'CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176471.49:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '557.xz_r'
1590176471.49:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/557.xz_r/Spec/object.pm in 0.001055002s
1590176471.49:     Instantiated Spec::Benchmark::xz_r557 in 0.000251055s
1590176471.49:     Finding src.alts took 0.000021935s
1590176471.49:   Setting up xz_r took 0.001477003s

1590176471.49:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_any_fortran.bset'
1590176471.49:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '508.namd_r'
1590176471.49:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/508.namd_r/Spec/object.pm in 0.000211000s
1590176471.49:     Instantiated Spec::Benchmark::namd_r508 in 0.000134945s
1590176471.49:     Finding src.alts took 0.000015974s
1590176471.49:   Setting up namd_r took 0.000481129s

1590176471.49:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '554.roms_r'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/554.roms_r/Spec/object.pm in 0.000813961s
1590176471.50:     Instantiated Spec::Benchmark::roms_r554 in 0.000164986s
1590176471.50:     Finding src.alts took 0.000017881s
1590176471.50:   Setting up roms_r took 0.001127005s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_pure_cpp.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '996.specrand_fs'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/996.specrand_fs/Spec/object.pm in 0.000210047s
1590176471.50:     Instantiated Spec::Benchmark::specrand_fs996 in 0.000159979s
1590176471.50:     Finding src.alts took 0.000014067s
1590176471.50:   Setting up specrand_fs took 0.000497103s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_pure_cpp.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '500.perlbench_r'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/500.perlbench_r/Spec/object.pm in 0.000715017s
1590176471.50:     Instantiated Spec::Benchmark::perlbench_r500 in 0.000149965s
1590176471.50:     Finding src.alts took 0.000016928s
1590176471.50:   Setting up perlbench_r took 0.001008987s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_pure_c.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '519.lbm_r'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/519.lbm_r/Spec/object.pm in 0.000193834s
1590176471.50:     Instantiated Spec::Benchmark::lbm_r519 in 0.000111818s
1590176471.50:     Finding src.alts took 0.000014067s
1590176471.50:   Setting up lbm_r took 0.000434875s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_any_c.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '627.cam4_s'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/627.cam4_s/Spec/object.pm in 0.000293016s
1590176471.50:     Instantiated Spec::Benchmark::cam4_s627 in 0.000134945s
1590176471.50:     Finding src.alts took 0.000015020s
1590176471.50:   Setting up cam4_s took 0.000557184s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '548.exchange2_r'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/548.exchange2_r/Spec/object.pm in 0.000198126s
1590176471.50:     Instantiated Spec::Benchmark::exchange2_r548 in 0.000118017s
1590176471.50:     Finding src.alts took 0.000014067s
1590176471.50:   Setting up exchange2_r took 0.000445127s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intopenmp.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '505.mcf_r'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/505.mcf_r/Spec/object.pm in 0.000203133s
1590176471.50:     Instantiated Spec::Benchmark::mcf_r505 in 0.000117064s
1590176471.50:     Finding src.alts took 0.000013828s
1590176471.50:   Setting up mcf_r took 0.000444889s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed_c.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '538.imagick_r'
1590176471.50:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/538.imagick_r/Spec/object.pm in 0.000480175s
1590176471.50:     Instantiated Spec::Benchmark::imagick_r538 in 0.000118017s
1590176471.50:     Finding src.alts took 0.000016928s
1590176471.50:   Setting up imagick_r took 0.000743866s

1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_pure_c.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_any_cpp.bset'
1590176471.50:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '502.gcc_r'
1590176471.51:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/Spec/object.pm in 0.009105921s
1590176471.51:     Instantiated Spec::Benchmark::gcc_r502 in 0.000277996s
1590176471.51:     Finding src.alts took 0.000020981s
1590176471.51:   Setting up gcc_r took 0.009559870s

1590176471.51:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_pure_cpp.bset'
1590176471.51:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'osdi.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed_cpp.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed_fortran.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_pure_fortran.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed_cpp.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '648.exchange2_s'
1590176471.52:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/648.exchange2_s/Spec/object.pm in 0.000204086s
1590176471.52:     Instantiated Spec::Benchmark::exchange2_s648 in 0.000115871s
1590176471.52:     Finding src.alts took 0.000013828s
1590176471.52:   Setting up exchange2_s took 0.000446081s

1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '631.deepsjeng_s'
1590176471.52:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/631.deepsjeng_s/Spec/object.pm in 0.000177145s
1590176471.52:     Instantiated Spec::Benchmark::deepsjeng_s631 in 0.000108957s
1590176471.52:     Finding src.alts took 0.000013113s
1590176471.52:   Setting up deepsjeng_s took 0.000404119s

1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'any_c.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'serial_speed.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mini.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '603.bwaves_s'
1590176471.52:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/603.bwaves_s/Spec/object.pm in 0.000245810s
1590176471.52:     Instantiated Spec::Benchmark::bwaves_s603 in 0.000144958s
1590176471.52:     Finding src.alts took 0.000015020s
1590176471.52:   Setting up bwaves_s took 0.000525951s

1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'any_fortran.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_any_c.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpopenmp.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '523.xalancbmk_r'
1590176471.52:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/523.xalancbmk_r/Spec/object.pm in 0.000513792s
1590176471.52:     Instantiated Spec::Benchmark::xalancbmk_r523 in 0.000144958s
1590176471.52:     Finding src.alts took 0.000017881s
1590176471.52:   Setting up xalancbmk_r took 0.000802994s

1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_any_fortran.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_any_fortran.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '654.roms_s'
1590176471.52:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/654.roms_s/Spec/object.pm in 0.000496149s
1590176471.52:     Instantiated Spec::Benchmark::roms_s654 in 0.000120878s
1590176471.52:     Finding src.alts took 0.000016928s
1590176471.52:   Setting up roms_s took 0.000760078s

1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'pure_cpp.bset'
1590176471.52:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_pure_c.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed_cpp.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '549.fotonik3d_r'
1590176471.53:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/549.fotonik3d_r/Spec/object.pm in 0.000229120s
1590176471.53:     Instantiated Spec::Benchmark::fotonik3d_r549 in 0.000114918s
1590176471.53:     Finding src.alts took 0.000015974s
1590176471.53:   Setting up fotonik3d_r took 0.000474930s

1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'any_cpp.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_pure_fortran.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'pure_c.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '625.x264_s'
1590176471.53:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/625.x264_s/Spec/object.pm in 0.000497103s
1590176471.53:     Instantiated Spec::Benchmark::x264_s625 in 0.000128984s
1590176471.53:     Finding src.alts took 0.000017881s
1590176471.53:   Setting up x264_s took 0.000770807s

1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '511.povray_r'
1590176471.53:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/511.povray_r/Spec/object.pm in 0.000301123s
1590176471.53:     Instantiated Spec::Benchmark::povray_r511 in 0.000114918s
1590176471.53:     Finding src.alts took 0.000015974s
1590176471.53:   Setting up povray_r took 0.000541925s

1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed_c.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_mixed_fortran.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '600.perlbench_s'
1590176471.53:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/600.perlbench_s/Spec/object.pm in 0.000339985s
1590176471.53:     Instantiated Spec::Benchmark::perlbench_s600 in 0.000112057s
1590176471.53:     Finding src.alts took 0.000015020s
1590176471.53:   Setting up perlbench_s took 0.000586033s

1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '531.deepsjeng_r'
1590176471.53:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/531.deepsjeng_r/Spec/object.pm in 0.000194073s
1590176471.53:     Instantiated Spec::Benchmark::deepsjeng_r531 in 0.000109911s
1590176471.53:     Finding src.alts took 0.000015020s
1590176471.53:   Setting up deepsjeng_r took 0.000438213s

1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'mixed_c.bset'
1590176471.53:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '527.cam4_r'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/527.cam4_r/Spec/object.pm in 0.002475977s
1590176471.54:     Instantiated Spec::Benchmark::cam4_r527 in 0.000244141s
1590176471.54:     Finding src.alts took 0.000020981s
1590176471.54:   Setting up cam4_r took 0.002883911s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_pure_fortran.bset'
1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '520.omnetpp_r'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/520.omnetpp_r/Spec/object.pm in 0.000266075s
1590176471.54:     Instantiated Spec::Benchmark::omnetpp_r520 in 0.000116825s
1590176471.54:     Finding src.alts took 0.000025988s
1590176471.54:   Setting up omnetpp_r took 0.000529051s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '649.fotonik3d_s'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/649.fotonik3d_s/Spec/object.pm in 0.000182867s
1590176471.54:     Instantiated Spec::Benchmark::fotonik3d_s649 in 0.000103951s
1590176471.54:     Finding src.alts took 0.000011921s
1590176471.54:   Setting up fotonik3d_s took 0.000404119s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '998.specrand_is'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/998.specrand_is/Spec/object.pm in 0.000187874s
1590176471.54:     Instantiated Spec::Benchmark::specrand_is998 in 0.000105143s
1590176471.54:     Finding src.alts took 0.000013113s
1590176471.54:   Setting up specrand_is took 0.000411034s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '525.x264_r'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/525.x264_r/Spec/object.pm in 0.000541925s
1590176471.54:     Instantiated Spec::Benchmark::x264_r525 in 0.000121832s
1590176471.54:     Finding src.alts took 0.000015974s
1590176471.54:   Setting up x264_r took 0.000793934s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed.bset'
1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '510.parest_r'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/510.parest_r/Spec/object.pm in 0.000288963s
1590176471.54:     Instantiated Spec::Benchmark::parest_r510 in 0.000119925s
1590176471.54:     Finding src.alts took 0.000015974s
1590176471.54:   Setting up parest_r took 0.000547171s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'specrate.bset'
1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_any_cpp.bset'
1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '638.imagick_s'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/638.imagick_s/Spec/object.pm in 0.000388145s
1590176471.54:     Instantiated Spec::Benchmark::imagick_s638 in 0.000113964s
1590176471.54:     Finding src.alts took 0.000015974s
1590176471.54:   Setting up imagick_s took 0.000640869s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '619.lbm_s'
1590176471.54:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/619.lbm_s/Spec/object.pm in 0.000192881s
1590176471.54:     Instantiated Spec::Benchmark::lbm_s619 in 0.000108004s
1590176471.54:     Finding src.alts took 0.000014067s
1590176471.54:   Setting up lbm_s took 0.000418186s

1590176471.54:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_any_fortran.bset'
1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '541.leela_r'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/541.leela_r/Spec/object.pm in 0.000192165s
1590176471.55:     Instantiated Spec::Benchmark::leela_r541 in 0.000109911s
1590176471.55:     Finding src.alts took 0.000014067s
1590176471.55:   Setting up leela_r took 0.000429869s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '507.cactuBSSN_r'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/507.cactuBSSN_r/Spec/object.pm in 0.000416994s
1590176471.55:     Instantiated Spec::Benchmark::cactuBSSN_r507 in 0.000137091s
1590176471.55:     Finding src.alts took 0.000017881s
1590176471.55:   Setting up cactuBSSN_r took 0.000689030s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '526.blender_r'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/526.blender_r/Spec/object.pm in 0.001089811s
1590176471.55:     Instantiated Spec::Benchmark::blender_r526 in 0.000133991s
1590176471.55:     Finding src.alts took 0.000019073s
1590176471.55:   Setting up blender_r took 0.001374006s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '621.wrf_s'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/621.wrf_s/Spec/object.pm in 0.001215935s
1590176471.55:     Instantiated Spec::Benchmark::wrf_s621 in 0.000174999s
1590176471.55:     Finding src.alts took 0.000018120s
1590176471.55:   Setting up wrf_s took 0.001549006s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'specspeed.bset'
1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_any_c.bset'
1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '521.wrf_r'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/521.wrf_r/Spec/object.pm in 0.001489878s
1590176471.55:     Instantiated Spec::Benchmark::wrf_r521 in 0.000182152s
1590176471.55:     Finding src.alts took 0.000020027s
1590176471.55:   Setting up wrf_r took 0.001829863s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '628.pop2_s'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/628.pop2_s/Spec/object.pm in 0.001811028s
1590176471.55:     Instantiated Spec::Benchmark::pop2_s628 in 0.000200033s
1590176471.55:     Finding src.alts took 0.000018835s
1590176471.55:   Setting up pop2_s took 0.002164841s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '641.leela_s'
1590176471.55:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/641.leela_s/Spec/object.pm in 0.000194073s
1590176471.55:     Instantiated Spec::Benchmark::leela_s641 in 0.000123978s
1590176471.55:     Finding src.alts took 0.000012875s
1590176471.55:   Setting up leela_s took 0.000437021s

1590176471.55:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '623.xalancbmk_s'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/623.xalancbmk_s/Spec/object.pm in 0.000236034s
1590176471.56:     Instantiated Spec::Benchmark::xalancbmk_s623 in 0.000105858s
1590176471.56:     Finding src.alts took 0.000013113s
1590176471.56:   Setting up xalancbmk_s took 0.000460863s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'openmp.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_any_cpp.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed_fortran.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '607.cactuBSSN_s'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/607.cactuBSSN_s/Spec/object.pm in 0.000208139s
1590176471.56:     Instantiated Spec::Benchmark::cactuBSSN_s607 in 0.000114918s
1590176471.56:     Finding src.alts took 0.000013828s
1590176471.56:   Setting up cactuBSSN_s took 0.000449896s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '999.specrand_ir'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/999.specrand_ir/Spec/object.pm in 0.000223875s
1590176471.56:     Instantiated Spec::Benchmark::specrand_ir999 in 0.000113964s
1590176471.56:     Finding src.alts took 0.000015020s
1590176471.56:   Setting up specrand_ir took 0.000470161s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '605.mcf_s'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/605.mcf_s/Spec/object.pm in 0.000200033s
1590176471.56:     Instantiated Spec::Benchmark::mcf_s605 in 0.000113964s
1590176471.56:     Finding src.alts took 0.000012875s
1590176471.56:   Setting up mcf_s took 0.000431061s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'serial.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '503.bwaves_r'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/503.bwaves_r/Spec/object.pm in 0.000226974s
1590176471.56:     Instantiated Spec::Benchmark::bwaves_r503 in 0.000129938s
1590176471.56:     Finding src.alts took 0.000014067s
1590176471.56:   Setting up bwaves_r took 0.000478983s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '620.omnetpp_s'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/620.omnetpp_s/Spec/object.pm in 0.000219107s
1590176471.56:     Instantiated Spec::Benchmark::omnetpp_s620 in 0.000112057s
1590176471.56:     Finding src.alts took 0.000013113s
1590176471.56:   Setting up omnetpp_s took 0.000447989s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed_mixed.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '657.xz_s'
1590176471.56:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/657.xz_s/Spec/object.pm in 0.000287056s
1590176471.56:     Instantiated Spec::Benchmark::xz_s657 in 0.000116110s
1590176471.56:     Finding src.alts took 0.000015020s
1590176471.56:   Setting up xz_s took 0.000532866s

1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intrate_pure_c.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_any_c.bset'
1590176471.56:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fpspeed.bset'
1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'pure_fortran.bset'
1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'fprate_pure_fortran.bset'
1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'intspeed_any_cpp.bset'
1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '644.nab_s'
1590176471.57:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/644.nab_s/Spec/object.pm in 0.000218868s
1590176471.57:     Instantiated Spec::Benchmark::nab_s644 in 0.000119925s
1590176471.57:     Finding src.alts took 0.000015020s
1590176471.57:   Setting up nab_s took 0.000468969s

1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '997.specrand_fr'
1590176471.57:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/997.specrand_fr/Spec/object.pm in 0.000211954s
1590176471.57:     Instantiated Spec::Benchmark::specrand_fr997 in 0.000112057s
1590176471.57:     Finding src.alts took 0.000013828s
1590176471.57:   Setting up specrand_fr took 0.000452995s

1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', 'CPU.bset'
1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '544.nab_r'
1590176471.57:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/544.nab_r/Spec/object.pm in 0.000258207s
1590176471.57:     Instantiated Spec::Benchmark::nab_r544 in 0.000118017s
1590176471.57:     Finding src.alts took 0.000015020s
1590176471.57:   Setting up nab_r took 0.000504971s

1590176471.57:   Reading benchmark directory for '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU', '/home/ucsd/SpectreSandboxing/spec2017/benchspec', '602.gcc_s'
1590176471.57:     Evaluated /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/Spec/object.pm in 0.000276089s
1590176471.57:     Instantiated Spec::Benchmark::gcc_s602 in 0.000108957s
1590176471.57:     Finding src.alts took 0.000015020s
1590176471.57:   Setting up gcc_s took 0.000509977s

1590176471.57: Setting up suite took 0.078259945s
1590176471.57: Reading suite directory for 'Makefile.defaults', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'
1590176471.57: Reading suite directory for 'version.txt', '/home/ucsd/SpectreSandboxing/spec2017/benchspec'

1590176471.58: NOTICE: Skipping expression evaluation for 'build_ncpus' on line 27 of
1590176471.58:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg
1590176471.58: NOTICE: Skipping expression evaluation for 'version' on line 30 of
1590176471.58:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg
1590176471.58: NOTICE: Expression evaluation for 'gccpath' on line 117 of
1590176471.58:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg succeeded.
1590176471.58:         Expression:     '/usr/'
1590176471.58:         Returned value: ''
1590176471.58: NOTICE: Expression evaluation for 'numxzthreads' on line 187 of
1590176471.58:         /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg succeeded.
1590176471.58:         Expression:     '1 * 2'
1590176471.58:         Returned value: '2'
1590176471.59: Running "specperl /home/ucsd/SpectreSandboxing/spec2017/bin/sysinfo" to gather system information.
1590176471.69: sysinfo: r5797 of 2017-06-14 (96c45e4568ad54c135fd618bcc091c0f)
1590176471.69: sysinfo: Getting system information for Linux...
1590176471.69: sysinfo: ...getting CPU info
1590176471.69: sysinfo: ...getting info from numactl
1590176471.69: sysinfo: ...getting memory info
1590176471.69: sysinfo: ...getting OS info
1590176471.69: sysinfo: ...getting disk info
1590176471.69: sysinfo: ...trying to get DIMM info from dmidecode
1590176471.82: Read 122 info lines from the sysinfo program.
1590176471.85: Retrieving flags file (gcc.xml)...
1590176471.85: Created default regexp '(?:^|(?<=\s))-D_FILE_OFFSET_BITS=64(?=\s|$)' for F-D_FILE_OFFSET_BITS:64 in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fconvert=big-endian(?=\s|$)' for F-fconvert:big-endian in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-ffast-math(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-ffast-math in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-ffixed-form(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-ffixed-form in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fgnu89-inline(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fgnu89-inline in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fno-strict-aliasing(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fno-strict-aliasing in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fno-tree-loop-vectorize(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fno-tree-loop-vectorize in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fno-underscoring(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fno-underscoring in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fno-unsafe-math-optimizations(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fno-unsafe-math-optimizations in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fopenmp(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fopenmp in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fprefetch-loop-arrays(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fprefetch-loop-arrays in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fprofile-generate(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fprofile-generate in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fprofile-use(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fprofile-use in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-fsigned-zeros(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-fsigned-zeros in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-funroll-all-loops(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-funroll-all-loops in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-funroll-loops(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-funroll-loops in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-funsigned-char(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-funsigned-char in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-mavx(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-mavx in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-mfmaf(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-mfmaf in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-mrecip(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-mrecip in gcc.xml
1590176471.85: Created default regexp '(?:^|(?<=\s))-mvis3(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-mvis3 in gcc.xml
1590176471.86: Created default regexp '(?:^|(?<=\s))-Ofast(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-Ofast in gcc.xml
1590176471.86: Created default regexp '(?:^|(?<=\s))-Wall(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-Wall in gcc.xml
1590176471.86: Created default regexp '(?:^|(?<=\s))-Wno-return-type(?:\([^\)]+\))?(?:=\S*)?(?=\s|$)' for F-Wno-return-type in gcc.xml
1590176471.88:   '602.gcc_s' added
1590176471.92: Verbosity = 5
1590176471.92: Action    = build
1590176471.92: Tune      = base
1590176471.92: Label     = wasm_lucet
1590176471.92: Size      = refspeed
1590176471.92: benchmarks= 602.gcc_s
1590176471.92: outputs   = txt,cfg,pdf,csv
1590176471.92: username  = ucsd
1590176471.92: Environment settings:
1590176471.92: KMP_AFFINITY = "granularity=fine,compact"
1590176471.92: LD_LIBRARY_PATH = "/home/ucsd/SpectreSandboxing/spec2017/lib/ia32:/home/ucsd/SpectreSandboxing/spec2017/lib/intel64"
1590176471.92: OMP_STACKSIZE = "192M"

1590176471.92: Benchmarks selected: 602.gcc_s
1590176471.93: When checking executables (/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet), no checksums were
1590176471.93:   found in the config file.  They will be installed after build.
1590176471.93: build_check('602.gcc_s base wasm_lucet' (Spec::Benchmark::gcc_s602=HASH(0x65d3828)), check_exe=1, check_options=0) called at /home/ucsd/SpectreSandboxing/spec2017/bin/harness/benchmark.pm line 315.
1590176471.93: 	Spec::Benchmark::instance(Spec::Benchmark::gcc_s602=HASH(0x6171948), Spec::Config=HASH(0x57483a8), "base", "refspeed", "wasm_lucet") called at /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu line 670

1590176471.93: When checking executables (/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet), no checksums were
1590176471.93:   found in the config file.  They will be installed after build.
1590176471.93: build_check('602.gcc_s base wasm_lucet' (Spec::Benchmark::gcc_s602=HASH(0x65c0358)), check_exe=1, check_options=0) called at /home/ucsd/SpectreSandboxing/spec2017/bin/harness/benchmark.pm line 315.
1590176471.93: 	Spec::Benchmark::instance(Spec::Benchmark::gcc_s602=HASH(0x6171948), Spec::Config=HASH(0x57483a8), "base", "refspeed", "wasm_lucet") called at /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu line 758

1590176471.93: Found reftime file in /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/data/refspeed
1590176471.93: Found input directory under /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/data/refspeed
1590176471.93: Found output directory under /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/data/refspeed
1590176471.93: Compiling Binaries
1590176471.93: ------------------------------------------------------------------------
1590176471.93: When checking options for /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet, no checksums were
1590176471.93:   found in the config file.  They will be installed after build.
1590176471.93: When checking executables (/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet), no checksums were
1590176471.93:   found in the config file.  They will be installed after build.
1590176471.93: build_check('602.gcc_s base wasm_lucet' (Spec::Benchmark::gcc_s602=HASH(0x65c0358)), check_exe=1, check_options=1) called at /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu line 1027.

1590176471.93: Notice: Unusable path detected in build directory list file at
1590176471.93:         /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/list
1590176471.93:         The list file references one or more paths which will be
1590176471.93:         ignored because they are not subdirectories of the directory
1590176471.93:         where the list file resides.  This condition may be a result of
1590176471.93:         having moved your SPEC CPU2017 benchmark tree.  If that's what
1590176471.93:         happened, and if you don't need the old build directories, you
1590176471.93:         can just remove them, along with the list file.  (Usually it's
1590176471.93:         safe to delete old build directories, as they are automatically
1590176471.93:         re-created when needed.)
1590176471.93:   Building 602.gcc_s base wasm_lucet: (build_base_wasm_lucet.0000) [2020-05-22 12:41:11]
1590176471.94:    Using existing directory at '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000' for 602.gcc_s base wasm_lucet build
1590176472.01: Wrote to makefile '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000/Makefile.deps':
1590176472.01: # End dependencies
1590176472.01: # These are the build dependencies
1590176472.01: $(addsuffix $(OBJ), $(basename alias.c)): alias.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h df.h double-int.h emit-rtl.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-alias.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-type-escape.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h s
1590176472.01: bitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename alloc-pool.c)): alloc-pool.c alloc-pool.h auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h system.h
1590176472.01: $(addsuffix $(OBJ), $(basename alloca.c)): alloca.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename argv.c)): argv.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/safe-ctype.h
1590176472.01: $(addsuffix $(OBJ), $(basename attribs.c)): attribs.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h fixed-value.h flags.h gcc-plugin.h genrtl.h ggc.h gtype-desc.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h plugin.def plugin.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename auto-inc-dec.c)): auto-inc-dec.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.
1590176472.01: h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename bb-reorder.c)): bb-reorder.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-pr
1590176472.01: eds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename bid2dpd_dpd2bid.c)): bid2dpd_dpd2bid.c bid-dpd.h bid2dpd_dpd2bid.h
1590176472.01: $(addsuffix $(OBJ), $(basename bitmap.c)): bitmap.c alias.h auto-host.h bitmap.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gt-bitmap.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename bt-load.c)): bt-load.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm
1590176472.01: -preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename builtins.c)): builtins.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h r
1590176472.01: ecog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-mudflap.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def typeclass.h value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-aux-info.c)): c-aux-info.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-common.c)): c-common.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtin-attrs.def builtin-types.def builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-c-common.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def
1590176472.01:  options.h opts.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-inline.h tree-iterator.h tree-mudflap.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-convert.c)): c-convert.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-cppbuiltin.c)): c-cppbuiltin.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h double-int.h except.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h version.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-decl.c)): c-decl.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-lang.h c-pragma.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-c-decl.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks-def.h langhooks.h libfuncs.h line-map.h machmode.h mini-gm
1590176472.01: p.h mode-classes.def omp-builtins.def options.h opts.h output.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-inline.h tree-iterator.h tree-mudflap.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-dump.c)): c-dump.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-pass.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-errors.c)): c-errors.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-format.c)): c-format.c alias.h all-tree.def alloc-pool.h auto-host.h builtins.def bversion.h c-common.def c-common.h c-format.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-gimplify.c)): c-gimplify.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-pretty-print.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def r
1590176472.01: tl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-lang.c)): c-lang.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-objc-common.h c-pragma.h c-tree.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-c.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-inl
1590176472.01: ine.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-lex.c)): c-lex.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pretty-print.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-objc-common.c)): c-objc-common.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-objc-common.h c-pretty-print.h c-tree.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def 
1590176472.01: rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-inline.h tree-mudflap.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-omp.c)): c-omp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-opts.c)): c-opts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cppdefault.h cpplib.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h incpath.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mkdeps.h mode-classes.def omp-builtins.def options.h opts.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system
1590176472.01: .h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-inline.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-parser.c)): c-parser.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gt-c-parser.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h plugin.def plugin.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def r
1590176472.01: tl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-pch.c)): c-pch.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h version.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-ppoutput.c)): c-ppoutput.c alias.h all-tree.def auto-host.h builtins.def c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpp-id-data.h cpplib.h defaults.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h internal.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-pragma.c)): c-pragma.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gt-c-pragma.h gtype-desc.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h plugin.def plugin.h pretty-print.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tr
1590176472.01: ee.def tree.h treestruct.def vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-pretty-print.c)): c-pretty-print.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pretty-print.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h real.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-iterator.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-semantics.c)): c-semantics.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tre
1590176472.01: e-check.h tree-inline.h tree-iterator.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename c-typeck.c)): c-typeck.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-lang.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h
1590176472.01:  pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename caller-save.c)): caller-save.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-caller-save.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar
1590176472.01: .h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename calls.c)): calls.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h debug.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h r
1590176472.01: tl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cc1-checksum.c)): cc1-checksum.c auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h system.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfg.c)): cfg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.d
1590176472.01: ef timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfganal.c)): cfganal.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgbuild.c)): cfgbuild.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgcleanup.c)): cfgcleanup.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h dce.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h t
1590176472.01: arget.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgexpand.c)): cfgexpand.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h
1590176472.01:  real.h reg-notes.def rtl.def rtl.h sbitmap.h ssaexpand.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfghooks.c)): cfghooks.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flo
1590176472.01: w.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfglayout.c)): cfglayout.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-cfglayout.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def va
1590176472.01: rray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgloop.c)): cfgloop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tre
1590176472.01: e-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgloopanal.c)): cfgloopanal.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h graphds.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgloopmanip.c)): cfgloopmanip.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-
1590176472.01: alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cfgrtl.c)): cfgrtl.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def
1590176472.01:  timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cgraph.c)): cgraph.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-cgraph.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics
1590176472.01: .h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cgraphbuild.c)): cgraphbuild.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruc
1590176472.01: t.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cgraphunit.c)): cgraphunit.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-cgraphunit.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-prop.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h param
1590176472.01: s.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename combine-stack-adj.c)): combine-stack-adj.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h t
1590176472.01: oplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename combine.c)): combine.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h statistics.h symtab.h sync-bui
1590176472.01: ltins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename concat.c)): concat.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename convert.c)): convert.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename coverage.c)): coverage.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.c gcov-io.h gcov-iov.h genrtl.h ggc.h gt-coverage.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h
1590176472.01:  timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-iterator.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cp-demangle.c)): cp-demangle.c auto-host.h config.h cp-demangle.h include/ansidecl.h include/demangle.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename cp-demint.c)): cp-demint.c auto-host.h config.h cp-demangle.h include/ansidecl.h include/demangle.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename cplus-dem.c)): cplus-dem.c auto-host.h config.h include/ansidecl.h include/demangle.h include/libiberty.h include/safe-ctype.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_charset.c)): cpp_charset.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h ucnid.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_directives-only.c)): cpp_directives-only.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_directives.c)): cpp_directives.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h mkdeps.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_errors.c)): cpp_errors.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_expr.c)): cpp_expr.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_files.c)): cpp_files.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h md5.h mkdeps.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_identifiers.c)): cpp_identifiers.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_init.c)): cpp_init.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h localedir.h mkdeps.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_lex.c)): cpp_lex.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_line-map.c)): cpp_line-map.c cpp_config.h cpp_system.h filenames.h include/ansidecl.h include/libiberty.h include/safe-ctype.h line-map.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_macro.c)): cpp_macro.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_mkdeps.c)): cpp_mkdeps.c cpp_config.h cpp_system.h filenames.h include/ansidecl.h include/libiberty.h include/safe-ctype.h mkdeps.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_pch.c)): cpp_pch.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h mkdeps.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_symtab.c)): cpp_symtab.c cpp_config.h cpp_system.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cpp_traditional.c)): cpp_traditional.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
1590176472.01: $(addsuffix $(OBJ), $(basename cppdefault.c)): cppdefault.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cppdefault.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename crc32.c)): crc32.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename cse.c)): cse.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h 
1590176472.01: timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename cselib.c)): cselib.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h double-int.h emit-rtl.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-cselib.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-pred
1590176472.01: s.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename dbgcnt.c)): dbgcnt.c alias.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h double-int.h errors.h filenames.h fixed-value.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h output.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename dbxout.c)): dbxout.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbxout.h debug.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gstab.h gt-dbxout.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h stab.def statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h t
1590176472.01: m_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename dce.c)): dce.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h dce.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.
1590176472.01: h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ddg.c)): ddg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h ddg.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar
1590176472.01: .h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename debug.c)): debug.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename decContext.c)): decContext.c auto-host.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumberLocal.h gstdint.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename decNumber.c)): decNumber.c auto-host.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h gstdint.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename decimal128.c)): decimal128.c auto-host.h bid-dpd.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h decimal128.h decimal128Local.h decimal128Symbols.h gstdint.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename decimal32.c)): decimal32.c auto-host.h bid-dpd.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h decimal32.h decimal32Symbols.h gstdint.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename decimal64.c)): decimal64.c auto-host.h bid-dpd.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPD.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h decimal64.h decimal64Symbols.h gstdint.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename df-byte-scan.c)): df-byte-scan.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h filenames.h fixed-value.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename df-core.c)): df-core.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestr
1590176472.01: uct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename df-problems.c)): df-problems.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dce.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def v
1590176472.01: array.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename df-scan.c)): df-scan.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h t
1590176472.01: ree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename dfp.c)): dfp.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h decContext.h decContextSymbols.h decNumber.h decNumberSymbols.h decimal128.h decimal128Local.h decimal128Symbols.h decimal32.h decimal32Symbols.h decimal64.h decimal64Symbols.h defaults.h dfp.h double-int.h filenames.h gstdint.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename diagnostic.c)): diagnostic.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h gcc-plugin.h highlev-plugin-common.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h plugin.def plugin.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h version.h
1590176472.01: $(addsuffix $(OBJ), $(basename dojump.c)): dojump.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-dojump.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vec
1590176472.01: prim.h
1590176472.01: $(addsuffix $(OBJ), $(basename dominance.c)): dominance.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h et-forest.h filenames.h fixed-value.h function.h genrtl.h graphds.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename domwalk.c)): domwalk.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h domwalk.h double-int.h filenames.h function.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename double-int.c)): double-int.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename dse.c)): dse.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h dse.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h t
1590176472.01: ree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename dwarf2asm.c)): dwarf2asm.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h dwarf2asm.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gt-dwarf2asm.h gtype-desc.h hwint.h include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename dwarf2out.c)): dwarf2out.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-dwarf2out.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h libfuncs.h line-map.h machmode.h md5.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def
1590176472.01:  predict.h pretty-print.h real.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h version.h
1590176472.01: $(addsuffix $(OBJ), $(basename dyn-string.c)): dyn-string.c auto-host.h config.h include/ansidecl.h include/dyn-string.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename ebitmap.c)): ebitmap.c alias.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h ebitmap.h filenames.h fixed-value.h flags.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h system.h tm.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename emit-rtl.c)): emit-rtl.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-emit-rtl.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.d
1590176472.01: ef timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename et-forest.c)): et-forest.c alloc-pool.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h et-forest.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename except.c)): except.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-except.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h
1590176472.01:  predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename explow.c)): explow.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-explow.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename expmed.c)): expmed.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-
1590176472.01: check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename expr.c)): expr.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-expr.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-
1590176472.01: set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h ssaexpand.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def typeclass.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename fdmatch.c)): fdmatch.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename fibheap.c)): fibheap.c auto-host.h config.h include/ansidecl.h include/fibheap.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename filename_cmp.c)): filename_cmp.c auto-host.h config.h filenames.h include/ansidecl.h include/safe-ctype.h
1590176472.01: $(addsuffix $(OBJ), $(basename final.c)): final.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h dbxout.h debug.h defaults.h df.h double-int.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h ou
1590176472.01: tput.h params.def params.h pointer-set.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename fixed-value.c)): fixed-value.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename floatformat.c)): floatformat.c auto-host.h config.h include/ansidecl.h include/floatformat.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename fold-const.c)): fold-const.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks.h line-map.h machmode.h md5.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p
1590176472.01: .h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename fopen_unlocked.c)): fopen_unlocked.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename function.c)): function.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-function.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h real.h recog.h reg-notes.def regs
1590176472.01: .h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename fwprop.c)): fwprop.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h domwalk.h double-int.h emit-rtl.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree
1590176472.01: -pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gcse.c)): gcse.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-gcse.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def syste
1590176472.01: m.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename genrtl.c)): genrtl.c alias.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename getopt.c)): getopt.c auto-host.h config.h include/ansidecl.h include/getopt.h
1590176472.01: $(addsuffix $(OBJ), $(basename getopt1.c)): getopt1.c auto-host.h config.h include/ansidecl.h include/getopt.h
1590176472.01: $(addsuffix $(OBJ), $(basename getpwd.c)): getpwd.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename getruntime.c)): getruntime.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename ggc-common.c)): ggc-common.c auto-host.h bversion.h config.h coretypes.h filenames.h gcc-plugin.h ggc.h gtype-desc.h highlev-plugin-common.h hooks.h hosthooks-def.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h input.h insn-modes.h line-map.h machmode.h mode-classes.def params.def params.h plugin.def plugin.h statistics.h system.h toplev.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename ggc-page.c)): ggc-page.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h s
1590176472.01: ymtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gimple-iterator.c)): gimple-iterator.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gimple-low.c)): gimple-low.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sta
1590176472.01: tistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gimple-pretty-print.c)): gimple-pretty-print.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.
1590176472.01: h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gimple.c)): gimple.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-gimple.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/demangle.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias
1590176472.01: .h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gimplify.c)): gimplify.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-gimplify.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h p
1590176472.01: retty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graph.c)): graph.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h graph.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphds.c)): graphds.c auto-host.h bitmap.h config.h coretypes.h filenames.h graphds.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h statistics.h system.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-blocking.c)): graphite-blocking.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def r
1590176472.01: tl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-clast-to-gimple.c)): graphite-clast-to-gimple.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.
1590176472.01: def rtl.def rtl.h sbitmap.h sese.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-dependences.c)): graphite-dependences.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.
1590176472.01: def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-interchange.c)): graphite-interchange.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes
1590176472.01: .def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-poly.c)): graphite-poly.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def r
1590176472.01: tl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-ppl.c)): graphite-ppl.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h statistics.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-scop-detection.c)): graphite-scop-detection.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.de
1590176472.01: f rtl.def rtl.h sbitmap.h sese.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite-sese-to-poly.c)): graphite-sese-to-poly.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rt
1590176472.01: l.def rtl.h sbitmap.h sese.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename graphite.c)): graphite.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sese.h statist
1590176472.01: ics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename gtype-desc.c)): gtype-desc.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpp-id-data.h cpplib.h cselib.h debug.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-addr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-prop.h ipa-reference.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def 
1590176472.01: predict.h real.h reg-notes.def reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h tree-check.h tree-chrec.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename haifa-sched.c)): haifa-sched.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def sy
1590176472.01: stem.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename hashtab.c)): hashtab.c auto-host.h config.h include/ansidecl.h include/hashtab.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename hex.c)): hex.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/safe-ctype.h
1590176472.01: $(addsuffix $(OBJ), $(basename hooks.c)): hooks.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hooks.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h insn-modes.h machmode.h mode-classes.def options.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename host-ieee128.c)): host-ieee128.c auto-host.h bid-dpd.h config.h dconfig.h decimal128.h decimal128Local.h decimal128Symbols.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename host-ieee32.c)): host-ieee32.c bid-dpd.h decimal32.h decimal32Symbols.h
1590176472.01: $(addsuffix $(OBJ), $(basename host-ieee64.c)): host-ieee64.c bid-dpd.h decimal64.h decimal64Symbols.h
1590176472.01: $(addsuffix $(OBJ), $(basename host-linux.c)): host-linux.c auto-host.h config.h coretypes.h filenames.h hooks.h hosthooks-def.h hosthooks.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-modes.h machmode.h mode-classes.def system.h
1590176472.01: $(addsuffix $(OBJ), $(basename i386-c.c)): i386-c.c alias.h all-tree.def auto-host.h builtins.def c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gtype-desc.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename i386.c)): i386.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h debug.h defaults.h df.h double-int.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-i386.h gtype-desc.h hard-reg-set.h hooks.h hwint.h i386-builtin-types.inc include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h
1590176472.01:  options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h timevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ifcvt.c)): ifcvt.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timeva
1590176472.01: r.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename incpath.c)): incpath.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cppdefault.h cpplib.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h incpath.h insn-constants.h insn-flags.h insn-modes.h intl.h line-map.h machmode.h mode-classes.def options.h prefix.h symtab.h system.h target.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename init-regs.c)): init-regs.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-attrtab.c)): insn-attrtab.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h v
1590176472.01: ec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-automata.c)): insn-automata.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h
1590176472.01:  vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-emit.c)): insn-emit.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h dfp.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h t
1590176472.01: imevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-extract.c)): insn-extract.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h recog.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-modes.c)): insn-modes.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h insn-modes.h machmode.h mode-classes.def options.h real.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-opinit.c)): insn-opinit.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h real.h recog.h reg-notes.def reload.h rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-output.c)): insn-output.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-constrs.h tm-
1590176472.01: preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-peep.c)): insn-peep.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vec
1590176472.01: prim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-preds.c)): insn-preds.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-chec
1590176472.01: k.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename insn-recog.c)): insn-recog.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-chec
1590176472.01: k.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename integrate.c)): integrate.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-integrate.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-
1590176472.01: builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename intl.c)): intl.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h intl.h options.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-cp.c)): ipa-cp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-prop.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree
1590176472.01: -dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-inline.c)): ipa-inline.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-ipa-inline.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-prop.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-
1590176472.01: notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-prop.c)): ipa-prop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-prop.h ipa-reference.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-i
1590176472.01: nline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-pure-const.c)): ipa-pure-const.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-utils.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h stat
1590176472.01: istics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-reference.c)): ipa-reference.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-ipa-reference.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h ipa-utils.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h 
1590176472.01: target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-struct-reorg.c)): ipa-struct-reorg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h ipa-struct-reorg.h ipa-type-escape.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h params.def params.h pointer-set.h predict.def predict.
1590176472.01: h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-type-escape.c)): ipa-type-escape.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h ipa-type-escape.h ipa-utils.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-c
1590176472.01: heck.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa-utils.c)): ipa-utils.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h ipa-utils.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree
1590176472.01: -flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ipa.c)): ipa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira-build.c)): ira-build.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h sparseset.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h 
1590176472.01: tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira-color.c)): ira-color.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def 
1590176472.01: timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira-conflicts.c)): ira-conflicts.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sparseset.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.
1590176472.01: h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira-costs.c)): ira-costs.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h topl
1590176472.01: ev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira-emit.c)): ira-emit.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h errors.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.
1590176472.01: h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira-lives.c)): ira-lives.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sparseset.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.
1590176472.01: h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename ira.c)): ira.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h errors.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h
1590176472.01:  target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename jump.c)): jump.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h t
1590176472.01: m-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lambda-code.c)): lambda-code.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h re
1590176472.01: al.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lambda-mat.c)): lambda-mat.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lambda-trans.c)): lambda-trans.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename langhooks.c)): langhooks.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.
1590176472.01: h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-inline.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lbasename.c)): lbasename.c auto-host.h config.h filenames.h include/ansidecl.h include/libiberty.h include/safe-ctype.h
1590176472.01: $(addsuffix $(OBJ), $(basename lcm.c)): lcm.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lists.c)): lists.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h ggc.h gt-lists.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename loop-doloop.c)): loop-doloop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruc
1590176472.01: t.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename loop-init.c)): loop-init.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename loop-invariant.c)): loop-invariant.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.
1590176472.01: h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename loop-iv.c)): loop-iv.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename loop-unroll.c)): loop-unroll.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename loop-unswitch.c)): loop-unswitch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lower-subreg.c)): lower-subreg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h
1590176472.01:  treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lrealpath.c)): lrealpath.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-cgraph.c)): lto-cgraph.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h p
1590176472.01: retty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-opts.c)): lto-opts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-section-in.c)): lto-section-in.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h lto-compress.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-prin
1590176472.01: t.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-section-out.c)): lto-section-out.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h lto-compress.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h
1590176472.01:  sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-streamer-in.c)): lto-streamer-in.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-utils.h libfuncs.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def pre
1590176472.01: dict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-streamer-out.c)): lto-streamer-out.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/lto-symtab.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-pri
1590176472.01: nt.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-streamer.c)): lto-streamer.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow
1590176472.01: .h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-symtab.c)): lto-symtab.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-lto-symtab.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h lambda.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.
1590176472.01: h
1590176472.01: $(addsuffix $(OBJ), $(basename lto-wpa-fixup.c)): lto-wpa-fixup.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statis
1590176472.01: tics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename main.c)): main.c auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h line-map.h options.h system.h tm.h toplev.h
1590176472.01: $(addsuffix $(OBJ), $(basename make-relative-prefix.c)): make-relative-prefix.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename make-temp-file.c)): make-temp-file.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename matrix-reorg.c)): matrix-reorg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h opts.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-n
1590176472.01: otes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-sccvn.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename mcf.c)): mcf.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h gcov-io.h gcov-iov.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h profile.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename md5.c)): md5.c auto-host.h config.h include/ansidecl.h md5.h
1590176472.01: $(addsuffix $(OBJ), $(basename mkstemps.c)): mkstemps.c auto-host.h config.h include/ansidecl.h
1590176472.01: $(addsuffix $(OBJ), $(basename mode-switching.c)): mode-switching.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.
1590176472.01: def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename modulo-sched.c)): modulo-sched.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h ddg.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.
1590176472.01: h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename objalloc.c)): objalloc.c auto-host.h config.h include/ansidecl.h include/objalloc.h
1590176472.01: $(addsuffix $(OBJ), $(basename obstack.c)): obstack.c auto-host.h config.h include/ansidecl.h include/obstack.h
1590176472.01: $(addsuffix $(OBJ), $(basename omega.c)): omega.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename omp-low.c)): omp-low.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-omp-low.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-n
1590176472.01: otes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename optabs.c)): optabs.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-optabs.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h predict.def predict.h real.h recog.h reg-notes.def reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev
1590176472.01: .h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename options.c)): options.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h flags.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h insn-modes.h intl.h options.h opts.h system.h target.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename opts-common.c)): opts-common.c auto-host.h config.h coretypes.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h intl.h opts.h system.h
1590176472.01: $(addsuffix $(OBJ), $(basename opts.c)): opts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def opt
1590176472.01: ions.h opts.h output.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename params.c)): params.c auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h line-map.h options.h params.def params.h system.h tm.h toplev.h
1590176472.01: $(addsuffix $(OBJ), $(basename partition.c)): partition.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/partition.h
1590176472.01: $(addsuffix $(OBJ), $(basename passes.c)): passes.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h dbxout.h debug.h defaults.h df.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h graph.h gsstruct.def gt-passes.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h include/splay-tree.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h ins
1590176472.01: n-flags.h insn-modes.h insn-notes.def integrate.h intl.h ipa-reference.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename physmem.c)): physmem.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename plugin.c)): plugin.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h coretypes.h double-int.h filenames.h gcc-plugin.h ggc.h gtype-desc.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-modes.h intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h plugin.def plugin.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename pointer-set.c)): pointer-set.c auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h pointer-set.h system.h
1590176472.01: $(addsuffix $(OBJ), $(basename postreload-gcse.c)): postreload-gcse.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h
1590176472.01:  tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename postreload.c)): postreload.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.d
1590176472.01: ef timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename predict.c)): predict.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h recog.h 
1590176472.01: reg-notes.def regs.h rtl.def rtl.h sbitmap.h sreal.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename prefix.c)): prefix.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h prefix.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename pretty-print.c)): pretty-print.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h coretypes.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-modes.h intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename print-rtl.c)): print-rtl.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename print-tree.c)): print-tree.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tre
1590176472.01: e-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename profile.c)): profile.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h profile.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-bu
1590176472.01: iltins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename real.c)): real.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h dfp.h double-int.h filenames.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename recog.c)): recog.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h t
1590176472.01: m.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename reg-stack.c)): reg-stack.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h topl
1590176472.01: ev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename regcprop.c)): regcprop.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h 
1590176472.01: tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename regex.c)): regex.c auto-host.h config.h include/ansidecl.h include/xregex.h include/xregex2.h
1590176472.01: $(addsuffix $(OBJ), $(basename reginfo.c)): reginfo.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-reginfo.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def time
1590176472.01: var.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename regmove.c)): regmove.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-c
1590176472.01: heck.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename regrename.c)): regrename.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.
1590176472.01: h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename regstat.c)): regstat.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename reload.c)): reload.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.
1590176472.01: def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename reload1.c)): reload1.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timev
1590176472.01: ar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename reorg.c)): reorg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h ti
1590176472.01: mevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename resource.c)): resource.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree
1590176472.01: -check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename rtl-error.c)): rtl-error.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def options.h pretty-print.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename rtl.c)): rtl.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename rtlanal.c)): rtlanal.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct
1590176472.01: .def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename rtlhooks.c)): rtlhooks.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h recog.h reg-notes.def rtl.def rtl.h rtlhooks-def.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename safe-ctype.c)): safe-ctype.c include/ansidecl.h include/safe-ctype.h
1590176472.01: $(addsuffix $(OBJ), $(basename sbitmap.c)): sbitmap.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sched-deps.c)): sched-deps.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def time
1590176472.01: var.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sched-ebb.c)): sched-ebb.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def 
1590176472.01: timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sched-rgn.c)): sched-rgn.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h sel-sched.h statistics.h symtab.h sync-builtins.def system.
1590176472.01: h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sched-vis.c)): sched-vis.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sdbout.c)): sdbout.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h double-int.h filenames.h ggc.h gt-sdbout.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename sel-sched-dump.c)): sel-sched-dump.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h sel-sched-dump.h sel-sched-ir.h statistics.h symtab
1590176472.01: .h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sel-sched-ir.c)): sel-sched-ir.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h sched-int.h sel-sched-dump.h sel-sched-ir
1590176472.01: .h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sel-sched.c)): sel-sched.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h sched-int.h sel-sc
1590176472.01: hed-dump.h sel-sched-ir.h sel-sched.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sese.c)): sese.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sese.h stati
1590176472.01: stics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sha1.c)): sha1.c auto-host.h config.h include/ansidecl.h include/sha1.h
1590176472.01: $(addsuffix $(OBJ), $(basename simplify-rtx.c)): simplify-rtx.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h tre
1590176472.01: estruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename sort.c)): sort.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/sort.h
1590176472.01: $(addsuffix $(OBJ), $(basename spaces.c)): spaces.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename sparseset.c)): sparseset.c auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h sparseset.h system.h
1590176472.01: $(addsuffix $(OBJ), $(basename spec_qsort/spec_qsort.c)): spec_qsort/spec_qsort.c spec_qsort/spec_qsort.h
1590176472.01: $(addsuffix $(OBJ), $(basename splay-tree.c)): splay-tree.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/splay-tree.h
1590176472.01: $(addsuffix $(OBJ), $(basename sreal.c)): sreal.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h sreal.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename stack-ptr-mod.c)): stack-ptr-mod.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename statistics.c)): statistics.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-pass.h tree.def tree.h treestruct.def vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename stmt.c)): stmt.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistic
1590176472.01: s.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename stor-layout.c)): stor-layout.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-stor-layout.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbi
1590176472.01: tmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-inline.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename store-motion.c)): store-motion.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar
1590176472.01: .h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename strerror.c)): strerror.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename stringpool.c)): stringpool.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h ggc.h gt-stringpool.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename strsignal.c)): strsignal.c include/ansidecl.h include/libiberty.h libib_config.h
1590176472.01: $(addsuffix $(OBJ), $(basename stub-objc.c)): stub-objc.c alias.h all-tree.def auto-host.h builtins.def c-common.def c-common.h config.h coretypes.h cpplib.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename targhooks.c)): targhooks.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-targhooks.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h real.h recog.h reg-notes.def reload.h rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h ve
1590176472.01: cprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename timevar.c)): timevar.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h timevar.def timevar.h tm.h toplev.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename toplev.c)): toplev.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h dbxout.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h graph.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h ir
1590176472.01: a.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h version.h
1590176472.01: $(addsuffix $(OBJ), $(basename tracer.c)): tracer.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h ti
1590176472.01: mevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-affine.c)): tree-affine.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h 
1590176472.01: tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-dump.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-call-cdce.c)): tree-call-cdce.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.
1590176472.01: def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-cfg.c)): tree-cfg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.
1590176472.01: h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-cfgcleanup.c)): tree-cfgcleanup.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h
1590176472.01:  pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-chrec.c)): tree-chrec.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def 
1590176472.01: timevar.h tm.h tree-check.h tree-chrec.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-complex.c)): tree-complex.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.
1590176472.01: h tree-flow-inline.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-data-ref.c)): tree-data-ref.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitm
1590176472.01: ap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-dfa.c)): tree-dfa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg
1590176472.01: -notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-dump.c)): tree-dump.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h real.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-iterator.h tree-pass.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-eh.c)): tree-eh.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tim
1590176472.01: evar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-if-conv.c)): tree-if-conv.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistic
1590176472.01: s.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-inline.c)): tree-inline.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h ipa-prop.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-n
1590176472.01: otes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-into-ssa.c)): tree-into-ssa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h prett
1590176472.01: y-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-iterator.c)): tree-iterator.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-iterator.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-iterator.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-loop-distribution.c)): tree-loop-distribution.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predi
1590176472.01: ct.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-loop-linear.c)): tree-loop-linear.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def predict.h pretty-
1590176472.01: print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-mudflap.c)): tree-mudflap.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-mudflap.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/demangle.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.
1590176472.01: def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-nested.c)): tree-nested.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-nested.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sy
1590176472.01: nc-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-nrv.c)): tree-nrv.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-bui
1590176472.01: ltins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-object-size.c)): tree-object-size.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa
1590176472.01: -alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-optimize.c)): tree-optimize.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h graph.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h plugin
1590176472.01: .def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-outof-ssa.c)): tree-outof-ssa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h ssaexpand.h statist
1590176472.01: ics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-parloops.c)): tree-parloops.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gt-tree-parloops.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h stati
1590176472.01: stics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-phinodes.c)): tree-phinodes.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-phinodes.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h
1590176472.01:  tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-predcom.c)): tree-predcom.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h
1590176472.01:  symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-chrec.h tree-data-ref.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-pretty-print.c)): tree-pretty-print.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-flow-inli
1590176472.01: ne.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-profile.c)): tree-profile.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-profile.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h 
1590176472.01: statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-scalar-evolution.c)): tree-scalar-evolution.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-scalar-evolution.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h s
1590176472.01: bitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-sra.c)): tree-sra.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-prop.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.
1590176472.01: h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-address.c)): tree-ssa-address.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-ssa-address.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h
1590176472.01:  reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-alias.c)): tree-ssa-alias.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-type-escape.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def p
1590176472.01: redict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-ccp.c)): tree-ssa-ccp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h r
1590176472.01: eal.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-coalesce.c)): tree-ssa-coalesce.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flo
1590176472.01: w-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-copy.c)): tree-ssa-copy.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def
1590176472.01:  rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-copyrename.c)): tree-ssa-copyrename.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-in
1590176472.01: line.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-dce.c)): tree-ssa-dce.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-bui
1590176472.01: ltins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-dom.c)): tree-ssa-dom.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-
1590176472.01: print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-dse.c)): tree-ssa-dse.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symta
1590176472.01: b.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-forwprop.c)): tree-ssa-forwprop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symta
1590176472.01: b.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-ifcombine.c)): tree-ssa-ifcombine.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tre
1590176472.01: e-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-live.c)): tree-ssa-live.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flo
1590176472.01: w-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-ch.c)): tree-ssa-loop-ch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h 
1590176472.01: symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-im.c)): tree-ssa-loop-im.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def
1590176472.01:  rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-ivcanon.c)): tree-ssa-loop-ivcanon.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def
1590176472.01:  rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-ivopts.c)): tree-ssa-loop-ivopts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h p
1590176472.01: retty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-manip.c)): tree-ssa-loop-manip.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes
1590176472.01: .def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-niter.c)): tree-ssa-loop-niter.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pr
1590176472.01: etty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-prefetch.c)): tree-ssa-loop-prefetch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h ou
1590176472.01: tput.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop-unswitch.c)): tree-ssa-loop-unswitch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h
1590176472.01:  sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-loop.c)): tree-ssa-loop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h
1590176472.01:  reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-math-opts.c)): tree-ssa-math-opts.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statisti
1590176472.01: cs.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-operands.c)): tree-ssa-operands.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.
1590176472.01: h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-phiopt.c)): tree-ssa-phiopt.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h
1590176472.01:  symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-phiprop.c)): tree-ssa-phiprop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.
1590176472.01: h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-pre.c)): tree-ssa-pre.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.d
1590176472.01: ef rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-sccvn.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-propagate.c)): tree-ssa-propagate.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-ssa-propagate.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-prin
1590176472.01: t.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-reassoc.c)): tree-ssa-reassoc.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h s
1590176472.01: ync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-sccvn.c)): tree-ssa-sccvn.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h
1590176472.01:  sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree-ssa-sccvn.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-sink.c)): tree-ssa-sink.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.
1590176472.01: h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-structalias.c)): tree-ssa-structalias.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-ssa-structalias.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h prett
1590176472.01: y-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-ter.c)): tree-ssa-ter.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pa
1590176472.01: ss.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-threadedge.c)): tree-ssa-threadedge.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pre
1590176472.01: tty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-threadupdate.c)): tree-ssa-threadupdate.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes
1590176472.01: .def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa-uncprop.c)): tree-ssa-uncprop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-not
1590176472.01: es.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssa.c)): tree-ssa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def 
1590176472.01: rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-ssanames.c)): tree-ssanames.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h 
1590176472.01: vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-stdarg.c)): tree-stdarg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h 
1590176472.01: tree-ssa-operands.h tree-stdarg.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-switch-conversion.c)): tree-switch-conversion.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h t
1590176472.01: ree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-tailcall.c)): tree-tailcall.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap
1590176472.01: .h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-data-refs.c)): tree-vect-data-refs.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def 
1590176472.01: predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-generic.c)): tree-vect-generic.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-vect-generic.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.
1590176472.01: h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-loop-manip.c)): tree-vect-loop-manip.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.
1590176472.01: def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-loop.c)): tree-vect-loop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.de
1590176472.01: f predict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-patterns.c)): tree-vect-patterns.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def pr
1590176472.01: edict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-slp.c)): tree-vect-slp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def predict.h p
1590176472.01: retty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vect-stmts.c)): tree-vect-stmts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-se
1590176472.01: t.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vectorizer.c)): tree-vectorizer.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h
1590176472.01:  statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree-vrp.c)): tree-vrp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system
1590176472.01: .h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename tree.c)): tree.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-tree.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab
1590176472.01: .h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename unlink-if-ordinary.c)): unlink-if-ordinary.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename value-prof.c)): value-prof.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def r
1590176472.01: egs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename var-tracking.c)): var-tracking.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-n
1590176472.01: otes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename varasm.c)): varasm.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-varasm.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h targhooks.h tm-pre
1590176472.01: ds.h tm.h tm_p.h toplev.h tree-check.h tree-iterator.h tree-mudflap.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename varpool.c)): varpool.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-varpool.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h
1590176472.01:  tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename varray.c)): varray.c auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h line-map.h options.h statistics.h system.h tm.h toplev.h varray.h
1590176472.01: $(addsuffix $(OBJ), $(basename vec.c)): vec.c auto-host.h bversion.h config.h coretypes.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h input.h line-map.h statistics.h system.h toplev.h vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename version.c)): version.c version.h
1590176472.01: $(addsuffix $(OBJ), $(basename vmsdbgout.c)): vmsdbgout.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
1590176472.01: $(addsuffix $(OBJ), $(basename web.c)): web.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
1590176472.01: $(addsuffix $(OBJ), $(basename xatexit.c)): xatexit.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename xcoffout.c)): xcoffout.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
1590176472.01: $(addsuffix $(OBJ), $(basename xexit.c)): xexit.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename xmalloc.c)): xmalloc.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename xmemdup.c)): xmemdup.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename xstrdup.c)): xstrdup.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename xstrerror.c)): xstrerror.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.01: $(addsuffix $(OBJ), $(basename xstrndup.c)): xstrndup.c auto-host.h config.h include/ansidecl.h include/libiberty.h
1590176472.02: Wrote to makefile '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000/Makefile.spec':
1590176472.02: TUNE=base
1590176472.02: LABEL=wasm_lucet
1590176472.02: NUMBER=602
1590176472.02: NAME=gcc_s
1590176472.02: SOURCES= main.c cc1-checksum.c alias.c alloca.c alloc-pool.c argv.c \
1590176472.02: 	 attribs.c auto-inc-dec.c bb-reorder.c bid2dpd_dpd2bid.c bitmap.c \
1590176472.02: 	 bt-load.c c-lang.c c-errors.c c-lex.c c-pragma.c c-decl.c c-typeck.c \
1590176472.02: 	 c-convert.c c-aux-info.c c-common.c c-opts.c c-format.c c-semantics.c \
1590176472.02: 	 c-ppoutput.c c-objc-common.c c-dump.c c-parser.c c-gimplify.c \
1590176472.02: 	 c-pretty-print.c c-omp.c caller-save.c calls.c cfg.c cfganal.c \
1590176472.02: 	 cfgbuild.c cfgcleanup.c cfgexpand.c cfghooks.c cfglayout.c cfgloop.c \
1590176472.02: 	 cfgloopanal.c cfgloopmanip.c cfgrtl.c cgraph.c cgraphbuild.c \
1590176472.02: 	 cgraphunit.c combine.c combine-stack-adj.c concat.c convert.c coverage.c \
1590176472.02: 	 cp-demangle.c cp-demint.c cplus-dem.c cpp_directives.c cpp_lex.c \
1590176472.02: 	 cpp_errors.c cpp_expr.c cpp_charset.c cpp_macro.c cpp_traditional.c \
1590176472.02: 	 cpp_line-map.c cpp_symtab.c cpp_identifiers.c cpp_mkdeps.c cpp_pch.c \
1590176472.02: 	 cpp_directives-only.c crc32.c cse.c cselib.c dbxout.c dbgcnt.c dce.c \
1590176472.02: 	 ddg.c debug.c decContext.c decimal128.c decimal32.c decimal64.c \
1590176472.02: 	 decNumber.c df-byte-scan.c df-core.c df-problems.c df-scan.c dfp.c \
1590176472.02: 	 diagnostic.c dojump.c dominance.c domwalk.c double-int.c dse.c \
1590176472.02: 	 dwarf2asm.c dwarf2out.c dyn-string.c ebitmap.c emit-rtl.c et-forest.c \
1590176472.02: 	 except.c explow.c expmed.c expr.c fdmatch.c fibheap.c filename_cmp.c \
1590176472.02: 	 final.c fixed-value.c floatformat.c fold-const.c fopen_unlocked.c \
1590176472.02: 	 function.c fwprop.c gcse.c genrtl.c getopt1.c getopt.c getpwd.c \
1590176472.02: 	 getruntime.c ggc-common.c ggc-page.c gimple.c gimple-iterator.c \
1590176472.02: 	 gimple-low.c gimple-pretty-print.c gimplify.c graph.c graphds.c \
1590176472.02: 	 graphite.c graphite-blocking.c graphite-clast-to-gimple.c \
1590176472.02: 	 graphite-dependences.c graphite-interchange.c graphite-poly.c \
1590176472.02: 	 graphite-ppl.c graphite-scop-detection.c graphite-sese-to-poly.c \
1590176472.02: 	 gtype-desc.c haifa-sched.c hashtab.c hex.c hooks.c host-ieee128.c \
1590176472.02: 	 host-ieee32.c host-ieee64.c host-linux.c i386.c i386-c.c ifcvt.c \
1590176472.02: 	 incpath.c init-regs.c insn-attrtab.c insn-automata.c insn-emit.c \
1590176472.02: 	 insn-extract.c insn-modes.c insn-opinit.c insn-output.c insn-peep.c \
1590176472.02: 	 insn-preds.c insn-recog.c integrate.c ipa-cp.c ipa-inline.c ipa-prop.c \
1590176472.02: 	 ipa-pure-const.c ipa-reference.c ipa-struct-reorg.c ipa-type-escape.c \
1590176472.02: 	 ipa-utils.c ipa.c ira.c ira-build.c ira-costs.c ira-conflicts.c \
1590176472.02: 	 ira-color.c ira-emit.c ira-lives.c jump.c lambda-code.c lambda-mat.c \
1590176472.02: 	 lambda-trans.c langhooks.c lbasename.c lcm.c lists.c loop-doloop.c \
1590176472.02: 	 loop-init.c loop-invariant.c loop-iv.c loop-unroll.c loop-unswitch.c \
1590176472.02: 	 lower-subreg.c lrealpath.c lto-cgraph.c lto-streamer-in.c \
1590176472.02: 	 lto-streamer-out.c lto-section-in.c lto-section-out.c lto-symtab.c \
1590176472.02: 	 lto-opts.c lto-streamer.c lto-wpa-fixup.c make-relative-prefix.c \
1590176472.02: 	 make-temp-file.c partition.c matrix-reorg.c mcf.c md5.c mkstemps.c \
1590176472.02: 	 mode-switching.c modulo-sched.c objalloc.c obstack.c omega.c omp-low.c \
1590176472.02: 	 optabs.c options.c opts-common.c opts.c params.c passes.c physmem.c \
1590176472.02: 	 plugin.c pointer-set.c postreload-gcse.c postreload.c predict.c \
1590176472.02: 	 pretty-print.c print-rtl.c print-tree.c profile.c recog.c reg-stack.c \
1590176472.02: 	 regcprop.c regex.c reginfo.c regmove.c regrename.c regstat.c reload.c \
1590176472.02: 	 reload1.c reorg.c resource.c rtl-error.c rtl.c rtlanal.c rtlhooks.c \
1590176472.02: 	 safe-ctype.c sbitmap.c sched-deps.c sched-ebb.c sched-rgn.c sched-vis.c \
1590176472.02: 	 sdbout.c sel-sched-ir.c sel-sched-dump.c sel-sched.c sese.c sha1.c \
1590176472.02: 	 simplify-rtx.c sort.c spaces.c sparseset.c splay-tree.c sreal.c \
1590176472.02: 	 stack-ptr-mod.c statistics.c stmt.c stor-layout.c store-motion.c \
1590176472.02: 	 stringpool.c strsignal.c stub-objc.c targhooks.c timevar.c tracer.c \
1590176472.02: 	 tree-affine.c tree-call-cdce.c tree-cfg.c tree-cfgcleanup.c tree-chrec.c \
1590176472.02: 	 tree-complex.c tree-data-ref.c tree-dfa.c tree-dump.c tree-eh.c \
1590176472.02: 	 tree-if-conv.c tree-inline.c tree-into-ssa.c tree-iterator.c \
1590176472.02: 	 tree-loop-distribution.c tree-loop-linear.c tree-mudflap.c tree-nested.c \
1590176472.02: 	 tree-nrv.c tree-object-size.c tree-optimize.c tree-outof-ssa.c \
1590176472.02: 	 tree-parloops.c tree-phinodes.c tree-predcom.c tree-pretty-print.c \
1590176472.02: 	 tree-profile.c tree-scalar-evolution.c tree-sra.c \
1590176472.02: 	 tree-switch-conversion.c tree-ssa-address.c tree-ssa-alias.c \
1590176472.02: 	 tree-ssa-ccp.c tree-ssa-coalesce.c tree-ssa-copy.c tree-ssa-copyrename.c \
1590176472.02: 	 tree-ssa-dce.c tree-ssa-dom.c tree-ssa-dse.c tree-ssa-forwprop.c \
1590176472.02: 	 tree-ssa-ifcombine.c tree-ssa-live.c tree-ssa-loop-ch.c \
1590176472.02: 	 tree-ssa-loop-im.c tree-ssa-loop-ivcanon.c tree-ssa-loop-ivopts.c \
1590176472.02: 	 tree-ssa-loop-manip.c tree-ssa-loop-niter.c tree-ssa-loop-prefetch.c \
1590176472.02: 	 tree-ssa-loop-unswitch.c tree-ssa-loop.c tree-ssa-math-opts.c \
1590176472.02: 	 tree-ssa-operands.c tree-ssa-phiopt.c tree-ssa-phiprop.c tree-ssa-pre.c \
1590176472.02: 	 tree-ssa-propagate.c tree-ssa-reassoc.c tree-ssa-sccvn.c tree-ssa-sink.c \
1590176472.02: 	 tree-ssa-structalias.c tree-ssa-ter.c tree-ssa-threadedge.c \
1590176472.02: 	 tree-ssa-threadupdate.c tree-ssa-uncprop.c tree-ssa.c tree-ssanames.c \
1590176472.02: 	 tree-stdarg.c tree-tailcall.c tree-vect-generic.c tree-vect-patterns.c \
1590176472.02: 	 tree-vect-data-refs.c tree-vect-stmts.c tree-vect-loop.c \
1590176472.02: 	 tree-vect-loop-manip.c tree-vect-slp.c tree-vectorizer.c tree-vrp.c \
1590176472.02: 	 tree.c unlink-if-ordinary.c value-prof.c var-tracking.c varpool.c \
1590176472.02: 	 varasm.c varray.c vec.c vmsdbgout.c web.c xatexit.c xcoffout.c xexit.c \
1590176472.02: 	 xmalloc.c xmemdup.c xstrdup.c xstrerror.c xstrndup.c c-cppbuiltin.c \
1590176472.02: 	 c-pch.c cpp_files.c cpp_init.c cppdefault.c intl.c prefix.c strerror.c \
1590176472.02: 	 toplev.c vasprintf.c version.c builtins.c real.c mini-gmp.c \
1590176472.02: 	 spec_qsort/spec_qsort.c
1590176472.02: EXEBASE=sgcc
1590176472.02: NEED_MATH=yes
1590176472.02: BENCHLANG=C
1590176472.02: BENCH_FLAGS      = -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H
1590176472.02: CC               = /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/
1590176472.02: CC_VERSION_OPTION = --version
1590176472.02: COPTIMIZE        = $(FAST_NO_STATIC)  -DSPEC_SUPPRESS_OPENMP
1590176472.02: CXX              = /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -lstdc++ -I/opt/wasi-sdk/lib/clang/10.0.0/include/
1590176472.02: CXXOPTIMIZE      = $(FAST_NO_STATIC) -DSPEC_SUPPRESS_OPENMP
1590176472.02: CXX_VERSION_OPTION = --version
1590176472.02: EXTRA_LDFLAGS    = -Wl,-z,muldefs
1590176472.02: EXTRA_PORTABILITY = -DSPEC_LP64
1590176472.02: FAST             = $(SSE) $(OPT_ROOT) -static
1590176472.02: FAST_NO_STATIC   = $(SSE) $(OPT_ROOT)
1590176472.02: FC               = /bin/gfortran -m64 -I/include -I/usr/include
1590176472.02: FC_VERSION_OPTION = --version
1590176472.02: FOPTIMIZE        = $(FORT_FAST_NO_STATIC)
1590176472.02: FORT_FAST        = $(SSE) $(OPT_ROOT) -static
1590176472.02: FORT_FAST_NO_STATIC = $(SSE) $(OPT_ROOT)
1590176472.02: LUCET_TYPE       = lucet
1590176472.02: OPT_ROOT         = -O2 -fno-strict-aliasing
1590176472.02: OS               = unix
1590176472.02: SSE              = 
1590176472.02: absolutely_no_locking = 0
1590176472.02: abstol           = 
1590176472.02: action           = build
1590176472.02: allow_label_override = 0
1590176472.02: backup_config    = 1
1590176472.02: baseexe          = sgcc
1590176472.02: basepeak         = 0
1590176472.02: bench_post_setup = sync
1590176472.02: benchdir         = benchspec
1590176472.02: benchmark        = 602.gcc_s
1590176472.02: binary           = 
1590176472.02: bindir           = exe
1590176472.02: builddir         = build
1590176472.02: bundleaction     = 
1590176472.02: bundlename       = 
1590176472.02: calctol          = 0
1590176472.02: changedhash      = 0
1590176472.02: check_version    = 0
1590176472.02: clean_between_builds = no
1590176472.02: command_add_redirect = 1
1590176472.02: commanderrfile   = speccmds.err
1590176472.02: commandexe       = sgcc_base.wasm_lucet
1590176472.02: commandfile      = speccmds.cmd
1590176472.02: commandoutfile   = speccmds.out
1590176472.02: commandstdoutfile = speccmds.stdout
1590176472.02: comparedir       = compare
1590176472.02: compareerrfile   = compare.err
1590176472.02: comparefile      = compare.cmd
1590176472.02: compareoutfile   = compare.out
1590176472.02: comparestdoutfile = compare.stdout
1590176472.02: compile_error    = 0
1590176472.02: compwhite        = 
1590176472.02: configdir        = config
1590176472.02: configfile       = wasm_lucet
1590176472.02: configpath       = /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg
1590176472.02: copies           = 1
1590176472.02: current_range    = 
1590176472.02: datadir          = data
1590176472.02: default_size     = ref
1590176472.02: default_submit   = $command
1590176472.02: delay            = 0
1590176472.02: deletebinaries   = 0
1590176472.02: deletework       = 0
1590176472.02: dependent_workloads = 0
1590176472.02: device           = 
1590176472.02: difflines        = 10
1590176472.02: dirprot          = 511
1590176472.02: discard_power_samples = 0
1590176472.02: enable_monitor   = 1
1590176472.02: endian           = 12345678
1590176472.02: env_vars         = 0
1590176472.02: expand_notes     = 0
1590176472.02: expid            = 
1590176472.02: exthash_bits     = 256
1590176472.02: fail_build       = 0
1590176472.02: failflags        = 0
1590176472.02: fake             = 0
1590176472.02: feedback         = 1
1590176472.02: flag_url_base    = https://www.spec.org/auto/cpu2017/Docs/benchmarks/flags/
1590176472.02: floatcompare     = 1
1590176472.02: force_monitor    = 0
1590176472.02: from_runcpu      = 2
1590176472.02: hostname         = tigerlake1-ravi
1590176472.02: http_proxy       = 
1590176472.02: http_timeout     = 30
1590176472.02: hw_avail         = 
1590176472.02: hw_cpu_max_mhz   = 
1590176472.02: hw_cpu_name      = Genuine Intel 0000
1590176472.02: hw_cpu_nominal_mhz = 
1590176472.02: hw_disk          = 391 GB  add more disk info here
1590176472.02: hw_memory001     = 15.428 GB fixme: If using DDR3, format is:
1590176472.02: hw_memory002     = 'N GB (M x N GB nRxn PCn-nnnnnR-n, ECC)'
1590176472.02: hw_model         = 
1590176472.02: hw_nchips        = 1
1590176472.02: hw_ncores        = 
1590176472.02: hw_ncpuorder     = 
1590176472.02: hw_nthreadspercore = 
1590176472.02: hw_ocache        = 
1590176472.02: hw_other         = 
1590176472.02: hw_pcache        = 
1590176472.02: hw_scache        = 
1590176472.02: hw_tcache        = 
1590176472.02: hw_vendor        = My Corporation
1590176472.02: idle_current_range = 
1590176472.02: idledelay        = 10
1590176472.02: idleduration     = 60
1590176472.02: ignore_errors    = 0
1590176472.02: ignore_sigint    = 0
1590176472.02: ignorecase       = 
1590176472.02: info_wrap_columns = 50
1590176472.02: inputdir         = input
1590176472.02: inputgenerrfile  = inputgen.err
1590176472.02: inputgenfile     = inputgen.cmd
1590176472.02: inputgenoutfile  = inputgen.out
1590176472.02: inputgenstdoutfile = inputgen.stdout
1590176472.02: iteration        = -1
1590176472.02: iterations       = 3
1590176472.02: keeptmp          = 0
1590176472.02: label            = wasm_lucet
1590176472.02: license_num      = 13
1590176472.02: line_width       = 1020
1590176472.02: link_input_files = 1
1590176472.02: locking          = 1
1590176472.02: log              = CPU2017
1590176472.02: log_line_width   = 1020
1590176472.02: log_timestamp    = 0
1590176472.02: logfile          = /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.087/templogs/preenv.intspeed.087.0
1590176472.02: logname          = /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.087/templogs/preenv.intspeed.087.0
1590176472.02: lognum           = 087.0
1590176472.02: mail_reports     = all
1590176472.02: mailcompress     = 0
1590176472.02: mailmethod       = smtp
1590176472.02: mailport         = 25
1590176472.02: mailserver       = 127.0.0.1
1590176472.02: mailto           = 
1590176472.02: make             = specmake
1590176472.02: make_no_clobber  = 0
1590176472.02: makefile_template = Makefile.YYYtArGeTYYYspec
1590176472.02: makeflags        = -j8
1590176472.02: max_average_uncertainty = 1
1590176472.02: max_hum_limit    = 0
1590176472.02: max_report_runs  = 3
1590176472.02: max_unknown_uncertainty = 1
1590176472.02: mean_anyway      = 1
1590176472.02: meter_connect_timeout = 30
1590176472.02: meter_errors_default = 5
1590176472.02: meter_errors_percentage = 5
1590176472.02: min_report_runs  = 2
1590176472.02: min_temp_limit   = 20
1590176472.02: minimize_builddirs = 0
1590176472.02: minimize_rundirs = 0
1590176472.02: name             = gcc_s
1590176472.02: nansupport       = no
1590176472.02: need_math        = yes
1590176472.02: no_input_handler = close
1590176472.02: no_monitor       = 
1590176472.02: noratios         = 0
1590176472.02: note_preenv      = 1
1590176472.02: notes_001        =  Binaries compiled on a system with Intel(R) Core(TM) i9-7900X CPU + 32GB RAM
1590176472.02: notes_002        =  memory using Redhat Enterprise Linux 7.5
1590176472.02: notes_200        =  Transparent Huge Pages enabled by default
1590176472.02: notes_os_010     =  Stack size set to unlimited using "ulimit -s unlimited"
1590176472.02: notes_plat_sysinfo_000 =  Sysinfo program /home/ucsd/SpectreSandboxing/spec2017/bin/sysinfo
1590176472.02: notes_plat_sysinfo_005 =  Rev: r5797 of 2017-06-14 96c45e4568ad54c135fd618bcc091c0f
1590176472.02: notes_plat_sysinfo_010 =  running on tigerlake1-ravi Fri May 22 12:41:11 2020
1590176472.02: notes_plat_sysinfo_015 = 
1590176472.02: notes_plat_sysinfo_020 =  SUT (System Under Test) info as seen by some common utilities.
1590176472.02: notes_plat_sysinfo_025 =  For more information on this section, see
1590176472.02: notes_plat_sysinfo_030 =     https://www.spec.org/cpu2017/Docs/config.html\#sysinfo
1590176472.02: notes_plat_sysinfo_035 = 
1590176472.02: notes_plat_sysinfo_040 =  From /proc/cpuinfo
1590176472.02: notes_plat_sysinfo_045 =     model name : Genuine Intel(R) CPU 0000 @ 2.30GHz
1590176472.02: notes_plat_sysinfo_050 =        1  "physical id"s (chips)
1590176472.02: notes_plat_sysinfo_055 =        8 "processors"
1590176472.02: notes_plat_sysinfo_060 =     cores, siblings (Caution: counting these is hw and system dependent. The following
1590176472.02: notes_plat_sysinfo_065 =     excerpts from /proc/cpuinfo might not be reliable.  Use with caution.)
1590176472.02: notes_plat_sysinfo_070 =        cpu cores : 4
1590176472.02: notes_plat_sysinfo_075 =        siblings  : 8
1590176472.02: notes_plat_sysinfo_080 =        physical 0: cores 0 1 2 3
1590176472.02: notes_plat_sysinfo_085 = 
1590176472.02: notes_plat_sysinfo_090 =  From lscpu:
1590176472.02: notes_plat_sysinfo_095 =       Architecture:                    x86_64
1590176472.02: notes_plat_sysinfo_100 =       CPU op-mode(s):                  32-bit, 64-bit
1590176472.02: notes_plat_sysinfo_105 =       Byte Order:                      Little Endian
1590176472.02: notes_plat_sysinfo_110 =       Address sizes:                   39 bits physical, 48 bits virtual
1590176472.02: notes_plat_sysinfo_115 =       CPU(s):                          8
1590176472.02: notes_plat_sysinfo_120 =       On-line CPU(s) list:             0-7
1590176472.02: notes_plat_sysinfo_125 =       Thread(s) per core:              2
1590176472.02: notes_plat_sysinfo_130 =       Core(s) per socket:              4
1590176472.02: notes_plat_sysinfo_135 =       Socket(s):                       1
1590176472.02: notes_plat_sysinfo_140 =       NUMA node(s):                    1
1590176472.02: notes_plat_sysinfo_145 =       Vendor ID:                       GenuineIntel
1590176472.02: notes_plat_sysinfo_150 =       CPU family:                      6
1590176472.02: notes_plat_sysinfo_155 =       Model:                           140
1590176472.02: notes_plat_sysinfo_160 =       Model name:                      Genuine Intel(R) CPU 0000 @ 2.30GHz
1590176472.02: notes_plat_sysinfo_165 =       Stepping:                        0
1590176472.02: notes_plat_sysinfo_170 =       CPU MHz:                         1784.267
1590176472.02: notes_plat_sysinfo_175 =       CPU max MHz:                     4200.0000
1590176472.02: notes_plat_sysinfo_180 =       CPU min MHz:                     400.0000
1590176472.02: notes_plat_sysinfo_185 =       BogoMIPS:                        4608.00
1590176472.02: notes_plat_sysinfo_190 =       Virtualization:                  VT-x
1590176472.02: notes_plat_sysinfo_195 =       L1d cache:                       192 KiB
1590176472.02: notes_plat_sysinfo_200 =       L1i cache:                       128 KiB
1590176472.02: notes_plat_sysinfo_205 =       L2 cache:                        5 MiB
1590176472.02: notes_plat_sysinfo_210 =       L3 cache:                        12 MiB
1590176472.02: notes_plat_sysinfo_215 =       NUMA node0 CPU(s):               0-7
1590176472.02: notes_plat_sysinfo_220 =       Vulnerability Itlb multihit:     KVM: Mitigation: Split huge pages
1590176472.02: notes_plat_sysinfo_225 =       Vulnerability L1tf:              Not affected
1590176472.02: notes_plat_sysinfo_230 =       Vulnerability Mds:               Vulnerable: Clear CPU buffers attempted, no
1590176472.02: notes_plat_sysinfo_235 =       microcode; SMT vulnerable
1590176472.02: notes_plat_sysinfo_240 =       Vulnerability Meltdown:          Not affected
1590176472.02: notes_plat_sysinfo_245 =       Vulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via
1590176472.02: notes_plat_sysinfo_250 =       prctl and seccomp
1590176472.02: notes_plat_sysinfo_255 =       Vulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user
1590176472.02: notes_plat_sysinfo_260 =       pointer sanitization
1590176472.02: notes_plat_sysinfo_265 =       Vulnerability Spectre v2:        Mitigation; Enhanced IBRS, IBPB conditional, RSB
1590176472.02: notes_plat_sysinfo_270 =       filling
1590176472.02: notes_plat_sysinfo_275 =       Vulnerability Tsx async abort:   Not affected
1590176472.02: notes_plat_sysinfo_280 =       Flags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr
1590176472.02: notes_plat_sysinfo_285 =       pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx
1590176472.02: notes_plat_sysinfo_290 =       pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology
1590176472.02: notes_plat_sysinfo_295 =       nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx
1590176472.02: notes_plat_sysinfo_300 =       smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt
1590176472.02: notes_plat_sysinfo_305 =       tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault
1590176472.02: notes_plat_sysinfo_310 =       epb invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority
1590176472.02: notes_plat_sysinfo_315 =       ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f
1590176472.02: notes_plat_sysinfo_320 =       avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni
1590176472.02: notes_plat_sysinfo_325 =       avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp
1590176472.02: notes_plat_sysinfo_330 =       hwp_notify hwp_act_window hwp_epp hwp_pkg_req avx512vbmi umip pku ospke avx512_vbmi2
1590176472.02: notes_plat_sysinfo_335 =       shstk gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq rdpid
1590176472.02: notes_plat_sysinfo_340 =       movdiri movdir64b fsrm avx512_vp2intersect ibt flush_l1d arch_capabilities
1590176472.02: notes_plat_sysinfo_345 = 
1590176472.02: notes_plat_sysinfo_350 =  /proc/cpuinfo cache data
1590176472.02: notes_plat_sysinfo_355 =     cache size : 12288 KB
1590176472.02: notes_plat_sysinfo_360 = 
1590176472.02: notes_plat_sysinfo_365 =  From numactl --hardware  WARNING: a numactl 'node' might or might not correspond to a
1590176472.02: notes_plat_sysinfo_370 =  physical chip.
1590176472.02: notes_plat_sysinfo_375 = 
1590176472.02: notes_plat_sysinfo_380 =  From /proc/meminfo
1590176472.02: notes_plat_sysinfo_385 =     MemTotal:       16177588 kB
1590176472.02: notes_plat_sysinfo_390 =     HugePages_Total:       0
1590176472.02: notes_plat_sysinfo_395 =     Hugepagesize:       2048 kB
1590176472.02: notes_plat_sysinfo_400 = 
1590176472.02: notes_plat_sysinfo_405 =  From /etc/*release* /etc/*version*
1590176472.02: notes_plat_sysinfo_410 =     fedora-release: Fedora release 32 (Thirty Two)
1590176472.02: notes_plat_sysinfo_415 =     os-release:
1590176472.02: notes_plat_sysinfo_420 =        NAME=Fedora
1590176472.02: notes_plat_sysinfo_425 =        VERSION="32 (Workstation Edition)"
1590176472.02: notes_plat_sysinfo_430 =        ID=fedora
1590176472.02: notes_plat_sysinfo_435 =        VERSION_ID=32
1590176472.02: notes_plat_sysinfo_440 =        VERSION_CODENAME=""
1590176472.02: notes_plat_sysinfo_445 =        PLATFORM_ID="platform:f32"
1590176472.02: notes_plat_sysinfo_450 =        PRETTY_NAME="Fedora 32 (Workstation Edition)"
1590176472.02: notes_plat_sysinfo_455 =        ANSI_COLOR="0;34"
1590176472.02: notes_plat_sysinfo_460 =     redhat-release: Fedora release 32 (Thirty Two)
1590176472.02: notes_plat_sysinfo_465 =     system-release: Fedora release 32 (Thirty Two)
1590176472.02: notes_plat_sysinfo_470 =     system-release-cpe: cpe:/o:fedoraproject:fedora:32
1590176472.02: notes_plat_sysinfo_475 = 
1590176472.02: notes_plat_sysinfo_480 =  uname -a:
1590176472.02: notes_plat_sysinfo_485 =     Linux tigerlake1-ravi 5.7.0-0.rc6.1.1.cet.fc32.x86_64 \#1 SMP Mon May 18 17:21:34 PDT
1590176472.02: notes_plat_sysinfo_490 =     2020 x86_64 x86_64 x86_64 GNU/Linux
1590176472.02: notes_plat_sysinfo_495 = 
1590176472.02: notes_plat_sysinfo_500 =  run-level 3 May 21 18:49
1590176472.02: notes_plat_sysinfo_505 = 
1590176472.02: notes_plat_sysinfo_510 =  SPEC is set to: /home/ucsd/SpectreSandboxing/spec2017
1590176472.02: notes_plat_sysinfo_515 =     Filesystem                              Type  Size  Used Avail Use% Mounted on
1590176472.02: notes_plat_sysinfo_520 =     /dev/mapper/fedora_localhost--live-home ext4  391G  115G  256G  31% /home
1590176472.02: notes_plat_sysinfo_525 = 
1590176472.02: notes_plat_sysinfo_530 =  Additional information from dmidecode follows.  WARNING: Use caution when you interpret
1590176472.02: notes_plat_sysinfo_535 =  this section. The 'dmidecode' program reads system data which is "intended to allow
1590176472.02: notes_plat_sysinfo_540 =  hardware to be accurately determined", but the intent may not be met, as there are
1590176472.02: notes_plat_sysinfo_545 =  frequent changes to hardware, firmware, and the "DMTF SMBIOS" standard.
1590176472.02: notes_plat_sysinfo_550 = 
1590176472.02: notes_plat_sysinfo_555 =  (End of data from sysinfo program)
1590176472.02: notes_wrap_columns = 0
1590176472.02: notes_wrap_indent =   
1590176472.02: num              = 602
1590176472.02: obiwan           = 
1590176472.02: os_exe_ext       = 
1590176472.02: output_format    = txt,cfg,pdf,csv
1590176472.02: output_root      = 
1590176472.02: outputdir        = output
1590176472.02: parallel_test    = 1
1590176472.02: parallel_test_submit = 0
1590176472.02: parallel_test_workloads = 
1590176472.02: path             = /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s
1590176472.02: plain_train      = 1
1590176472.02: platform         = 
1590176472.02: power            = 0
1590176472.02: preENV_KMP_AFFINITY = granularity=fine,compact
1590176472.02: preENV_LD_LIBRARY_PATH = /home/ucsd/SpectreSandboxing/spec2017/lib/ia32:/home/ucsd/SpectreSandboxing/spec2017/lib/intel64
1590176472.02: preENV_OMP_STACKSIZE = 192M
1590176472.02: preenv           = 0
1590176472.02: prefix           = 
1590176472.02: prepared_by      = Intel Corporation
1590176472.02: ranks            = 1
1590176472.02: rawhash_bits     = 256
1590176472.02: rebuild          = 0
1590176472.02: reftime          = reftime
1590176472.02: reltol           = 
1590176472.02: reportable       = 0
1590176472.02: resultdir        = result
1590176472.02: review           = 0
1590176472.02: run              = all
1590176472.02: runcpu           = /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu --configfile wasm_lucet --action build --define cores=1 --noreportable --nopower --runmode speed --tune base --size refspeed 602.gcc_s --nopreenv --note-preenv --logfile /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.087/templogs/preenv.intspeed.087.0 --lognum 087.0 --from_runcpu 2
1590176472.02: rundir           = run
1590176472.02: runmode          = speed
1590176472.02: safe_eval        = 1
1590176472.02: save_build_files = 
1590176472.02: section_specifier_fatal = 1
1590176472.02: setprocgroup     = 1
1590176472.02: setup_error      = 0
1590176472.02: sigint           = 2
1590176472.02: size             = refspeed
1590176472.02: size_class       = ref
1590176472.02: skipabstol       = 
1590176472.02: skipobiwan       = 
1590176472.02: skipreltol       = 
1590176472.02: skiptol          = 
1590176472.02: smarttune        = base
1590176472.02: specdiff         = specdiff
1590176472.02: specrun          = specinvoke
1590176472.02: srcalt           = 
1590176472.02: srcdir           = src
1590176472.02: srcsource        = /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/src
1590176472.02: stagger          = 10
1590176472.02: strict_rundir_verify = 0
1590176472.02: sw_avail         = Sep-2017
1590176472.02: sw_base_ptrsize  = 64-bit
1590176472.02: sw_compiler001   = C/C++: Version 8.1.0 of GNU C/C++
1590176472.02: sw_compiler002   = Compiler for Linux;
1590176472.02: sw_compiler003   = Fortran: Version 8.1.0 of GNU Fortran
1590176472.02: sw_compiler004   = Compiler for Linux
1590176472.02: sw_file          = ext4
1590176472.02: sw_os001         = Fedora release 32 (Thirty Two)
1590176472.02: sw_os002         = 5.7.0-0.rc6.1.1.cet.fc32.x86_64
1590176472.02: sw_state         = Run level 3 (add definition here)
1590176472.02: sysinfo_hash_bits = 256
1590176472.02: sysinfo_program  = specperl /home/ucsd/SpectreSandboxing/spec2017/bin/sysinfo
1590176472.02: sysinfo_program_hash = sysinfo:SHA:ecd2bef08f316af97f5a7768b641e2a3307c1b4b68efb5a57fa76367d790d233
1590176472.02: table            = 1
1590176472.02: teeout           = 0
1590176472.02: test_date        = May-2020
1590176472.02: test_sponsor     = Intel Corporation
1590176472.02: tester           = Intel Corporation
1590176472.02: threads          = 1
1590176472.02: top              = /home/ucsd/SpectreSandboxing/spec2017
1590176472.02: train_single_thread = 0
1590176472.02: train_with       = train
1590176472.02: tune             = base
1590176472.02: uid              = 1004
1590176472.02: unbuffer         = 1
1590176472.02: uncertainty_exception = 5
1590176472.02: update           = 0
1590176472.02: update_url       = http://www.spec.org/auto/cpu2017/updates/
1590176472.02: use_submit_for_compare = 0
1590176472.02: use_submit_for_speed = 0
1590176472.02: username         = ucsd
1590176472.02: verbose          = 5
1590176472.02: verify_binaries  = 1
1590176472.02: version          = 0.905000
1590176472.02: version_url      = http://www.spec.org/auto/cpu2017/current_version
1590176472.02: voltage_range    = 
1590176472.02: worklist         = list
1590176472.02: OUTPUT_RMFILES   = 200.opts-O3_-finline-limit_50000.s scilab.opts-O3_-finline-limit_50000.s train01.opts-O3_-finline-limit_50000.s
1590176472.03:   Compile for '602.gcc_s' started at: 2020-05-22 12:41:12 (1590176472)
1590176472.03: Issuing make.clean command 'specmake --output-sync -j8 clean'
1590176472.03: Start make.clean command: 2020-05-22 12:41:12 (1590176472.0313)
1590176472.14: rm -rf *.o  200.opts-O3_-finline-limit_50000.s scilab.opts-O3_-finline-limit_50000.s train01.opts-O3_-finline-limit_50000.s
1590176472.14: find . \( -name \*.o -o -name '*.fppized.f*' -o -name '*.i' -o -name '*.mod' \) -print | xargs rm -rf
1590176472.14: rm -rf sgcc
1590176472.14: rm -rf sgcc.exe
1590176472.14: rm -rf core
1590176472.21: Stop make.clean command: 2020-05-22 12:41:12 (1590176472.2049)
1590176472.21: Elapsed time for make.clean command: 00:00:00 (0.173593997955322)
1590176472.21: Issuing make command 'specmake --output-sync -j8 build'
1590176472.21: Start make command: 2020-05-22 12:41:12 (1590176472.20663)
1590176472.31: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cc1-checksum.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cc1-checksum.c
1590176472.31: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.31: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o alloca.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  alloca.c
1590176472.31: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.41: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o alloc-pool.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  alloc-pool.c
1590176472.41: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.41: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o main.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  main.c
1590176472.41: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.41: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o argv.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  argv.c
1590176472.41: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.51: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bid2dpd_dpd2bid.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bid2dpd_dpd2bid.c
1590176472.51: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.62: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o auto-inc-dec.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  auto-inc-dec.c
1590176472.62: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.62: In file included from auto-inc-dec.c:37:
1590176472.62: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176472.62:   if (INSN_CODE (insn) < 0)
1590176472.62:       ^~~~~~~~~~~~~~~~
1590176472.62: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176472.62: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176472.62:                         ^           ~
1590176472.62: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176472.62: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176472.62:                          ^                ~
1590176472.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176472.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176472.62:                                      ^            ~
1590176472.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176472.62:     rtunion fld[1];
1590176472.62:     ^
1590176472.62: In file included from auto-inc-dec.c:37:
1590176472.62: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176472.62:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176472.62:                               ^~~~~~~~~~~~~~
1590176472.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176472.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176472.62:                         ^           ~
1590176472.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176472.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176472.62:                          ^                ~
1590176472.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176472.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176472.62:                                      ^            ~
1590176472.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176472.62:     rtunion fld[1];
1590176472.62:     ^
1590176472.62: In file included from auto-inc-dec.c:37:
1590176472.62: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176472.62:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176472.62:     ^~~~~~~~~~~~~~~~
1590176472.62: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176472.62: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176472.62:                         ^           ~
1590176472.62: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176472.62: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176472.62:                          ^                ~
1590176472.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176472.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176472.62:                                      ^            ~
1590176472.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176472.62:     rtunion fld[1];
1590176472.62:     ^
1590176472.62: In file included from auto-inc-dec.c:37:
1590176472.62: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176472.62:   return INSN_CODE (insn);
1590176472.62:          ^~~~~~~~~~~~~~~~
1590176472.62: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176472.62: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176472.62:                         ^           ~
1590176472.62: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176472.62: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176472.62:                          ^                ~
1590176472.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176472.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176472.62:                                      ^            ~
1590176472.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176472.62:     rtunion fld[1];
1590176472.62:     ^
1590176472.62: In file included from auto-inc-dec.c:37:
1590176472.62: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176472.62: #if HAVE_DESIGNATED_INITIALIZERS
1590176472.62:     ^
1590176472.62: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176472.62:    && !defined(__cplusplus))
1590176472.62:        ^
1590176472.62: 5 warnings generated.
1590176472.62: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o attribs.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  attribs.c
1590176472.62: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.72: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-errors.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-errors.c
1590176472.72: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176472.72: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-lang.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-lang.c
1590176472.72: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.12: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-lex.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-lex.c
1590176473.12: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.22: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-pragma.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-pragma.c
1590176473.22: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.32: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-convert.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-convert.c
1590176473.32: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.42: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bitmap.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bitmap.c
1590176473.42: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.42: bitmap.c:792:10: warning: shift count >= width of type [-Wshift-count-overflow]
1590176473.42:     word >>= 32, bit_no += 32;
1590176473.42:          ^   ~~
1590176473.42: bitmap.c:845:10: warning: shift count >= width of type [-Wshift-count-overflow]
1590176473.42:     word >>= 32, bit_no += 32;
1590176473.42:          ^   ~~
1590176473.42: 2 warnings generated.
1590176473.52: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-aux-info.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-aux-info.c
1590176473.52: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.62: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o alias.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  alias.c
1590176473.62: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.62: alias.c:262:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   tree expr = MEM_EXPR (mem);
1590176473.62:               ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:262:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   tree expr = MEM_EXPR (mem);
1590176473.62:               ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                                                   ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:269:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (!MEM_OFFSET (mem)
1590176473.62:        ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:269:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (!MEM_OFFSET (mem)
1590176473.62:        ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:270:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || !MEM_SIZE (mem))
1590176473.62:           ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:270:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || !MEM_SIZE (mem))
1590176473.62:           ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:308:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   ref->ref_alias_set = MEM_ALIAS_SET (mem);
1590176473.62:                        ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:308:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   ref->ref_alias_set = MEM_ALIAS_SET (mem);
1590176473.62:                        ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:313:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (INTVAL (MEM_OFFSET (mem)) < 0
1590176473.62:               ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:313:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (INTVAL (MEM_OFFSET (mem)) < 0
1590176473.62:               ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:314:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
1590176473.62:                    ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:314:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
1590176473.62:                                              ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:314:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
1590176473.62:                    ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:314:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
1590176473.62:                                              ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:318:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   ref->offset += INTVAL (MEM_OFFSET (mem)) * BITS_PER_UNIT;
1590176473.62:                          ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:318:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   ref->offset += INTVAL (MEM_OFFSET (mem)) * BITS_PER_UNIT;
1590176473.62:                          ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:319:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   ref->size = INTVAL (MEM_SIZE (mem)) * BITS_PER_UNIT;
1590176473.62:                       ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:319:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   ref->size = INTVAL (MEM_SIZE (mem)) * BITS_PER_UNIT;
1590176473.62:                       ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:329:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_EXPR (mem) != get_spill_slot_decl (false)
1590176473.62:       ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:329:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_EXPR (mem) != get_spill_slot_decl (false)
1590176473.62:       ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                                                   ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:379:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
1590176473.62:                    ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176473.62:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176473.62:                ^~~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:379:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
1590176473.62:                    ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176473.62:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176473.62:                ^~~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:379:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
1590176473.62:                                             ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176473.62:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176473.62:                ^~~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:379:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
1590176473.62:                                             ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176473.62:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176473.62:                ^~~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:381:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
1590176473.62:                                   ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:381:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
1590176473.62:                                                         ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:381:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
1590176473.62:                                   ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:381:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
1590176473.62:                                                         ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:453:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
1590176473.62:                                  ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:453:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
1590176473.62:                                                     ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:453:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
1590176473.62:                                  ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:453:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
1590176473.62:                                                     ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:481:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   return  for_each_rtx (&PATTERN (insn1), (rtx_function) walk_mems_1,
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:482:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                          &PATTERN (insn2));
1590176473.62:                           ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:685:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:         return MEM_ALIAS_SET (DECL_RTL (t));
1590176473.62:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:685:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:         return MEM_ALIAS_SET (DECL_RTL (t));
1590176473.62:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1002:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:         rtx temp, src_0 = XEXP (src, 0), src_1 = XEXP (src, 1);
1590176473.62:                                                  ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1058:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       return find_base_value (XEXP (src, 1));
1590176473.62:                               ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1063:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (CONST_INT_P (XEXP (src, 1)) && INTVAL (XEXP (src, 1)) != 0)
1590176473.62:                                                  ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1159:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       src = SET_SRC (set);
1590176473.62:             ^~~~~~~~~~~~~
1590176473.62: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.62: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.62:                      ^          ~
1590176473.62: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.62: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.62:                                ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:         if (XEXP (src, 0) != dest && XEXP (src, 1) != dest)
1590176473.62:                                      ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1207:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:             other = XEXP (src, 1);
1590176473.62:                     ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1208:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           else if (XEXP (src, 1) == dest)
1590176473.62:                    ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1305:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       rtx x1 = canon_rtx (XEXP (x, 1));
1590176473.62:                           ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1307:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (x0 != XEXP (x, 0) || x1 != XEXP (x, 1))
1590176473.62:                                      ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1388:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:              && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)))
1590176473.62:                                         ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1388:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:              && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)))
1590176473.62:                                                      ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1389:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:             || (rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 1))
1590176473.62:                                                      ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1390:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                 && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 0))));
1590176473.62:                                            ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1397:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       rtx yop1 = canon_rtx (XEXP (y, 1));
1590176473.62:                             ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1400:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)), yop1))
1590176473.62:                                                      ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1402:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                   && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)), yop0)));
1590176473.62:                                                         ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1408:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)),
1590176473.62:                                                     ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1409:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                                          canon_rtx (XEXP (y, 1))));
1590176473.62:                                                     ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1531:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       return find_base_term (XEXP (x, 1));
1590176473.62:                              ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1542:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:         rtx tmp2 = XEXP (x, 1);
1590176473.62:                    ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1604:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) != 0)
1590176473.62:                                                ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1668:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           || (int) GET_MODE_UNIT_SIZE (y_mode) < -INTVAL (XEXP (x, 1))))
1590176473.62:                                                           ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1672:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           || (int) GET_MODE_UNIT_SIZE (x_mode) < -INTVAL (XEXP (y, 1))))
1590176473.62:                                                           ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1798:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     x = XEXP (x, 1);
1590176473.62:         ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1804:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     y = XEXP (y, 1);
1590176473.62:         ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1827:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       rtx x1 = XEXP (x, 1);
1590176473.62:                ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1834:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           rtx y1 = XEXP (y, 1);
1590176473.62:                    ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1862:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       rtx y1 = XEXP (y, 1);
1590176473.62:                ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1879:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           rtx x1 = canon_rtx (XEXP (x, 1));
1590176473.62:                               ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1880:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           rtx y1 = canon_rtx (XEXP (y, 1));
1590176473.62:                               ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1908:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (GET_CODE (y) == AND || ysize < -INTVAL (XEXP (x, 1)))
1590176473.62:                                                   ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:1918:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       if (GET_CODE (x) == AND || xsize < -INTVAL (XEXP (y, 1)))
1590176473.62:                                                   ^        ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2000:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (mem2)
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2000:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (mem2)
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2007:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (mem1)
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2007:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (mem1)
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2140:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
1590176473.62:                ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2140:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
1590176473.62:                ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                                                   ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2140:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
1590176473.62:                                      ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2140:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
1590176473.62:                                      ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176473.62: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176473.62:                                                   ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2152:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:        && ! MEM_OFFSET (x))
1590176473.62:             ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2152:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:        && ! MEM_OFFSET (x))
1590176473.62:             ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2154:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           && ! MEM_OFFSET (y)))
1590176473.62:                ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2154:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:           && ! MEM_OFFSET (y)))
1590176473.62:                ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2165:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   moffsetx = MEM_OFFSET (x);
1590176473.62:              ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2165:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   moffsetx = MEM_OFFSET (x);
1590176473.62:              ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2193:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   moffsety = MEM_OFFSET (y);
1590176473.62:              ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                          ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2193:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   moffsety = MEM_OFFSET (y);
1590176473.62:              ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176473.62: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2245:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
1590176473.62:          ^~~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2245:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
1590176473.62:                                   ^~~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2245:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
1590176473.62:          ^~~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2245:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
1590176473.62:                                   ^~~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2254:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     offsetx = INTVAL (XEXP (basex, 1)), basex = XEXP (basex, 0);
1590176473.62:                       ^            ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2258:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     offsety = INTVAL (XEXP (basey, 1)), basey = XEXP (basey, 0);
1590176473.62:                       ^            ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2272:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:            : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))
1590176473.62:              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2272:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:            : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))
1590176473.62:                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2272:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:            : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))
1590176473.62:                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2275:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:            : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :
1590176473.62:              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2275:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:            : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :
1590176473.62:                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2275:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:            : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :
1590176473.62:                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2288:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_SIZE (x) && moffsetx)
1590176473.62:       ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2288:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_SIZE (x) && moffsetx)
1590176473.62:       ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2289:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     sizex = INTVAL (MEM_SIZE (x));
1590176473.62:                     ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2289:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     sizex = INTVAL (MEM_SIZE (x));
1590176473.62:                     ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2290:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_SIZE (y) && moffsety)
1590176473.62:       ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2290:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_SIZE (y) && moffsety)
1590176473.62:       ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2291:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     sizey = INTVAL (MEM_SIZE (y));
1590176473.62:                     ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:  ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2291:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:     sizey = INTVAL (MEM_SIZE (y));
1590176473.62:                     ^~~~~~~~~~~~
1590176473.62: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176473.62: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176473.62:                         ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2324:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
1590176473.62:       ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2324:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
1590176473.62:       ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2325:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176473.62:          ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2325:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176473.62:          ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2337:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2337:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:                               ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2337:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2337:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:                               ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2409:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
1590176473.62:       ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2409:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
1590176473.62:       ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2410:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176473.62:          ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2410:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176473.62:          ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2422:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2422:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:                               ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2422:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2422:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:                               ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2481:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
1590176473.62:       ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2481:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
1590176473.62:       ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2482:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176473.62:          ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                             ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2482:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176473.62:          ^~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176473.62: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176473.62:                                                        ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2492:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2492:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:                               ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176473.62:                              ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2492:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:       ^~~~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2492:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
1590176473.62:                               ^~~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176473.62:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176473.62:                                                     ^~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176473.62: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176473.62:                        ^               ~
1590176473.62: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176473.62: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176473.62:                             ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2599:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:   note_stores (PATTERN (insn), memory_modified_1, CONST_CAST_RTX(mem));
1590176473.62:                ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2684:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176473.62:                                              ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.62: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2705:8: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                   && REG_NOTES (insn) != 0
1590176473.62:                      ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176473.62: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176473.62:                         ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2707:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                 record_set (SET_DEST (PATTERN (insn)), NULL_RTX, NULL);
1590176473.62:                                       ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176473.62: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176473.62:                              ^~~
1590176473.62: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176473.62: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176473.62:                                                   ^~~
1590176473.62: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176473.62: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2709:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                 note_stores (PATTERN (insn), record_set, NULL);
1590176473.62:                              ^~~~~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2711:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               set = single_set (insn);
1590176473.62:                     ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176473.62:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.62:                                           ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176473.62: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176473.62:                                          ^~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2711:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:               set = single_set (insn);
1590176473.62:                     ^~~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176473.62:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.62:                             ^~~~~~~~~~~
1590176473.62: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.62: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.62:                         ^           ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2718:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                   rtx src = SET_SRC (set);
1590176473.62:                             ^~~~~~~~~~~~~
1590176473.62: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.62: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.62:                      ^          ~
1590176473.62: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.62: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.62:                                ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2742:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                       t = plus_constant (t, INTVAL (XEXP (src, 1)));
1590176473.62:                                                     ^          ~
1590176473.62: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.62: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.62:                          ^                ~
1590176473.62: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.62: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176473.62: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176473.62:                            ^~~
1590176473.62: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176473.62: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176473.62:                                       ^~~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: alias.c:2755:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.62:                    && NOTE_KIND (insn) == NOTE_INSN_FUNCTION_BEG)
1590176473.62:                       ^~~~~~~~~~~~~~~~
1590176473.62: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176473.62: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176473.62:                         ^            ~
1590176473.62: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176473.62: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176473.62:                                ^                 ~
1590176473.62: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.62: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.62:                                      ^            ~
1590176473.62: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.62:     rtunion fld[1];
1590176473.62:     ^
1590176473.62: 138 warnings generated.
1590176473.76: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bb-reorder.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bb-reorder.c
1590176473.76: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.76: bb-reorder.c:1176:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:   FOR_BB_INSNS (bb, insn)
1590176473.76:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176473.76:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176473.76:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1176:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:   FOR_BB_INSNS (bb, insn)
1590176473.76:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176473.76:        (INSN) = NEXT_INSN (INSN))
1590176473.76:                 ^~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1307:9: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                       JUMP_LABEL (new_jump) = label;
1590176473.76:                       ^~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176473.76: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176473.76:                            ^            ~
1590176473.76: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1308:9: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                       LABEL_NUSES (label) += 1;
1590176473.76:                       ^~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176473.76: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176473.76:                          ^           ~
1590176473.76: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176473.76: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1514:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                !INSN_P (insn) && insn != NEXT_INSN (BB_END (src));
1590176473.76:                                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1515:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                insn = NEXT_INSN (insn))
1590176473.76:                       ^~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1593:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                 set_src = SET_SRC (PATTERN (old_jump));
1590176473.76:                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.76: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.76:                      ^          ~
1590176473.76: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1593:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                 set_src = SET_SRC (PATTERN (old_jump));
1590176473.76:                                    ^~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.76: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176473.76: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.76:                            ^~~
1590176473.76: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                             ^~~
1590176473.76: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                       ^~~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1596:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                   set_src = XVECEXP (PATTERN (old_jump), 0,0);
1590176473.76:                                      ^~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.76: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176473.76: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176473.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176473.76:                                      ^~~
1590176473.76: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                       ^~~
1590176473.76: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176473.76: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176473.76:                                       ^~~~~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1598:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                     set_src = SET_SRC (set_src);
1590176473.76:                               ^~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.76: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.76:                      ^          ~
1590176473.76: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1607:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                 old_label = XEXP (set_src, 2);
1590176473.76:                             ^              ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1609:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                 old_label = XEXP (set_src, 1);
1590176473.76:                             ^              ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1636:21: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                       old_label = JUMP_LABEL (old_jump);
1590176473.76:                                   ^~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176473.76: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176473.76:                            ^            ~
1590176473.76: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1650:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                   JUMP_LABEL (new_jump) = old_label;
1590176473.76:                   ^~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176473.76: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176473.76:                            ^            ~
1590176473.76: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1729:16: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:               label = JUMP_LABEL (last_insn);
1590176473.76:                       ^~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176473.76: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176473.76:                            ^            ~
1590176473.76: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.76: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1731:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:               LABEL_NUSES (label) += 1;
1590176473.76:               ^~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176473.76: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176473.76:                          ^           ~
1590176473.76: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176473.76: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176473.76:                                ^                 ~
1590176473.76: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.76: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1749:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                    cur_insn = NEXT_INSN (cur_insn))
1590176473.76:                               ^~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1752:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:                     BLOCK_FOR_INSN (cur_insn) = cur_bb;
1590176473.76:                     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176473.76: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176473.76:                              ^             ~
1590176473.76: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176473.76: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176473.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:1967:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:           BLOCK_FOR_INSN (new_note) = NULL;
1590176473.76:           ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176473.76: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176473.76:                              ^             ~
1590176473.76: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176473.76: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176473.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:2036:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:       FOR_BB_INSNS (bb, insn)
1590176473.76:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176473.76:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176473.76:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: bb-reorder.c:2036:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.76:       FOR_BB_INSNS (bb, insn)
1590176473.76:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.76: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176473.76:        (INSN) = NEXT_INSN (INSN))
1590176473.76:                 ^~~~~~~~~~~~~~~~
1590176473.76: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.76: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.76:                         ^           ~
1590176473.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.76:                          ^                ~
1590176473.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.76:                                      ^            ~
1590176473.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.76:     rtunion fld[1];
1590176473.76:     ^
1590176473.76: 21 warnings generated.
1590176473.87: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bt-load.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bt-load.c
1590176473.87: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176473.87: In file included from bt-load.c:39:
1590176473.87: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:   if (INSN_CODE (insn) < 0)
1590176473.87:       ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176473.87: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176473.87: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: In file included from bt-load.c:39:
1590176473.87: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176473.87:                               ^~~~~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: In file included from bt-load.c:39:
1590176473.87: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176473.87:     ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176473.87: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176473.87: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: In file included from bt-load.c:39:
1590176473.87: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:   return INSN_CODE (insn);
1590176473.87:          ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176473.87: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176473.87: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: In file included from bt-load.c:39:
1590176473.87: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176473.87: #if HAVE_DESIGNATED_INITIALIZERS
1590176473.87:     ^
1590176473.87: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176473.87:    && !defined(__cplusplus))
1590176473.87:        ^
1590176473.87: bt-load.c:230:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       && (set = single_set (insn)))
1590176473.87:                 ^~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176473.87:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.87:                                           ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176473.87: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176473.87:                                          ^~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:230:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       && (set = single_set (insn)))
1590176473.87:                 ^~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176473.87:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.87:                             ^~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:233:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       rtx src = SET_SRC (set);
1590176473.87:                 ^~~~~~~~~~~~~
1590176473.87: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.87: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.87:                      ^          ~
1590176473.87: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.87: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.87:                                ^                 ~
1590176473.87: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.87: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:270:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       rtx def_src = SET_SRC (single_set (def->insn));
1590176473.87:                              ^~~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176473.87:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.87:                                           ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176473.87: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176473.87:                                          ^~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176473.87: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176473.87: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.87:                            ^~~
1590176473.87: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176473.87: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.87:                                             ^~~
1590176473.87: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176473.87: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.87:                                       ^~~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:270:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       rtx def_src = SET_SRC (single_set (def->insn));
1590176473.87:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.87: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.87:                      ^          ~
1590176473.87: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.87: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.87:                                ^                 ~
1590176473.87: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.87: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:270:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       rtx def_src = SET_SRC (single_set (def->insn));
1590176473.87:                              ^~~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176473.87:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.87:                             ^~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176473.87: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176473.87: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.87:                            ^~~
1590176473.87: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176473.87: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.87:                                             ^~~
1590176473.87: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176473.87: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.87:                                       ^~~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:339:29: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:   rtx *usep = find_btr_use (PATTERN (insn));
1590176473.87:                             ^~~~~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:350:51: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       unambiguous_single_use = !btr_referenced_p (PATTERN (insn), usep);
1590176473.87:                                                   ^~~~~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:481:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb));
1590176473.87:                                        ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.87: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:483:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:            insn = NEXT_INSN (insn), insn_luid++)
1590176473.87:                   ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.87: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:526:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:                   if (btr_referenced_p (PATTERN (insn), NULL))
1590176473.87:                                         ^~~~~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:546:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:                           note_stores (PATTERN (insn), note_btr_set, &info);
1590176473.87:                                        ^~~~~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:555:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:                       rtx pat = PATTERN (insn);
1590176473.87:                                 ^~~~~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:583:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:         insn = PREV_INSN (insn);
1590176473.87:                ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176473.87: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:678:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb));
1590176473.87:                                        ^~~~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.87: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:680:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:            insn = NEXT_INSN (insn))
1590176473.87:                   ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.87: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1179:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:     insp = NEXT_INSN (insp);
1590176473.87:            ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176473.87: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1188:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       for (insp = BB_END (b); ! INSN_P (insp); insp = PREV_INSN (insp))
1590176473.87:                                                       ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176473.87: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1192:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:         insp = PREV_INSN (insp);
1590176473.87:                ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176473.87: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1195:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:   set = single_set (old_insn);
1590176473.87:         ^~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176473.87:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.87:                                           ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176473.87: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176473.87:                                          ^~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1195:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:   set = single_set (old_insn);
1590176473.87:         ^~~~~~~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176473.87:                           ? PATTERN (I) : single_set_1 (I)) \
1590176473.87:                             ^~~~~~~~~~~
1590176473.87: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176473.87: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1196:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:   src = SET_SRC (set);
1590176473.87:         ^~~~~~~~~~~~~
1590176473.87: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176473.87: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176473.87:                      ^          ~
1590176473.87: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176473.87: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176473.87:                                ^                 ~
1590176473.87: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176473.87: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: bt-load.c:1240:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176473.87:       insn = PREV_INSN (insn);
1590176473.87:              ^~~~~~~~~~~~~~~~
1590176473.87: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176473.87: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176473.87:                         ^           ~
1590176473.87: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176473.87: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176473.87:                          ^                ~
1590176473.87: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176473.87: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176473.87:                                      ^            ~
1590176473.87: ./rtl.h:316:5: note: array 'fld' declared here
1590176473.87:     rtunion fld[1];
1590176473.87:     ^
1590176473.87: 28 warnings generated.
1590176474.07: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-semantics.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-semantics.c
1590176474.07: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.07: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-opts.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-opts.c
1590176474.07: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.07: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-ppoutput.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-ppoutput.c
1590176474.07: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.07: In file included from c-ppoutput.c:28:
1590176474.07: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176474.07: #if HAVE_DESIGNATED_INITIALIZERS
1590176474.07:     ^
1590176474.07: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176474.07:    && !defined(__cplusplus))
1590176474.07:        ^
1590176474.07: 1 warning generated.
1590176474.17: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-dump.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-dump.c
1590176474.17: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.27: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-objc-common.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-objc-common.c
1590176474.27: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.57: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-gimplify.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-gimplify.c
1590176474.57: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.77: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-omp.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-omp.c
1590176474.77: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.87: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-pretty-print.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-pretty-print.c
1590176474.87: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176474.98: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-format.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-format.c
1590176474.98: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176475.38: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o caller-save.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  caller-save.c
1590176475.38: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176475.38: In file included from caller-save.c:31:
1590176475.38: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:   if (INSN_CODE (insn) < 0)
1590176475.38:       ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: In file included from caller-save.c:31:
1590176475.38: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176475.38:                               ^~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: In file included from caller-save.c:31:
1590176475.38: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176475.38:     ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: In file included from caller-save.c:31:
1590176475.38: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:   return INSN_CODE (insn);
1590176475.38:          ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: In file included from caller-save.c:31:
1590176475.38: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176475.38: #if HAVE_DESIGNATED_INITIALIZERS
1590176475.38:     ^
1590176475.38: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176475.38:    && !defined(__cplusplus))
1590176475.38:        ^
1590176475.38: caller-save.c:158:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:   INSN_CODE (saveinsn) = -1;
1590176475.38:   ^~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:159:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:   INSN_CODE (restinsn) = -1;
1590176475.38:   ^~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:488:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:           freq = REG_FREQ_FROM_BB (BLOCK_FOR_INSN (insn));
1590176475.38:                                    ^~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.38:                              ^             ~
1590176475.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./regs.h:147:14: note: expanded from macro 'REG_FREQ_FROM_BB'
1590176475.38:                               : ((bb)->frequency * REG_FREQ_MAX / BB_FREQ_MAX)\
1590176475.38:                                   ^~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:488:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:           freq = REG_FREQ_FROM_BB (BLOCK_FOR_INSN (insn));
1590176475.38:                                    ^~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.38:                              ^             ~
1590176475.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./regs.h:148:14: note: expanded from macro 'REG_FREQ_FROM_BB'
1590176475.38:                               ? ((bb)->frequency * REG_FREQ_MAX / BB_FREQ_MAX)\
1590176475.38:                                   ^~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:499:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:           note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);
1590176475.38:                        ^~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:558:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:           note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);
1590176475.38:                        ^~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:804:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                   mark_referenced_regs (&PATTERN (insn),
1590176475.38:                                          ^~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:859:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:               note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);
1590176475.38:                            ^~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:880:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:         mark_referenced_regs (&PATTERN (insn),
1590176475.38:                                ^~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:894:25: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:               basic_block bb = BLOCK_FOR_INSN (insn);
1590176475.38:                                ^~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.38:                              ^             ~
1590176475.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:900:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:               for (ins = PREV_INSN (insn); ins != last->insn; ins = prev)
1590176475.38:                          ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:902:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                   prev = PREV_INSN (ins);
1590176475.38:                          ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:905:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       NEXT_INSN (prev) = NEXT_INSN (ins);
1590176475.38:                       ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:905:28: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       NEXT_INSN (prev) = NEXT_INSN (ins);
1590176475.38:                                          ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:906:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       PREV_INSN (NEXT_INSN (ins)) = prev;
1590176475.38:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:906:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       PREV_INSN (NEXT_INSN (ins)) = prev;
1590176475.38:                                  ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                               ^~~~
1590176475.38: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                                      ^~~
1590176475.38: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                       ^~~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:907:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       PREV_INSN (ins) = insn;
1590176475.38:                       ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:908:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       NEXT_INSN (ins) = NEXT_INSN (insn);
1590176475.38:                       ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:908:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       NEXT_INSN (ins) = NEXT_INSN (insn);
1590176475.38:                                         ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:909:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       NEXT_INSN (insn) = ins;
1590176475.38:                       ^~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:910:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                       if (NEXT_INSN (ins))
1590176475.38:                           ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:911:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                         PREV_INSN (NEXT_INSN (ins)) = ins;
1590176475.38:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:911:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                         PREV_INSN (NEXT_INSN (ins)) = ins;
1590176475.38:                                    ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176475.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.38:                               ^~~~
1590176475.38: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                                      ^~~
1590176475.38: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                       ^~~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:982:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                                     SUBREG_BYTE (reg),
1590176475.38:                                     ^~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176475.38: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176475.38:                          ^            ~
1590176475.38: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176475.38: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176475.38:                                ^                 ~
1590176475.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1227:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                    GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
1590176475.38:                                                            ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176475.38: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176475.38:  ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176475.38: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176475.38:                        ^               ~
1590176475.38: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176475.38: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176475.38:                             ^                 ~
1590176475.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176475.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176475.38:                ^~~~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1227:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                    GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
1590176475.38:                                                            ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176475.38: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176475.38:                         ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176475.38: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176475.38:                        ^               ~
1590176475.38: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176475.38: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176475.38:                             ^                 ~
1590176475.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176475.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176475.38:                ^~~~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1308:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                    GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
1590176475.38:                                                            ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176475.38: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176475.38:  ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176475.38: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176475.38:                        ^               ~
1590176475.38: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176475.38: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176475.38:                             ^                 ~
1590176475.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176475.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176475.38:                ^~~~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1308:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:                    GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
1590176475.38:                                                            ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176475.38: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176475.38:                         ^~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176475.38: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176475.38:                        ^               ~
1590176475.38: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176475.38: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176475.38:                             ^                 ~
1590176475.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176475.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176475.38:                ^~~~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1398:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:       note_uses (&PATTERN (chain->insn), add_used_regs,
1590176475.38:                   ^~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1403:14: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:         for (link = CALL_INSN_FUNCTION_USAGE (chain->insn);
1590176475.38:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176475.38: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176475.38:                                         ^          ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1405:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:              link = XEXP (link, 1))
1590176475.38:                     ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1427:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:       note_stores (PATTERN (chain->insn), add_stored_regs,
1590176475.38:                    ^~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: caller-save.c:1436:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.38:   INSN_CODE (new_chain->insn) = code;
1590176475.38:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.38:                         ^           ~
1590176475.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.38:                          ^                ~
1590176475.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.38:                                      ^            ~
1590176475.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.38:     rtunion fld[1];
1590176475.38:     ^
1590176475.38: 38 warnings generated.
1590176475.88: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfg.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfg.c
1590176475.88: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176475.98: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfganal.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfganal.c
1590176475.98: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176475.98: In file included from cfganal.c:32:
1590176475.98: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   if (INSN_CODE (insn) < 0)
1590176475.98:       ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.98: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.98: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: In file included from cfganal.c:32:
1590176475.98: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176475.98:                               ^~~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: In file included from cfganal.c:32:
1590176475.98: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176475.98:     ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.98: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.98: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: In file included from cfganal.c:32:
1590176475.98: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   return INSN_CODE (insn);
1590176475.98:          ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176475.98: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176475.98: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: In file included from cfganal.c:32:
1590176475.98: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176475.98: #if HAVE_DESIGNATED_INITIALIZERS
1590176475.98:     ^
1590176475.98: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176475.98:    && !defined(__cplusplus))
1590176475.98:        ^
1590176475.98: cfganal.c:77:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:       && REG_FUNCTION_VALUE_P (XEXP (PATTERN (insn), 0)))
1590176475.98:                                      ^~~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:1061:45: note: expanded from macro 'REG_FUNCTION_VALUE_P'
1590176475.98:   (RTL_FLAG_CHECK2("REG_FUNCTION_VALUE_P", (RTX), REG, PARALLEL)->return_val)
1590176475.98:                                             ^~~
1590176475.98: ./rtl.h:693:48: note: expanded from macro 'RTL_FLAG_CHECK2'
1590176475.98: #define RTL_FLAG_CHECK2(NAME, RTX, C1, C2)                              (RTX)
1590176475.98:                                                                          ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfganal.c:95:57: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = NEXT_INSN (insn))
1590176475.98:                                                         ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfganal.c:268:38: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:       if (!invert_jump (BB_END (bb), JUMP_LABEL (BB_END (bb)), 0))
1590176475.98:                                      ^~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176475.98: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176475.98:                            ^            ~
1590176475.98: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176475.98: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfganal.c:270:33: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:       invert_jump (BB_END (bb), JUMP_LABEL (BB_END (bb)), 0);
1590176475.98:                                 ^~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176475.98: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176475.98:                            ^            ~
1590176475.98: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176475.98: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: 9 warnings generated.
1590176475.98: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgbuild.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgbuild.c
1590176475.98: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176475.98: cfgbuild.c:55:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:       return (NEXT_INSN (insn) == 0
1590176475.98:               ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:115:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:           && XEXP (PATTERN (insn), 0) == const1_rtx)
1590176475.98:                    ^~~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:153:38: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   cached_make_edge (edge_cache, src, BLOCK_FOR_INSN (label), flags);
1590176475.98:                                      ^~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.98: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.98:                              ^             ~
1590176475.98: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.98: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.98: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:278:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                 vec = XVEC (PATTERN (tmp), 0);
1590176475.98:                             ^~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176475.98: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:280:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                 vec = XVEC (PATTERN (tmp), 1);
1590176475.98:                       ^                    ~
1590176475.98: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176475.98: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:280:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                 vec = XVEC (PATTERN (tmp), 1);
1590176475.98:                             ^~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176475.98: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:289:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               if ((tmp = single_set (insn)) != NULL
1590176475.98:                          ^~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176475.98:                           ? PATTERN (I) : single_set_1 (I)) \
1590176475.98:                                           ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176475.98: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176475.98:                                          ^~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:289:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               if ((tmp = single_set (insn)) != NULL
1590176475.98:                          ^~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176475.98:                           ? PATTERN (I) : single_set_1 (I)) \
1590176475.98:                             ^~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:294:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                                  XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);
1590176475.98:                                        ^                    ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:294:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                                  XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);
1590176475.98:                                              ^~~~~~~~~~~~~
1590176475.98: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176475.98: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176475.98:                      ^          ~
1590176475.98: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176475.98: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:301:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               for (x = forced_labels; x; x = XEXP (x, 1))
1590176475.98:                                              ^        ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:310:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:           else if ((tmp = extract_asm_operands (PATTERN (insn))) != NULL)
1590176475.98:                                                 ^~~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:312:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               int i, n = ASM_OPERANDS_LABEL_LENGTH (tmp);
1590176475.98:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1196:40: note: expanded from macro 'ASM_OPERANDS_LABEL_LENGTH'
1590176475.98: #define ASM_OPERANDS_LABEL_LENGTH(RTX) XCVECLEN (RTX, 5, ASM_OPERANDS)
1590176475.98:                                        ^              ~
1590176475.98: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176475.98: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176475.98:                                               ^           ~
1590176475.98: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176475.98: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176475.98: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176475.98:                                           ^~~~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:315:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                                  XEXP (ASM_OPERANDS_LABEL (tmp, i), 0), 0);
1590176475.98:                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1197:36: note: expanded from macro 'ASM_OPERANDS_LABEL'
1590176475.98: #define ASM_OPERANDS_LABEL(RTX, N) XCVECEXP (RTX, 5, N, ASM_OPERANDS)
1590176475.98:                                    ^              ~
1590176475.98: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176475.98: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176475.98:                                            ^           ~
1590176475.98: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176475.98: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176475.98:                                ^                 ~
1590176475.98: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176475.98: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176475.98: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176475.98:                                       ^~~~~
1590176475.98: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:321:20: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               gcc_assert (JUMP_LABEL (insn));
1590176475.98:                           ^~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176475.98: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176475.98:                            ^            ~
1590176475.98: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176475.98: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176475.98:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176475.98:                ^~~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:322:41: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               make_label_edge (edge_cache, bb, JUMP_LABEL (insn), 0);
1590176475.98:                                                ^~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176475.98: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176475.98:                            ^            ~
1590176475.98: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176475.98: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:352:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                 for (x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))
1590176475.98:                                                               ^        ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:359:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:       insn = NEXT_INSN (insn);
1590176475.98:              ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:366:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:              && NOTE_KIND (insn) != NOTE_INSN_BASIC_BLOCK)
1590176475.98:                 ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176475.98: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176475.98:                         ^            ~
1590176475.98: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176475.98: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:367:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:         insn = NEXT_INSN (insn);
1590176475.98:                ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:391:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   bb = BLOCK_FOR_INSN (label);
1590176475.98:        ^~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.98: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.98:                              ^             ~
1590176475.98: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.98: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.98: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:405:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     vec = XVEC (PATTERN (table), 0);
1590176475.98:                 ^~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176475.98: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:407:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     vec = XVEC (PATTERN (table), 1);
1590176475.98:           ^                      ~
1590176475.98: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176475.98: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:407:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     vec = XVEC (PATTERN (table), 1);
1590176475.98:                 ^~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176475.98: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:415:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   if ((tmp = single_set (insn)) != NULL
1590176475.98:              ^~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176475.98:                           ? PATTERN (I) : single_set_1 (I)) \
1590176475.98:                                           ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176475.98: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176475.98:                                          ^~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:415:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:   if ((tmp = single_set (insn)) != NULL
1590176475.98:              ^~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176475.98:                           ? PATTERN (I) : single_set_1 (I)) \
1590176475.98:                             ^~~~~~~~~~~
1590176475.98: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176475.98: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:419:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     mark_tablejump_edge (XEXP (XEXP (SET_SRC (tmp), 2), 0));
1590176475.98:                                ^                    ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:419:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     mark_tablejump_edge (XEXP (XEXP (SET_SRC (tmp), 2), 0));
1590176475.98:                                      ^~~~~~~~~~~~~
1590176475.98: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176475.98: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176475.98:                      ^          ~
1590176475.98: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176475.98: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176475.98:                                ^                 ~
1590176475.98: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176475.98: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                                      ^~~
1590176475.98: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                       ^~~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:452:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:     insn = NEXT_INSN (insn);
1590176475.98:            ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:464:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:           fallthru = split_block (bb, PREV_INSN (insn));
1590176475.98:                                       ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176475.98: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:470:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:               for (x = NEXT_INSN (flow_transfer_insn);
1590176475.98:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:472:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                    x = NEXT_INSN (x))
1590176475.98:                        ^~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:474:5: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:                   set_block_for_insn (x, NULL);
1590176475.98:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176475.98: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176475.98:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.98: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.98:                              ^             ~
1590176475.98: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.98: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.98: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:496:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:       insn = NEXT_INSN (insn);
1590176475.98:              ^~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:510:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:           x = NEXT_INSN (x);
1590176475.98:               ^~~~~~~~~~~~~
1590176475.98: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176475.98: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176475.98:                         ^           ~
1590176475.98: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176475.98: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176475.98: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: cfgbuild.c:512:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176475.98:             set_block_for_insn (x, NULL);
1590176475.98:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176475.98: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176475.98:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176475.98: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176475.98: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176475.98:                              ^             ~
1590176475.98: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176475.98: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176475.98:                          ^                ~
1590176475.98: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176475.98: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176475.98:                                      ^            ~
1590176475.98: ./rtl.h:316:5: note: array 'fld' declared here
1590176475.98:     rtunion fld[1];
1590176475.98:     ^
1590176475.98: 36 warnings generated.
1590176476.59: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o calls.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  calls.c
1590176476.59: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176476.59: calls.c:409:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:                                CALL_INSN_FUNCTION_USAGE (call_insn));
1590176476.59:                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176476.59: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176476.59:                                         ^          ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./genrtl.h:242:47: note: expanded from macro 'gen_rtx_EXPR_LIST'
1590176476.59:   gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
1590176476.59:                                               ^~~~
1590176476.59: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176476.59:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176476.59:                                        ^~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:406:2: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:         CALL_INSN_FUNCTION_USAGE (call_insn)
1590176476.59:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176476.59: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176476.59:                                         ^          ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:837:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:         && (MEM_ALIGN (args[i].value)
1590176476.59:             ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176476.59: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176476.59:  ^~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176476.59: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176476.59:                        ^               ~
1590176476.59: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176476.59: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176476.59:                             ^                 ~
1590176476.59: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176476.59: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:837:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:         && (MEM_ALIGN (args[i].value)
1590176476.59:             ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176476.59: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176476.59:                         ^~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176476.59: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176476.59:                        ^               ~
1590176476.59: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176476.59: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176476.59:                             ^                 ~
1590176476.59: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176476.59: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:1411:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:         arg_reg = XEXP (argblock, 0), arg_offset = INTVAL (XEXP (argblock, 1));
1590176476.59:                                                            ^               ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176476.59: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176476.59:                            ^~~
1590176476.59: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176476.59: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176476.59:                                       ^~~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:1547:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:     i = INTVAL (XEXP (addr, 1));
1590176476.59:                 ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176476.59: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176476.59:                            ^~~
1590176476.59: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176476.59: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176476.59:                                       ^~~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:1551:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:                || XEXP (addr, 1) == crtl->args.internal_arg_pointer))
1590176476.59:                   ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:1833:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:     insn = NEXT_INSN (insn);
1590176476.59:            ^~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176476.59: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176476.59:                         ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:1835:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:   for (; insn; insn = NEXT_INSN (insn))
1590176476.59:                       ^~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176476.59: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176476.59:                         ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:1837:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:         && check_sibcall_argument_overlap_1 (PATTERN (insn)))
1590176476.59:                                              ^~~~~~~~~~~~~~
1590176476.59: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176476.59: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176476.59:                         ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:2706:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:               rtx offset = XEXP (elem, 1);
1590176476.59:                            ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:2906:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:               last = PREV_INSN (last);
1590176476.59:                      ^~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176476.59: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176476.59:                         ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:3193:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176476.59:                                          ^~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176476.59: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176476.59:                         ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:3200:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:           && NOTE_KIND (insn) == NOTE_INSN_FUNCTION_BEG)
1590176476.59:              ^~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176476.59: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176476.59:                         ^            ~
1590176476.59: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176476.59: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176476.59:                                ^                 ~
1590176476.59: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176476.59: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:3842:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:           last = PREV_INSN (last);
1590176476.59:                  ^~~~~~~~~~~~~~~~
1590176476.59: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176476.59: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176476.59:                         ^           ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:4028:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:             lower_bound = INTVAL (XEXP (XEXP (arg->stack_slot, 0), 1));
1590176476.59:                                   ^                                ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176476.59: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176476.59:                            ^~~
1590176476.59: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176476.59: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176476.59:                                       ^~~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: calls.c:4265:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176476.59:                 i = INTVAL (XEXP (XEXP (x, 0), 1));
1590176476.59:                             ^                  ~
1590176476.59: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176476.59: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176476.59:                          ^                ~
1590176476.59: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176476.59: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176476.59:                                      ^            ~
1590176476.59: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176476.59: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176476.59:                            ^~~
1590176476.59: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176476.59: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176476.59:                                       ^~~
1590176476.59: ./rtl.h:316:5: note: array 'fld' declared here
1590176476.59:     rtunion fld[1];
1590176476.59:     ^
1590176476.59: 17 warnings generated.
1590176476.69: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-typeck.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-typeck.c
1590176476.69: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176476.79: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfghooks.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfghooks.c
1590176476.79: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176476.99: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-decl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-decl.c
1590176476.99: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176476.99: In file included from c-decl.c:9539:
1590176476.99: ./gt-c-decl.h:92:7: warning: switch condition has boolean value [-Wswitch-bool]
1590176476.99:       switch (TREE_CODE ((*x).decl) == LABEL_DECL)
1590176476.99:       ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.99: ./gt-c-decl.h:146:7: warning: switch condition has boolean value [-Wswitch-bool]
1590176476.99:       switch (TREE_CODE (&((*x)).generic) == IDENTIFIER_NODE)
1590176476.99:       ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.99: ./gt-c-decl.h:652:7: warning: switch condition has boolean value [-Wswitch-bool]
1590176476.99:       switch (TREE_CODE ((*x).decl) == LABEL_DECL)
1590176476.99:       ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.99: ./gt-c-decl.h:706:7: warning: switch condition has boolean value [-Wswitch-bool]
1590176476.99:       switch (TREE_CODE (&((*x)).generic) == IDENTIFIER_NODE)
1590176476.99:       ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.99: ./gt-c-decl.h:1214:3: warning: switch condition has boolean value [-Wswitch-bool]
1590176476.99:   switch (TREE_CODE ((*x).decl) == LABEL_DECL)
1590176476.99:   ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.99: ./gt-c-decl.h:1278:3: warning: switch condition has boolean value [-Wswitch-bool]
1590176476.99:   switch (TREE_CODE (&((*x)).generic) == IDENTIFIER_NODE)
1590176476.99:   ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176476.99: 6 warnings generated.
1590176477.30: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgloopanal.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgloopanal.c
1590176477.30: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176477.30: cfgloopanal.c:178:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:       FOR_BB_INSNS (bb, insn)
1590176477.30:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.30: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176477.30:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176477.30:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.30: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: cfgloopanal.c:178:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:       FOR_BB_INSNS (bb, insn)
1590176477.30:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.30: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176477.30:        (INSN) = NEXT_INSN (INSN))
1590176477.30:                 ^~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.30: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: cfgloopanal.c:205:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:       FOR_BB_INSNS (bb, insn)
1590176477.30:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.30: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176477.30:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176477.30:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.30: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: cfgloopanal.c:205:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:       FOR_BB_INSNS (bb, insn)
1590176477.30:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.30: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176477.30:        (INSN) = NEXT_INSN (INSN))
1590176477.30:                 ^~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.30: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: cfgloopanal.c:308:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:   for (; seq; seq = NEXT_INSN (seq))
1590176477.30:                     ^~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.30: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: cfgloopanal.c:310:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:       set = single_set (seq);
1590176477.30:             ^~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176477.30:                           ? PATTERN (I) : single_set_1 (I)) \
1590176477.30:                                           ^~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176477.30: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176477.30:                                          ^~~~~~~~~~~
1590176477.30: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.30: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: cfgloopanal.c:310:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.30:       set = single_set (seq);
1590176477.30:             ^~~~~~~~~~~~~~~~
1590176477.30: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176477.30:                           ? PATTERN (I) : single_set_1 (I)) \
1590176477.30:                             ^~~~~~~~~~~
1590176477.30: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.30: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.30:                         ^           ~
1590176477.30: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.30: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.30:                          ^                ~
1590176477.30: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.30: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.30:                                      ^            ~
1590176477.30: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.30:     rtunion fld[1];
1590176477.30:     ^
1590176477.30: 7 warnings generated.
1590176477.50: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfglayout.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfglayout.c
1590176477.50: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176477.50: cfglayout.c:61:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   rtx prevfirst = PREV_INSN (first);
1590176477.50:                   ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:62:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   rtx nextlast = NEXT_INSN (last);
1590176477.50:                  ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:64:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   PREV_INSN (first) = NULL;
1590176477.50:   ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:65:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   NEXT_INSN (last) = NULL;
1590176477.50:   ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:67:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     NEXT_INSN (prevfirst) = nextlast;
1590176477.50:     ^~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:69:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     PREV_INSN (nextlast) = prevfirst;
1590176477.50:     ^~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:90:48: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (last_insn = insn = BB_END (bb); (insn = NEXT_INSN (insn)) != 0; )
1590176477.50:                                                ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:102:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           switch (NOTE_KIND (insn))
1590176477.50:                   ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:114:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (NEXT_INSN (insn)
1590176477.50:               ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:117:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               insn = NEXT_INSN (insn);
1590176477.50:                      ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:142:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       prev = PREV_INSN (insn);
1590176477.50:              ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:144:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         switch (NOTE_KIND (insn))
1590176477.50:                 ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:191:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        && NOTE_KIND (insn) != NOTE_INSN_BASIC_BLOCK;
1590176477.50:           ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:192:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        insn = NEXT_INSN (insn))
1590176477.50:               ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:197:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (PREV_INSN (insn))
1590176477.50:       ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:199:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             unlink_insn_chain (get_insns (), PREV_INSN (insn));
1590176477.50:                                              ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:208:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       if (PREV_INSN (BB_HEAD (bb)) && next_insn != BB_HEAD (bb))
1590176477.50:           ^~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:210:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                                               PREV_INSN (BB_HEAD (bb)));
1590176477.50:                                               ^~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:212:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       if (NEXT_INSN (BB_END (bb)) && BB_END (bb) != end)
1590176477.50:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:213:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         bb->il.rtl->footer = unlink_insn_chain (NEXT_INSN (BB_END (bb)), end);
1590176477.50:                                                 ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:214:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       next_insn = NEXT_INSN (BB_END (bb));
1590176477.50:                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:447:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       NOTE_BLOCK (note) = s;
1590176477.50:       ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176477.50: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176477.50:                                 ^             ~
1590176477.50: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176477.50: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:456:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       NOTE_BLOCK (insn) = s;
1590176477.50:       ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176477.50: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176477.50:                                 ^             ~
1590176477.50: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176477.50: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:504:25: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   return locator_scope (INSN_LOCATOR (insn));
1590176477.50:                         ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:548:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   return locator_line (INSN_LOCATOR (insn));
1590176477.50:                        ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:567:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   return locator_file (INSN_LOCATOR (insn));
1590176477.50:                        ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:607:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           rtx body = PATTERN (insn);
1590176477.50:                      ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:715:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       while (NEXT_INSN (insn))
1590176477.50:              ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:716:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         insn = NEXT_INSN (insn);
1590176477.50:                ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:727:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             NEXT_INSN (insn) = bb->il.rtl->header;
1590176477.50:             ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:730:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           PREV_INSN (bb->il.rtl->header) = insn;
1590176477.50:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:732:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           while (NEXT_INSN (insn))
1590176477.50:                  ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:733:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             insn = NEXT_INSN (insn);
1590176477.50:                    ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:736:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         NEXT_INSN (insn) = BB_HEAD (bb);
1590176477.50:         ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:739:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       PREV_INSN (BB_HEAD (bb)) = insn;
1590176477.50:       ^~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:743:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           NEXT_INSN (insn) = bb->il.rtl->footer;
1590176477.50:           ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:744:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           PREV_INSN (bb->il.rtl->footer) = insn;
1590176477.50:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:745:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           while (NEXT_INSN (insn))
1590176477.50:                  ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:746:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             insn = NEXT_INSN (insn);
1590176477.50:                    ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:750:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   NEXT_INSN (insn) = cfg_layout_function_footer;
1590176477.50:   ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:752:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     PREV_INSN (cfg_layout_function_footer) = insn;
1590176477.50:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:754:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   while (NEXT_INSN (insn))
1590176477.50:          ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:755:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     insn = NEXT_INSN (insn);
1590176477.50:            ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:862:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (extract_asm_operands (PATTERN (bb_end_insn)) != NULL)
1590176477.50:                                          ^~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:951:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               end = PREV_INSN (BB_HEAD (e->src));
1590176477.50:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:953:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                      && (!INSN_P (insn) || INSN_LOCATOR (insn) == 0))
1590176477.50:                                            ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:954:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                 insn = PREV_INSN (insn);
1590176477.50:                        ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:956:20: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   && locator_eq (INSN_LOCATOR (insn), (int) e->goto_locus))
1590176477.50:                                  ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:959:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   && INSN_LOCATOR (BB_END (e->src)) == 0)
1590176477.50:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:961:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   INSN_LOCATOR (BB_END (e->src)) = e->goto_locus;
1590176477.50:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:967:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   end = NEXT_INSN (BB_END (e->dest));
1590176477.50:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:969:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                     insn = NEXT_INSN (insn);
1590176477.50:                            ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:970:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   if (insn != end && INSN_LOCATOR (insn)
1590176477.50:                                      ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:971:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                       && locator_eq (INSN_LOCATOR (insn), (int) e->goto_locus))
1590176477.50:                                      ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:978:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               INSN_LOCATOR (BB_END (nb)) = e->goto_locus;
1590176477.50:               ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:997:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        prevx = x, insn_cnt1++, x = NEXT_INSN (x))
1590176477.50:                                    ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:998:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     gcc_assert (PREV_INSN (x) == prevx);
1590176477.50:                 ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176477.50:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176477.50:                ^~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1004:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        nextx = x, insn_cnt2++, x = PREV_INSN (x))
1590176477.50:                                    ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1005:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     gcc_assert (NEXT_INSN (x) == nextx);
1590176477.50:                 ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176477.50:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176477.50:                ^~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1133:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           insn = NEXT_INSN (insn);
1590176477.50:                  ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1151:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (insn = from; insn != NEXT_INSN (to); insn = NEXT_INSN (insn))
1590176477.50:                             ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1151:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (insn = from; insn != NEXT_INSN (to); insn = NEXT_INSN (insn))
1590176477.50:                                                    ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1177:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           switch (NOTE_KIND (insn))
1590176477.50:                   ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1205:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   insn = NEXT_INSN (last);
1590176477.50:          ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1232:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       while (NEXT_INSN (insn))
1590176477.50:              ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1233:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         insn = NEXT_INSN (insn);
1590176477.50:                ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1242:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       while (NEXT_INSN (insn))
1590176477.50:              ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1243:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         insn = NEXT_INSN (insn);
1590176477.50:                ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1271:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))
1590176477.50:                                                 ^        ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfglayout.c:1273:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       bb = BLOCK_FOR_INSN (XEXP (x, 0));
1590176477.50:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176477.50: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176477.50:                              ^             ~
1590176477.50: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176477.50: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176477.50: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: 70 warnings generated.
1590176477.50: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgcleanup.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgcleanup.c
1590176477.50: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176477.50: In file included from cfgcleanup.c:45:
1590176477.50: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (INSN_CODE (insn) < 0)
1590176477.50:       ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176477.50: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: In file included from cfgcleanup.c:45:
1590176477.50: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176477.50:                               ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: In file included from cfgcleanup.c:45:
1590176477.50: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176477.50:     ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176477.50: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: In file included from cfgcleanup.c:45:
1590176477.50: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   return INSN_CODE (insn);
1590176477.50:          ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176477.50: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: In file included from cfgcleanup.c:45:
1590176477.50: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176477.50: #if HAVE_DESIGNATED_INITIALIZERS
1590176477.50:     ^
1590176477.50: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176477.50:    && !defined(__cplusplus))
1590176477.50:        ^
1590176477.50: cfgcleanup.c:219:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       if (rtx_equal_for_cselib_p (SET_DEST (exp), SET_SRC (exp)))
1590176477.50:                                                   ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:305:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       != (XEXP (SET_SRC (set1), 1) == pc_rtx))
1590176477.50:           ^                     ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:305:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       != (XEXP (SET_SRC (set1), 1) == pc_rtx))
1590176477.50:                 ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:308:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   cond1 = XEXP (SET_SRC (set1), 0);
1590176477.50:                 ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:309:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   cond2 = XEXP (SET_SRC (set2), 0);
1590176477.50:                 ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:327:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       || !rtx_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
1590176477.50:                        ^            ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:327:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       || !rtx_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
1590176477.50:                                         ^            ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:332:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (insn = NEXT_INSN (BB_HEAD (b)); insn != NEXT_INSN (BB_END (b));
1590176477.50:               ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:332:48: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (insn = NEXT_INSN (BB_HEAD (b)); insn != NEXT_INSN (BB_END (b));
1590176477.50:                                                ^~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:333:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        insn = NEXT_INSN (insn))
1590176477.50:               ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:334:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     if (INSN_P (insn) && side_effects_p (PATTERN (insn)))
1590176477.50:                                          ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:343:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (insn = NEXT_INSN (BB_HEAD (e->src));
1590176477.50:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:344:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        insn != NEXT_INSN (BB_END (e->src));
1590176477.50:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:345:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        insn = NEXT_INSN (insn))
1590176477.50:               ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:356:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   for (insn = NEXT_INSN (BB_HEAD (b));
1590176477.50:               ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:357:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        insn != NEXT_INSN (BB_END (b)) && !failed;
1590176477.50:                ^~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:358:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:        insn = NEXT_INSN (insn))
1590176477.50:               ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:362:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           rtx pat = PATTERN (insn);
1590176477.50:                     ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:395:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       != (XEXP (SET_SRC (set2), 1) == pc_rtx))
1590176477.50:           ^                     ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:395:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       != (XEXP (SET_SRC (set2), 1) == pc_rtx))
1590176477.50:                 ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:493:17: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                       locus = INSN_LOCATOR (BB_END (target));
1590176477.50:                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176477.50: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176477.50:                            ^           ~
1590176477.50: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176477.50: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:671:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (BB_END (a) != PREV_INSN (BB_HEAD (b)))
1590176477.50:                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:672:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     reorder_insns_nobb (BB_HEAD (a), BB_END (a), PREV_INSN (BB_HEAD (b)));
1590176477.50:                                                  ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:722:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   barrier = NEXT_INSN (BB_END (b));
1590176477.50:             ^~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:878:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (code == MEM && MEM_ATTRS (x) != MEM_ATTRS (y))
1590176477.50:                      ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:878:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (code == MEM && MEM_ATTRS (x) != MEM_ATTRS (y))
1590176477.50:                                       ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:880:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       if (! MEM_ATTRS (x))
1590176477.50:             ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:881:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         MEM_ATTRS (y) = 0;
1590176477.50:         ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:882:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       else if (! MEM_ATTRS (y))
1590176477.50:                  ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:883:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         MEM_ATTRS (x) = 0;
1590176477.50:         ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:888:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
1590176477.50:               ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176477.50: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176477.50:                             ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:888:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
1590176477.50:                                    ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176477.50: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176477.50:                             ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:888:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
1590176477.50:               ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176477.50: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176477.50:                                                        ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:888:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
1590176477.50:                                    ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176477.50: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176477.50:                                                        ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:894:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
1590176477.50:                                   ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176477.50: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176477.50:                        ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:894:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
1590176477.50:                                                 ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176477.50: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176477.50:                        ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:894:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
1590176477.50:                                   ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176477.50: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176477.50:                                                   ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:894:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
1590176477.50:                                                 ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176477.50: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176477.50:                                                   ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:901:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (MEM_OFFSET (x) != MEM_OFFSET (y))
1590176477.50:                    ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176477.50: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176477.50:                          ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:901:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (MEM_OFFSET (x) != MEM_OFFSET (y))
1590176477.50:                                      ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176477.50: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176477.50:                          ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:901:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (MEM_OFFSET (x) != MEM_OFFSET (y))
1590176477.50:                    ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176477.50: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176477.50:                                                     ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:901:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (MEM_OFFSET (x) != MEM_OFFSET (y))
1590176477.50:                                      ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176477.50: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176477.50:                                                     ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:907:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (!MEM_SIZE (x))
1590176477.50:                ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:907:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           if (!MEM_SIZE (x))
1590176477.50:                ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:909:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (!MEM_SIZE (y))
1590176477.50:                     ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:909:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           else if (!MEM_SIZE (y))
1590176477.50:                     ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:20: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                    ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                                      INTVAL (MEM_SIZE (y))));
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:26: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                          ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:20: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                    ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                                      INTVAL (MEM_SIZE (y))));
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:26: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                          ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:32: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                                ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                                      INTVAL (MEM_SIZE (y))));
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:38: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                                      ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:32: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                                ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                                      INTVAL (MEM_SIZE (y))));
1590176477.50:                                              ^~~~~~~~~~~~
1590176477.50: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176477.50: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176477.50: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176477.50:                                       ^~~
1590176477.50: ./system.h:339:38: note: expanded from macro 'MAX'
1590176477.50: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176477.50:                                      ^
1590176477.50: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176477.50: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176477.50:                                                   ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                  ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:20: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                    ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                                 ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:26: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                          ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                  ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:20: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                    ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                                 ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:26: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                          ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                  ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:32: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                                ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                                 ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:38: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                                      ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                  ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:32: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                                ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
1590176477.50:                                                 ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./system.h:338:38: note: expanded from macro 'MIN'
1590176477.50: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176477.50:                                      ^
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:918:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (y, MEM_ALIGN (x));
1590176477.50:                             ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:  ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:918:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           set_mem_align (y, MEM_ALIGN (x));
1590176477.50:                             ^~~~~~~~~~~~~
1590176477.50: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176477.50: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176477.50:                         ^~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176477.50: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176477.50:                        ^               ~
1590176477.50: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176477.50: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176477.50:                             ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:958:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (NOTE_INSN_BASIC_BLOCK_P (i1) && NOTE_INSN_BASIC_BLOCK_P (i2))
1590176477.50:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176477.50:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176477.50:       ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:958:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (NOTE_INSN_BASIC_BLOCK_P (i1) && NOTE_INSN_BASIC_BLOCK_P (i2))
1590176477.50:                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176477.50:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176477.50:       ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:961:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   p1 = PATTERN (i1);
1590176477.50:        ^~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:962:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   p2 = PATTERN (i2);
1590176477.50:        ^~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:978:25: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       && (!rtx_equal_p (CALL_INSN_FUNCTION_USAGE (i1),
1590176477.50:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176477.50: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176477.50:                                         ^          ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:979:4: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                         CALL_INSN_FUNCTION_USAGE (i2))
1590176477.50:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176477.50: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176477.50:                                         ^          ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1000:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       for (note = REG_NOTES (i1); note; note = XEXP (note, 1))
1590176477.50:                   ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176477.50: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176477.50:                         ^          ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1000:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       for (note = REG_NOTES (i1); note; note = XEXP (note, 1))
1590176477.50:                                                ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1004:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       for (note = REG_NOTES (i2); note; note = XEXP (note, 1))
1590176477.50:                   ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176477.50: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176477.50:                         ^          ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1004:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       for (note = REG_NOTES (i2); note; note = XEXP (note, 1))
1590176477.50:                                                ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1040:49: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       || (returnjump_p (i1) && !side_effects_p (PATTERN (i1))))
1590176477.50:                                                 ^~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1043:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       i1 = PREV_INSN (i1);
1590176477.50:            ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1048:49: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       || (returnjump_p (i2) && !side_effects_p (PATTERN (i2))))
1590176477.50:                                                 ^~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1054:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       i2 = PREV_INSN (i2);
1590176477.50:            ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1061:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         i1 = PREV_INSN (i1);
1590176477.50:              ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1064:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         i2 = PREV_INSN (i2);
1590176477.50:              ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1098:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       i1 = PREV_INSN (i1);
1590176477.50:            ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1099:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       i2 = PREV_INSN (i2);
1590176477.50:            ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1115:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         last1 = PREV_INSN (last1);
1590176477.50:                 ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1118:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         last1 = PREV_INSN (last1);
1590176477.50:                 ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1121:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         last2 = PREV_INSN (last2);
1590176477.50:                 ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1124:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:         last2 = PREV_INSN (last2);
1590176477.50:                 ^~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1204:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       if ((XEXP (SET_SRC (set1), 1) == pc_rtx)
1590176477.50:            ^                     ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1204:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       if ((XEXP (SET_SRC (set1), 1) == pc_rtx)
1590176477.50:                  ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1205:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           != (XEXP (SET_SRC (set2), 1) == pc_rtx))
1590176477.50:               ^                     ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1205:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           != (XEXP (SET_SRC (set2), 1) == pc_rtx))
1590176477.50:                     ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1208:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       cond1 = XEXP (SET_SRC (set1), 0);
1590176477.50:                     ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1209:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       cond2 = XEXP (SET_SRC (set2), 0);
1590176477.50:                     ^~~~~~~~~~~~~~
1590176477.50: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176477.50: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176477.50:                      ^          ~
1590176477.50: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176477.50: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                                      ^~~
1590176477.50: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                       ^~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1222:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                 && rtx_renumbered_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
1590176477.50:                                            ^            ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1222:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                 && rtx_renumbered_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
1590176477.50:                                                             ^            ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1224:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                    && rtx_renumbered_equal_p (XEXP (cond1, 1),
1590176477.50:                                               ^            ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1227:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                                               XEXP (cond2, 1))));
1590176477.50:                                               ^            ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1292:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               p1 = PATTERN (table1);
1590176477.50:                    ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1293:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               p2 = PATTERN (table2);
1590176477.50:                    ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176477.50: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1299:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                        && (XVECLEN (p1, 1) == XVECLEN (p2, 1))
1590176477.50:                            ^            ~
1590176477.50: ./rtl.h:713:40: note: expanded from macro 'XVECLEN'
1590176477.50: #define XVECLEN(RTX, N)         GET_NUM_ELEM (XVEC (RTX, N))
1590176477.50:                                               ^          ~
1590176477.50: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176477.50: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176477.50: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176477.50:                                           ^~~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1299:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                        && (XVECLEN (p1, 1) == XVECLEN (p2, 1))
1590176477.50:                                               ^            ~
1590176477.50: ./rtl.h:713:40: note: expanded from macro 'XVECLEN'
1590176477.50: #define XVECLEN(RTX, N)         GET_NUM_ELEM (XVEC (RTX, N))
1590176477.50:                                               ^          ~
1590176477.50: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176477.50: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176477.50: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176477.50:                                           ^~~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1300:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                        && rtx_equal_p (XEXP (p1, 2), XEXP (p2, 2))
1590176477.50:                                        ^         ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1300:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                        && rtx_equal_p (XEXP (p1, 2), XEXP (p2, 2))
1590176477.50:                                                      ^         ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1301:26: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                        && rtx_equal_p (XEXP (p1, 3), XEXP (p2, 3)))
1590176477.50:                                        ^         ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1301:40: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                        && rtx_equal_p (XEXP (p1, 3), XEXP (p2, 3)))
1590176477.50:                                                      ^         ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1306:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   for (i = XVECLEN (p1, 1) - 1; i >= 0 && identical; i--)
1590176477.50:                            ^            ~
1590176477.50: ./rtl.h:713:40: note: expanded from macro 'XVECLEN'
1590176477.50: #define XVECLEN(RTX, N)         GET_NUM_ELEM (XVEC (RTX, N))
1590176477.50:                                               ^          ~
1590176477.50: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176477.50: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176477.50: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176477.50:                                           ^~~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1307:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                     if (!rtx_equal_p (XVECEXP (p1, 1, i), XVECEXP (p2, 1, i)))
1590176477.50:                                       ^            ~
1590176477.50: ./rtl.h:712:39: note: expanded from macro 'XVECEXP'
1590176477.50: #define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
1590176477.50:                                            ^          ~
1590176477.50: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176477.50: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176477.50: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176477.50:                                       ^~~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1307:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                     if (!rtx_equal_p (XVECEXP (p1, 1, i), XVECEXP (p2, 1, i)))
1590176477.50:                                                           ^            ~
1590176477.50: ./rtl.h:712:39: note: expanded from macro 'XVECEXP'
1590176477.50: #define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
1590176477.50:                                            ^          ~
1590176477.50: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176477.50: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176477.50: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176477.50:                                       ^~~~~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1536:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176477.50:                                                  ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1559:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             newpos2 = NEXT_INSN (newpos2);
1590176477.50:                       ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1561:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             newpos2 = NEXT_INSN (newpos2);
1590176477.50:                       ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1563:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             newpos2 = NEXT_INSN (newpos2);
1590176477.50:                       ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1565:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:             newpos2 = NEXT_INSN (newpos2);
1590176477.50:                       ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1571:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       redirect_to = split_block (src2, PREV_INSN (newpos2))->dest;
1590176477.50:                                        ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1649:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     newpos1 = NEXT_INSN (newpos1);
1590176477.50:               ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1652:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     newpos1 = NEXT_INSN (newpos1);
1590176477.50:               ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1654:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   if (NOTE_INSN_BASIC_BLOCK_P (newpos1))
1590176477.50:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176477.50:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176477.50:       ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1655:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     newpos1 = NEXT_INSN (newpos1);
1590176477.50:               ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1658:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:     newpos1 = NEXT_INSN (newpos1);
1590176477.50:               ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1660:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:   redirect_from = split_block (src1, PREV_INSN (newpos1))->src;
1590176477.50:                                      ^~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1831:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       insn = PREV_INSN (insn);
1590176477.50:              ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176477.50: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1919:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                   if (NOTE_KIND (BB_HEAD (b)) == NOTE_INSN_DELETED_LABEL)
1590176477.50:                       ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:1921:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:                       rtx bb_note = NEXT_INSN (BB_HEAD (b));
1590176477.50:                                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:2141:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:       for (insn = NEXT_INSN (BB_END (bb));
1590176477.50:                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:2142:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:            insn && !NOTE_INSN_BASIC_BLOCK_P (insn);
1590176477.50:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176477.50:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176477.50:       ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176477.50: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176477.50:                         ^            ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:2145:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:           next = NEXT_INSN (insn);
1590176477.50:                  ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:2147:11: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               && LABEL_NUSES (insn) == LABEL_PRESERVE_P (insn)
1590176477.50:                  ^~~~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176477.50: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176477.50:                          ^           ~
1590176477.50: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176477.50: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176477.50:                                ^                 ~
1590176477.50: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176477.50: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: cfgcleanup.c:2156:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176477.50:               next = NEXT_INSN (next);
1590176477.50:                      ^~~~~~~~~~~~~~~~
1590176477.50: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176477.50: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176477.50:                         ^           ~
1590176477.50: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176477.50: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176477.50:                          ^                ~
1590176477.50: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176477.50: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176477.50:                                      ^            ~
1590176477.50: ./rtl.h:316:5: note: array 'fld' declared here
1590176477.50:     rtunion fld[1];
1590176477.50:     ^
1590176477.50: 132 warnings generated.
1590176477.94: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cgraphbuild.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cgraphbuild.c
1590176477.94: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.14: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-parser.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-parser.c
1590176478.14: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.14: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-common.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-common.c
1590176478.14: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.14: c-common.c:8341:32: warning: shift count >= width of type [-Wshift-count-overflow]
1590176478.14:     return ((HOST_WIDE_INT)uc) << (HOST_BITS_PER_WIDE_INT - CHAR_TYPE_SIZE)
1590176478.14:                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.14: c-common.c:8342:11: warning: shift count >= width of type [-Wshift-count-overflow]
1590176478.14:                                >> (HOST_BITS_PER_WIDE_INT - CHAR_TYPE_SIZE);
1590176478.14:                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.14: 2 warnings generated.
1590176478.14: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgloopmanip.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgloopmanip.c
1590176478.14: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.24: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgloop.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgloop.c
1590176478.24: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.24: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o concat.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  concat.c
1590176478.24: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.54: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgexpand.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgexpand.c
1590176478.54: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.54: cfgexpand.c:1495:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:       print_rtl (dump_file, since ? NEXT_INSN (since) : since);
1590176478.54:                                     ^~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1573:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:       insn = PREV_INSN (get_last_insn ());
1590176478.54:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1577:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:       for (insn = PREV_INSN (insn); insn != last;)
1590176478.54:                   ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1579:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:           insn = PREV_INSN (insn);
1590176478.54:                  ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1581:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:             delete_insn (NEXT_INSN (insn));
1590176478.54:                          ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1712:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:     BB_END (bb) = PREV_INSN (BB_END (bb));
1590176478.54:                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1715:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   new_bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);
1590176478.54:                                ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:1725:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:     BB_END (new_bb) = PREV_INSN (BB_END (new_bb));
1590176478.54:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2030:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   for (last = NEXT_INSN (last); last; last = NEXT_INSN (last))
1590176478.54:               ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2030:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   for (last = NEXT_INSN (last); last; last = NEXT_INSN (last))
1590176478.54:                                              ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2078:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   last = NEXT_INSN (last);
1590176478.54:          ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2082:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   while (NEXT_INSN (last))
1590176478.54:          ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2091:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:       delete_insn (NEXT_INSN (last));
1590176478.54:                    ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2100:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   if (NEXT_INSN (last))
1590176478.54:       ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2102:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:       bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);
1590176478.54:                                ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2106:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:         BB_END (bb) = PREV_INSN (last);
1590176478.54:                       ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2355:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:               || SYMBOL_REF_DECL (XEXP (op0, 0)) != exp)
1590176478.54:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176478.54:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176478.54:                                           ^              ~
1590176478.54: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176478.54: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176478.54:                             ^                ~
1590176478.54: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.54: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:2851:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:                                             XEXP (op0, 1)));
1590176478.54:                                             ^          ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./genrtl.h:332:32: note: expanded from macro 'gen_rtx_NEG'
1590176478.54:   gen_rtx_fmt_e (NEG, (MODE), (ARG0))
1590176478.54:                                ^~~~
1590176478.54: ./genrtl.h:30:35: note: expanded from macro 'gen_rtx_fmt_e'
1590176478.54:         gen_rtx_fmt_e_stat (c, m, p0 MEM_STAT_INFO)
1590176478.54:                                   ^~
1590176478.54: ./genrtl.h:312:44: note: expanded from macro 'gen_rtx_CONCAT'
1590176478.54:   gen_rtx_fmt_ee (CONCAT, (MODE), (ARG0), (ARG1))
1590176478.54:                                            ^~~~
1590176478.54: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176478.54:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176478.54:                                        ^~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3067:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176478.54:                                          ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3096:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:         INSN_VAR_LOCATION_LOC (insn) = val;
1590176478.54:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176478.54:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176478.54:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176478.54: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176478.54:                                    ^             ~
1590176478.54: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.54: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.54:                                ^                 ~
1590176478.54: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3096:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:         INSN_VAR_LOCATION_LOC (insn) = val;
1590176478.54:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176478.54:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176478.54:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176478.54: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176478.54:                                 ^~~~~~~~~~~~~~
1590176478.54: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.54: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.54:                         ^           ~
1590176478.54: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.54: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176478.54: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176478.54:                                            ^~~
1590176478.54: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176478.54: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.54:                                             ^~~
1590176478.54: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                       ^~~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3173:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:       BB_HEAD (bb) = NEXT_INSN (last);
1590176478.54:                      ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3175:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:         BB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));
1590176478.54:                        ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3183:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   NOTE_BASIC_BLOCK (note) = bb;
1590176478.54:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176478.54: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176478.54:                                 ^              ~
1590176478.54: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176478.54: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176478.54:                                ^                 ~
1590176478.54: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3336:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:                   INSN_VAR_LOCATION_LOC (val) = const0_rtx;
1590176478.54:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176478.54:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176478.54:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176478.54: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176478.54:                                    ^             ~
1590176478.54: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.54: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.54:                                ^                 ~
1590176478.54: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3336:5: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:                   INSN_VAR_LOCATION_LOC (val) = const0_rtx;
1590176478.54:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176478.54:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176478.54:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176478.54: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176478.54:                                 ^~~~~~~~~~~~~~
1590176478.54: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.54: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.54:                         ^           ~
1590176478.54: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.54: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176478.54: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176478.54:                                            ^~~
1590176478.54: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176478.54: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.54:                                             ^~~
1590176478.54: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                       ^~~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3338:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:                   INSN_VAR_LOCATION_LOC (val) = (rtx)value;
1590176478.54:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176478.54:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176478.54:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176478.54: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176478.54:                                    ^             ~
1590176478.54: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.54: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.54:                                ^                 ~
1590176478.54: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3338:5: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:                   INSN_VAR_LOCATION_LOC (val) = (rtx)value;
1590176478.54:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176478.54:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176478.54:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176478.54: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176478.54:                                 ^~~~~~~~~~~~~~
1590176478.54: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.54: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.54:                         ^           ~
1590176478.54: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.54: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176478.54: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176478.54:                                            ^~~
1590176478.54: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176478.54: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.54:                                             ^~~
1590176478.54: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176478.54: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.54:                                       ^~~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3431:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:     last = PREV_INSN (last);
1590176478.54:            ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3433:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:     last = PREV_INSN (PREV_INSN (last));
1590176478.54:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3433:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:     last = PREV_INSN (PREV_INSN (last));
1590176478.54:                       ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176478.54: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.54:                               ^~~~
1590176478.54: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                                      ^~~
1590176478.54: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                       ^~~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3472:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   init_block = create_basic_block (NEXT_INSN (get_insns ()),
1590176478.54:                                    ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3538:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   while (NEXT_INSN (head) && NOTE_P (NEXT_INSN (head)))
1590176478.54:          ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3539:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:     head = NEXT_INSN (head);
1590176478.54:            ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: cfgexpand.c:3540:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.54:   exit_block = create_basic_block (NEXT_INSN (head), end,
1590176478.54:                                    ^~~~~~~~~~~~~~~~
1590176478.54: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.54: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.54:                         ^           ~
1590176478.54: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.54: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.54:                          ^                ~
1590176478.54: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.54: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.54:                                      ^            ~
1590176478.54: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.54:     rtunion fld[1];
1590176478.54:     ^
1590176478.54: 35 warnings generated.
1590176478.64: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cgraph.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cgraph.c
1590176478.64: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.64: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o combine-stack-adj.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  combine-stack-adj.c
1590176478.64: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.64: In file included from combine-stack-adj.c:50:
1590176478.64: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:   if (INSN_CODE (insn) < 0)
1590176478.64:       ^~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176478.64: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.64: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: In file included from combine-stack-adj.c:50:
1590176478.64: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176478.64:                               ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.64: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: In file included from combine-stack-adj.c:50:
1590176478.64: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176478.64:     ^~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176478.64: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.64: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: In file included from combine-stack-adj.c:50:
1590176478.64: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:   return INSN_CODE (insn);
1590176478.64:          ^~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176478.64: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.64: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: In file included from combine-stack-adj.c:50:
1590176478.64: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176478.64: #if HAVE_DESIGNATED_INITIALIZERS
1590176478.64:     ^
1590176478.64: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176478.64:    && !defined(__cplusplus))
1590176478.64:        ^
1590176478.64: combine-stack-adj.c:133:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:   rtx tmp = single_set (insn);
1590176478.64:             ^~~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176478.64:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.64:                                           ^~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176478.64: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176478.64:                                          ^~~~~~~~~~~
1590176478.64: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.64: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:133:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:   rtx tmp = single_set (insn);
1590176478.64:             ^~~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176478.64:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.64:                             ^~~~~~~~~~~
1590176478.64: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.64: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:141:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:   tmp = PATTERN (insn);
1590176478.64:         ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.64: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:151:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           && SET_SRC (this_rtx) == SET_DEST (this_rtx))
1590176478.64:              ^~~~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:188:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:     ml->sp_offset = INTVAL (XEXP (XEXP (*ref, 0), 1));
1590176478.64:                             ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:325:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           && XEXP (SET_SRC (last), 0) == stack_pointer_rtx
1590176478.64:                    ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                                      ^~~
1590176478.64: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:329:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:             = GEN_INT (INTVAL (XEXP (SET_SRC (last), 1)) + this_adjust);
1590176478.64:                                ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176478.64: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176478.64:                                                   ^
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:329:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:             = GEN_INT (INTVAL (XEXP (SET_SRC (last), 1)) + this_adjust);
1590176478.64:                                      ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176478.64: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176478.64:                                                   ^
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:328:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           XEXP (SET_SRC (last), 1)
1590176478.64:           ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:328:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           XEXP (SET_SRC (last), 1)
1590176478.64:                 ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                                      ^~~
1590176478.64: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:348:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:             = GEN_INT (INTVAL (XEXP (SET_SRC (expr), 1)) - this_adjust);
1590176478.64:                                ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176478.64: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176478.64:                                                   ^
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:348:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:             = GEN_INT (INTVAL (XEXP (SET_SRC (expr), 1)) - this_adjust);
1590176478.64:                                      ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176478.64: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176478.64:                                                   ^
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:347:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           XEXP (SET_SRC (expr), 1)
1590176478.64:           ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:347:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           XEXP (SET_SRC (expr), 1)
1590176478.64:                 ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                                      ^~~
1590176478.64: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:379:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:       next = NEXT_INSN (insn);
1590176478.64:              ^~~~~~~~~~~~~~~~
1590176478.64: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.64: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:388:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           rtx src = SET_SRC (set);
1590176478.64:                     ^~~~~~~~~~~~~
1590176478.64: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.64: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.64:                      ^          ~
1590176478.64: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.64: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.64:                                ^                 ~
1590176478.64: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.64: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:396:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:               HOST_WIDE_INT this_adjust = INTVAL (XEXP (src, 1));
1590176478.64:                                                   ^          ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:492:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:                       && XEXP (XEXP (XEXP (dest, 0), 1), 0)
1590176478.64:                                ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                                      ^~~
1590176478.64: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:496:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:                       && INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1))
1590176478.64:                                  ^                               ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:496:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:                       && INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1))
1590176478.64:                                        ^                     ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                                      ^~~
1590176478.64: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176478.64: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176478.64:                            ^~~
1590176478.64: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176478.64: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176478.64:                                       ^~~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:516:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:           && !for_each_rtx (&PATTERN (insn), record_stack_refs, &data))
1590176478.64:                              ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.64: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: combine-stack-adj.c:527:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.64:               || reg_mentioned_p (stack_pointer_rtx, PATTERN (insn))))
1590176478.64:                                                      ^~~~~~~~~~~~~~
1590176478.64: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.64: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.64:                         ^           ~
1590176478.64: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.64: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.64:                          ^                ~
1590176478.64: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.64: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.64:                                      ^            ~
1590176478.64: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.64:     rtunion fld[1];
1590176478.64:     ^
1590176478.64: 27 warnings generated.
1590176478.65: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o convert.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  convert.c
1590176478.65: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.75: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cp-demint.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cp-demint.c
1590176478.75: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.75: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgrtl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgrtl.c
1590176478.75: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.75: cfgrtl.c:89:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   switch (NOTE_KIND (note))
1590176478.75:           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:108:7: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           && LABEL_NAME (label) == 0
1590176478.75:              ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
1590176478.75: #define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176478.75: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:117:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   rtx next = NEXT_INSN (insn);
1590176478.75:              ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:128:23: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           const char *name = LABEL_NAME (insn);
1590176478.75:                              ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
1590176478.75: #define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176478.75: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:132:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           NOTE_KIND (insn) = NOTE_INSN_DELETED_LABEL;
1590176478.75:           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:133:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           NOTE_DELETED_LABEL_NAME (insn) = name;
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:876:39: note: expanded from macro 'NOTE_DELETED_LABEL_NAME'
1590176478.75: #define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 4, NOTE)
1590176478.75:                                       ^            ~
1590176478.75: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176478.75: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:151:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (JUMP_LABEL (insn)
1590176478.75:           ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:153:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         LABEL_NUSES (JUMP_LABEL (insn))--;
1590176478.75:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:153:15: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         LABEL_NUSES (JUMP_LABEL (insn))--;
1590176478.75:                      ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:977:33: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                                 ^~~
1590176478.75: ./rtl.h:736:45: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                             ^~~
1590176478.75: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:160:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           LABEL_NUSES (XEXP (note, 0))--;
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:169:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       LABEL_NUSES (XEXP (note, 0))--;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:175:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       rtx pat = PATTERN (insn);
1590176478.75:                 ^~~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:188:6: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             LABEL_NUSES (label)--;
1590176478.75:             ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:204:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       && BLOCK_FOR_INSN (insn)
1590176478.75:          ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:205:18: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       && BB_END (BLOCK_FOR_INSN (insn)) == insn)
1590176478.75:                  ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./basic-block.h:492:26: note: expanded from macro 'BB_END'
1590176478.75: #define BB_END(B)       (B)->il.rtl->end_
1590176478.75:                          ^
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:209:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     purge_dead_edges (BLOCK_FOR_INSN (insn));
1590176478.75:                       ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:227:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       next = NEXT_INSN (start);
1590176478.75:              ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:234:2: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         set_block_for_insn (start, NULL);
1590176478.75:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176478.75: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176478.75:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:256:16: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       && (bb = NOTE_BASIC_BLOCK (bb_note)) != NULL
1590176478.75:                ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176478.75: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176478.75:                                 ^              ~
1590176478.75: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176478.75: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:267:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           after = PREV_INSN (head);
1590176478.75:                   ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:271:31: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (after != bb_note && NEXT_INSN (after) != bb_note)
1590176478.75:                               ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:298:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       NOTE_BASIC_BLOCK (bb_note) = bb;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176478.75: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176478.75:                                 ^              ~
1590176478.75: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176478.75: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:302:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   if (NEXT_INSN (end) == bb_note)
1590176478.75:       ^~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:397:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (insn = BB_HEAD (bb); ; insn = NEXT_INSN (insn))
1590176478.75:                                          ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:399:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           BLOCK_FOR_INSN (insn) = bb;
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:412:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176478.75:                                          ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:414:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       BLOCK_FOR_INSN (insn) = NULL;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:482:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   end = NEXT_INSN (end);
1590176478.75:         ^~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:483:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (insn = begin; insn != end; insn = NEXT_INSN (insn))
1590176478.75:                                          ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:512:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     insn = NEXT_INSN (insn);
1590176478.75:            ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:513:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176478.75:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176478.75:                ^~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:515:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   return NEXT_INSN (insn);
1590176478.75:          ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:537:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           insn = PREV_INSN (insn);
1590176478.75:                  ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:548:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 next = NEXT_INSN (next);
1590176478.75:                        ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:565:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   new_bb = create_basic_block (NEXT_INSN (insn), BB_END (bb), bb);
1590176478.75:                                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:595:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     b_end = PREV_INSN (b_debug_start = b_end);
1590176478.75:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:606:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       b_head = NEXT_INSN (b_head);
1590176478.75:                ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:611:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   if (NOTE_INSN_BASIC_BLOCK_P (b_head))
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:619:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       b_head = NEXT_INSN (b_head);
1590176478.75:                ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:627:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (prev = PREV_INSN (a_end); ; prev = PREV_INSN (prev))
1590176478.75:                   ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:627:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (prev = PREV_INSN (a_end); ; prev = PREV_INSN (prev))
1590176478.75:                                               ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:629:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             || NOTE_INSN_BASIC_BLOCK_P (prev)
1590176478.75:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:649:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       a_end = PREV_INSN (del_first);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:652:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     del_first = NEXT_INSN (a_end);
1590176478.75:                 ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:672:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (NEXT_INSN (a_end) != b_debug_start)
1590176478.75:           ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:673:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         reorder_insns_nobb (NEXT_INSN (a_end), PREV_INSN (b_debug_start),
1590176478.75:                             ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:673:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         reorder_insns_nobb (NEXT_INSN (a_end), PREV_INSN (b_debug_start),
1590176478.75:                                                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:778:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   set = single_set (insn);
1590176478.75:         ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176478.75:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.75:                                           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176478.75: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176478.75:                                          ^~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:778:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   set = single_set (insn);
1590176478.75:         ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176478.75:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.75:                             ^~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:810:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                   if (PREV_INSN (insn))
1590176478.75:                       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:811:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
1590176478.75:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:811:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
1590176478.75:                                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:811:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
1590176478.75:                                                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:813:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     src->il.rtl->footer = NEXT_INSN (insn);
1590176478.75:                                           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:814:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                   if (NEXT_INSN (insn))
1590176478.75:                       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:815:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
1590176478.75:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:815:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
1590176478.75:                                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:815:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                     PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
1590176478.75:                                                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:819:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               insn = NEXT_INSN (insn);
1590176478.75:                      ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:823:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         delete_insn_chain (kill_from, PREV_INSN (BB_HEAD (target)),
1590176478.75:                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:853:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       JUMP_LABEL (BB_END (src)) = target_label;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:854:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       LABEL_NUSES (target_label)++;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:873:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           if (barrier != NEXT_INSN (BB_END (src)))
1590176478.75:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:880:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               update_bb_for_insn_chain (NEXT_INSN (BB_END (src)),
1590176478.75:                                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:881:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                                         PREV_INSN (barrier), src);
1590176478.75:                                         ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:883:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:883:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);
1590176478.75:                          ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:883:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);
1590176478.75:                                                  ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:884:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:884:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);
1590176478.75:                          ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:884:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);
1590176478.75:                                                  ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:886:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               NEXT_INSN (new_insn) = barrier;
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:887:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               NEXT_INSN (PREV_INSN (barrier)) = new_insn;
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:887:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               NEXT_INSN (PREV_INSN (barrier)) = new_insn;
1590176478.75:                          ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:889:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               PREV_INSN (new_insn) = PREV_INSN (barrier);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:889:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               PREV_INSN (new_insn) = PREV_INSN (barrier);
1590176478.75:                                      ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:890:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               PREV_INSN (barrier) = new_insn;
1590176478.75:               ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:934:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         vec = XVEC (PATTERN (tmp), 0);
1590176478.75:                     ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176478.75: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:936:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         vec = XVEC (PATTERN (tmp), 1);
1590176478.75:               ^                    ~
1590176478.75: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176478.75: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:936:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         vec = XVEC (PATTERN (tmp), 1);
1590176478.75:                     ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176478.75: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:942:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             --LABEL_NUSES (old_label);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:943:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             ++LABEL_NUSES (new_label);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:947:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if ((tmp = single_set (insn)) != NULL
1590176478.75:                  ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176478.75:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.75:                                           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176478.75: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176478.75:                                          ^~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:947:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if ((tmp = single_set (insn)) != NULL
1590176478.75:                  ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176478.75:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.75:                             ^~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:951:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           && XEXP (XEXP (SET_SRC (tmp), 2), 0) == old_label)
1590176478.75:                    ^                    ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:951:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           && XEXP (XEXP (SET_SRC (tmp), 2), 0) == old_label)
1590176478.75:                          ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.75: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.75:                      ^          ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:953:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,
1590176478.75:           ^                    ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:953:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,
1590176478.75:                 ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176478.75: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176478.75:                      ^          ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:955:6: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           --LABEL_NUSES (old_label);
1590176478.75:             ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:956:6: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           ++LABEL_NUSES (new_label);
1590176478.75:             ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:959:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   else if ((tmp = extract_asm_operands (PATTERN (insn))) != NULL)
1590176478.75:                                         ^~~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:961:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       int i, n = ASM_OPERANDS_LABEL_LENGTH (tmp);
1590176478.75:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1196:40: note: expanded from macro 'ASM_OPERANDS_LABEL_LENGTH'
1590176478.75: #define ASM_OPERANDS_LABEL_LENGTH(RTX) XCVECLEN (RTX, 5, ASM_OPERANDS)
1590176478.75:                                        ^              ~
1590176478.75: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176478.75: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176478.75:                                               ^           ~
1590176478.75: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176478.75: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176478.75: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176478.75:                                           ^~~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:970:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           rtx old_ref = ASM_OPERANDS_LABEL (tmp, i);
1590176478.75:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1197:36: note: expanded from macro 'ASM_OPERANDS_LABEL'
1590176478.75: #define ASM_OPERANDS_LABEL(RTX, N) XCVECEXP (RTX, 5, N, ASM_OPERANDS)
1590176478.75:                                    ^              ~
1590176478.75: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176478.75: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176478.75:                                            ^           ~
1590176478.75: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176478.75: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176478.75: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176478.75:                                       ^~~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:974:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               ASM_OPERANDS_LABEL (tmp, i)
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1197:36: note: expanded from macro 'ASM_OPERANDS_LABEL'
1590176478.75: #define ASM_OPERANDS_LABEL(RTX, N) XCVECEXP (RTX, 5, N, ASM_OPERANDS)
1590176478.75:                                    ^              ~
1590176478.75: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176478.75: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176478.75:                                            ^           ~
1590176478.75: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176478.75: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176478.75: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176478.75:                                       ^~~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:976:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               --LABEL_NUSES (old_label);
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:977:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               ++LABEL_NUSES (new_label);
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:981:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (JUMP_LABEL (insn) == old_label)
1590176478.75:           ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:983:4: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           JUMP_LABEL (insn) = new_label;
1590176478.75:           ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:993:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           if (JUMP_LABEL (insn) != new_label
1590176478.75:               ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1008:42: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (!currently_expanding_to_rtl || JUMP_LABEL (insn) == old_label)
1590176478.75:                                          ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1011:16: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           gcc_assert (JUMP_LABEL (insn) == old_label);
1590176478.75:                       ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176478.75:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176478.75:                ^~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1051:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     for (insn = BB_HEAD (src); insn != NEXT_INSN (BB_END (src));
1590176478.75:                                        ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1052:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:          insn = NEXT_INSN (insn))
1590176478.75:                 ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1120:10: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       && JUMP_LABEL (BB_END (e->src)) == BB_HEAD (e->dest))
1590176478.75:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1201:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       note = NEXT_INSN (note);
1590176478.75:              ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1249:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       JUMP_LABEL (BB_END (jump_block)) = label;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1250:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       LABEL_NUSES (label)++;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1309:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (q = NEXT_INSN (BB_END (b)); q != BB_HEAD (c); q = NEXT_INSN (q))
1590176478.75:            ^~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1309:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (q = NEXT_INSN (BB_END (b)); q != BB_HEAD (c); q = NEXT_INSN (q))
1590176478.75:                                                          ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1329:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       q = PREV_INSN (q);
1590176478.75:           ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1333:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   if (q != PREV_INSN (BB_HEAD (c)))
1590176478.75:            ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1334:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     delete_insn_chain (NEXT_INSN (q), PREV_INSN (BB_HEAD (c)), false);
1590176478.75:                        ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1334:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     delete_insn_chain (NEXT_INSN (q), PREV_INSN (BB_HEAD (c)), false);
1590176478.75:                                       ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1389:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       before = NEXT_INSN (BB_END (edge_in->src));
1590176478.75:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1461:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             tmp = NEXT_INSN (tmp);
1590176478.75:                   ^~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1462:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           if (NOTE_INSN_BASIC_BLOCK_P (tmp))
1590176478.75:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1463:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             tmp = NEXT_INSN (tmp);
1590176478.75:                   ^~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1467:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             after = PREV_INSN (tmp);
1590176478.75:                     ^~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1622:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb)); insn != last;
1590176478.75:                                    ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1623:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:        insn = NEXT_INSN (insn))
1590176478.75:               ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1662:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           for (x = BB_HEAD (bb); x != NULL_RTX; x = NEXT_INSN (x))
1590176478.75:                                                     ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1675:60: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (tmp_rtx = rtx_first; NULL != tmp_rtx; tmp_rtx = NEXT_INSN (tmp_rtx))
1590176478.75:                                                            ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1746:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:            tmp_rtx = XEXP (tmp_rtx, 1))
1590176478.75:                      ^              ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1821:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       FOR_BB_INSNS (bb, insn)
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176478.75:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176478.75:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1821:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       FOR_BB_INSNS (bb, insn)
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176478.75:        (INSN) = NEXT_INSN (INSN))
1590176478.75:                 ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1822:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         if (BLOCK_FOR_INSN (insn) != bb)
1590176478.75:             ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1826:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                    BLOCK_FOR_INSN (insn) ? BLOCK_FOR_INSN (insn)->index : 0,
1590176478.75:                                            ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1831:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (insn = bb->il.rtl->header; insn; insn = NEXT_INSN (insn))
1590176478.75:                                                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1833:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             && BLOCK_FOR_INSN (insn) != NULL)
1590176478.75:                ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1839:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (insn = bb->il.rtl->footer; insn; insn = NEXT_INSN (insn))
1590176478.75:                                                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1841:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             && BLOCK_FOR_INSN (insn) != NULL)
1590176478.75:                ^~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1932:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           && JUMP_LABEL (BB_END (bb)) != BB_HEAD (fallthru->dest))
1590176478.75:              ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1953:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (x = BB_HEAD (bb); x != NEXT_INSN (BB_END (bb)); x = NEXT_INSN (x))
1590176478.75:                                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1953:64: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (x = BB_HEAD (bb); x != NEXT_INSN (BB_END (bb)); x = NEXT_INSN (x))
1590176478.75:                                                                ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1956:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         if (!BARRIER_P (x) && BLOCK_FOR_INSN (x) != bb)
1590176478.75:                               ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1959:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             if (! BLOCK_FOR_INSN (x))
1590176478.75:                   ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1966:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                  INSN_UID (x), bb->index, BLOCK_FOR_INSN (x)->index);
1590176478.75:                                           ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1984:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           x = NEXT_INSN (x);
1590176478.75:               ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1987:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (!NOTE_INSN_BASIC_BLOCK_P (x) || NOTE_BASIC_BLOCK (x) != bb)
1590176478.75:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1987:43: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (!NOTE_INSN_BASIC_BLOCK_P (x) || NOTE_BASIC_BLOCK (x) != bb)
1590176478.75:                                           ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176478.75: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176478.75:                                 ^              ~
1590176478.75: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176478.75: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1998:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         for (x = NEXT_INSN (x); x; x = NEXT_INSN (x))
1590176478.75:                  ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:1998:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         for (x = NEXT_INSN (x); x; x = NEXT_INSN (x))
1590176478.75:                                        ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2000:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             if (NOTE_INSN_BASIC_BLOCK_P (x))
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2055:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (x = last_head; x != NULL_RTX; x = PREV_INSN (x))
1590176478.75:                                              ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2063:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             && BLOCK_FOR_INSN (x) != NULL)
1590176478.75:                ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2080:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       for (; x != NULL_RTX; x = PREV_INSN (x))
1590176478.75:                                 ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2103:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       last_head = PREV_INSN (x);
1590176478.75:                   ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2113:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           for (insn = NEXT_INSN (BB_END (bb)); ; insn = NEXT_INSN (insn))
1590176478.75:                       ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2113:50: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           for (insn = NEXT_INSN (BB_END (bb)); ; insn = NEXT_INSN (insn))
1590176478.75:                                                         ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2115:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               if (!insn || NOTE_INSN_BASIC_BLOCK_P (insn))
1590176478.75:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2138:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             for (insn = NEXT_INSN (BB_END (e->src)); insn != BB_HEAD (e->dest);
1590176478.75:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2139:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                  insn = NEXT_INSN (insn))
1590176478.75:                         ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2150:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (x = last_head; x != NULL_RTX; x = PREV_INSN (x))
1590176478.75:                                          ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2155:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           && BLOCK_FOR_INSN (x) != NULL)
1590176478.75:              ^~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176478.75: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176478.75:                              ^             ~
1590176478.75: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176478.75: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176478.75: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2167:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   for (x = rtx_first; x; x = NEXT_INSN (x))
1590176478.75:                              ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2169:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (NOTE_INSN_BASIC_BLOCK_P (x))
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2171:9: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           bb = NOTE_BASIC_BLOCK (x);
1590176478.75:                ^~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176478.75: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176478.75:                                 ^              ~
1590176478.75: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176478.75: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2190:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               if (NEXT_INSN (x)
1590176478.75:                   ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2192:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 x = NEXT_INSN (x);
1590176478.75:                     ^~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2233:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       insn = PREV_INSN (insn);
1590176478.75:              ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2242:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (! may_trap_p (PATTERN (insn))
1590176478.75:                         ^~~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2319:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                    && BB_HEAD (e->dest) == JUMP_LABEL (insn))
1590176478.75:                                            ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2566:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   rtx insn, next, prev = PREV_INSN (BB_HEAD (bb)), *to, remaints;
1590176478.75:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2572:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         NEXT_INSN (prev) = bb->il.rtl->header;
1590176478.75:         ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2575:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       PREV_INSN (bb->il.rtl->header) = prev;
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2577:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       while (NEXT_INSN (insn))
1590176478.75:              ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2578:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         insn = NEXT_INSN (insn);
1590176478.75:                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2579:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       NEXT_INSN (insn) = next;
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2580:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       PREV_INSN (next) = insn;
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2582:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   next = NEXT_INSN (BB_END (bb));
1590176478.75:          ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2590:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               if (PREV_INSN (insn))
1590176478.75:                   ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2591:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2591:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
1590176478.75:                            ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2591:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
1590176478.75:                                                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2593:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 bb->il.rtl->footer = NEXT_INSN (insn);
1590176478.75:                                      ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2594:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               if (NEXT_INSN (insn))
1590176478.75:                   ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2595:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2595:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
1590176478.75:                            ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                               ^~~~
1590176478.75: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                                      ^~~
1590176478.75: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2595:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                 PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
1590176478.75:                                                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2599:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           insn = NEXT_INSN (insn);
1590176478.75:                  ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2604:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           NEXT_INSN (insn) = bb->il.rtl->footer;
1590176478.75:           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2605:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           PREV_INSN (bb->il.rtl->footer) = insn;
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2606:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           while (NEXT_INSN (insn))
1590176478.75:                  ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2607:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             insn = NEXT_INSN (insn);
1590176478.75:                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2608:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           NEXT_INSN (insn) = next;
1590176478.75:           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2610:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             PREV_INSN (next) = insn;
1590176478.75:             ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2623:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     prev = NEXT_INSN (prev);
1590176478.75:            ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2627:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     next = PREV_INSN (next);
1590176478.75:            ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2631:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   if (next && NEXT_INSN (next) != prev)
1590176478.75:               ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2635:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       while (NEXT_INSN (insn))
1590176478.75:              ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2636:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         insn = NEXT_INSN (insn);
1590176478.75:                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2637:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       NEXT_INSN (insn) = *to;
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2639:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         PREV_INSN (*to) = insn;
1590176478.75:         ^~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2706:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       rtx insn = BB_END (a), end = PREV_INSN (BB_HEAD (a));
1590176478.75:                                    ^~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2709:48: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       while (insn != end && (!INSN_P (insn) || INSN_LOCATOR (insn) == 0))
1590176478.75:                                                ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176478.75: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176478.75:                            ^           ~
1590176478.75: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.75: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2710:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         insn = PREV_INSN (insn);
1590176478.75:                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2711:38: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (insn != end && locator_eq (INSN_LOCATOR (insn), goto_locus))
1590176478.75:                                      ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176478.75: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176478.75:                            ^           ~
1590176478.75: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.75: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2716:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           end = NEXT_INSN (BB_END (b));
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2718:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             insn = NEXT_INSN (insn);
1590176478.75:                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2719:23: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           if (insn != end && INSN_LOCATOR (insn) != 0
1590176478.75:                              ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176478.75: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176478.75:                            ^           ~
1590176478.75: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.75: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2720:23: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               && locator_eq (INSN_LOCATOR (insn), goto_locus))
1590176478.75:                              ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176478.75: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176478.75:                            ^           ~
1590176478.75: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.75: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2726:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           INSN_LOCATOR (BB_END (a)) = goto_locus;
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176478.75: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176478.75:                            ^           ~
1590176478.75: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176478.75: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2736:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       delete_insn_chain (NEXT_INSN (first), last, false);
1590176478.75:                          ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2741:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   if (NEXT_INSN (BB_END (a)) != BB_HEAD (b))
1590176478.75:       ^~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2747:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (!NOTE_INSN_BASIC_BLOCK_P (first))
1590176478.75:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2748:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         first = NEXT_INSN (first);
1590176478.75:                 ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2749:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       gcc_assert (NOTE_INSN_BASIC_BLOCK_P (first));
1590176478.75:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176478.75:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176478.75:                ^~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2754:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       update_bb_for_insn_chain (NEXT_INSN (first),
1590176478.75:                                 ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2769:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       if (!NOTE_INSN_BASIC_BLOCK_P (insn))
1590176478.75:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2770:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         insn = NEXT_INSN (insn);
1590176478.75:                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2771:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:       gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));
1590176478.75:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176478.75:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176478.75:                ^~~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2788:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           while (NEXT_INSN (last))
1590176478.75:                  ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2789:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:             last = NEXT_INSN (last);
1590176478.75:                    ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2790:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           NEXT_INSN (last) = b->il.rtl->footer;
1590176478.75:           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2791:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           PREV_INSN (b->il.rtl->footer) = last;
1590176478.75:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2808:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                         ? NEXT_INSN (BB_END (e->src)) : get_insns (),
1590176478.75:                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2841:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     insn = PREV_INSN (insn);
1590176478.75:            ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2869:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:            && MEM_VOLATILE_P (PATTERN (insn)))
1590176478.75:                               ^~~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
1590176478.75:   (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
1590176478.75: #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
1590176478.75:                                                                          ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2872:36: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:               && MEM_VOLATILE_P (XVECEXP (PATTERN (insn), 0, 0)))
1590176478.75:                                           ^~~~~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176478.75: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176478.75: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176478.75:                                       ^~~~~
1590176478.75: ./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
1590176478.75:   (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
1590176478.75:                                       ^~~
1590176478.75: ./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
1590176478.75: #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
1590176478.75:                                                                          ^~~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2920:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         insn = PREV_INSN (insn);
1590176478.75:                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2953:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:           prev_insn = PREV_INSN (insn);
1590176478.75:                       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176478.75: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2963:31: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                        && keep_with_call_p (NEXT_INSN (split_at_insn)))
1590176478.75:                                             ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:2964:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:                   split_at_insn = NEXT_INSN (split_at_insn);
1590176478.75:                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3014:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   rtx op1 = XEXP ((rtx)comp_rtx, 1);
1590176478.75:             ^                    ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3030:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   JUMP_LABEL (jump) = label;
1590176478.75:   ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176478.75: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176478.75:                            ^            ~
1590176478.75: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176478.75: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3031:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   LABEL_NUSES (label)++;
1590176478.75:   ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176478.75: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176478.75:                          ^           ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3078:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   while (NEXT_INSN (pat_end) != NULL_RTX)
1590176478.75:          ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3079:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:     pat_end = NEXT_INSN (pat_end);
1590176478.75:               ^~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3145:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:              || NOTE_INSN_BASIC_BLOCK_P (insn))
1590176478.75:                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176478.75:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176478.75:       ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176478.75: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176478.75:                         ^            ~
1590176478.75: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176478.75: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176478.75:                                ^                 ~
1590176478.75: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176478.75: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3146:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:         insn = NEXT_INSN (insn);
1590176478.75:                ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176478.75: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3181:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   set = single_set (insn);
1590176478.75:         ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176478.75:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.75:                                           ^~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176478.75: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176478.75:                                          ^~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: cfgrtl.c:3181:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176478.75:   set = single_set (insn);
1590176478.75:         ^~~~~~~~~~~~~~~~~
1590176478.75: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176478.75:                           ? PATTERN (I) : single_set_1 (I)) \
1590176478.75:                             ^~~~~~~~~~~
1590176478.75: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176478.75: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176478.75:                         ^           ~
1590176478.75: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176478.75: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176478.75:                          ^                ~
1590176478.75: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176478.75: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176478.75:                                      ^            ~
1590176478.75: ./rtl.h:316:5: note: array 'fld' declared here
1590176478.75:     rtunion fld[1];
1590176478.75:     ^
1590176478.75: 232 warnings generated.
1590176478.89: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_errors.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_errors.c
1590176478.89: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176478.89: In file included from cpp_errors.c:30:
1590176478.89: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176478.89: #if HAVE_DESIGNATED_INITIALIZERS
1590176478.89:     ^
1590176478.89: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176478.89:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176478.89:      ^
1590176478.89: 1 warning generated.
1590176479.10: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o coverage.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  coverage.c
1590176479.10: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.10: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cgraphunit.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cgraphunit.c
1590176479.10: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.50: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_directives.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_directives.c
1590176479.50: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.50: In file included from cpp_directives.c:27:
1590176479.50: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176479.50: #if HAVE_DESIGNATED_INITIALIZERS
1590176479.50:     ^
1590176479.50: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176479.50:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176479.50:      ^
1590176479.50: 1 warning generated.
1590176479.60: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_charset.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_charset.c
1590176479.60: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.60: In file included from cpp_charset.c:25:
1590176479.60: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176479.60: #if HAVE_DESIGNATED_INITIALIZERS
1590176479.60:     ^
1590176479.60: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176479.60:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176479.60:      ^
1590176479.60: 1 warning generated.
1590176479.70: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_expr.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_expr.c
1590176479.70: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.70: In file included from cpp_expr.c:24:
1590176479.70: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176479.70: #if HAVE_DESIGNATED_INITIALIZERS
1590176479.70:     ^
1590176479.70: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176479.70:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176479.70:      ^
1590176479.70: 1 warning generated.
1590176479.80: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_line-map.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_line-map.c
1590176479.80: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.80: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_lex.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_lex.c
1590176479.80: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.80: In file included from cpp_lex.c:27:
1590176479.80: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176479.80: #if HAVE_DESIGNATED_INITIALIZERS
1590176479.80:     ^
1590176479.80: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176479.80:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176479.80:      ^
1590176479.80: 1 warning generated.
1590176479.80: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_identifiers.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_identifiers.c
1590176479.80: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.80: In file included from cpp_identifiers.c:30:
1590176479.80: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176479.80: #if HAVE_DESIGNATED_INITIALIZERS
1590176479.80:     ^
1590176479.80: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176479.80:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176479.80:      ^
1590176479.80: 1 warning generated.
1590176479.90: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_symtab.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_symtab.c
1590176479.90: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.90: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_macro.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_macro.c
1590176479.90: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176479.90: In file included from cpp_macro.c:31:
1590176479.90: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176479.90: #if HAVE_DESIGNATED_INITIALIZERS
1590176479.90:     ^
1590176479.90: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176479.90:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176479.90:      ^
1590176479.90: 1 warning generated.
1590176479.90: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o crc32.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  crc32.c
1590176479.90: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.00: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_mkdeps.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_mkdeps.c
1590176480.00: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.00: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_traditional.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_traditional.c
1590176480.00: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.00: In file included from cpp_traditional.c:24:
1590176480.00: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176480.00: #if HAVE_DESIGNATED_INITIALIZERS
1590176480.00:     ^
1590176480.00: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176480.00:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176480.00:      ^
1590176480.00: 1 warning generated.
1590176480.00: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_directives-only.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_directives-only.c
1590176480.00: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.00: In file included from cpp_directives-only.c:24:
1590176480.00: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176480.00: #if HAVE_DESIGNATED_INITIALIZERS
1590176480.00:     ^
1590176480.00: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176480.00:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176480.00:      ^
1590176480.00: 1 warning generated.
1590176480.10: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_pch.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_pch.c
1590176480.10: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.10: In file included from cpp_pch.c:27:
1590176480.10: ./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176480.10: #if HAVE_DESIGNATED_INITIALIZERS
1590176480.10:     ^
1590176480.10: ./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176480.10:   ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
1590176480.10:      ^
1590176480.10: 1 warning generated.
1590176480.10: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dbgcnt.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dbgcnt.c
1590176480.10: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.50: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cp-demangle.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cp-demangle.c
1590176480.50: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.60: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o debug.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  debug.c
1590176480.60: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.70: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decContext.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decContext.c
1590176480.70: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.80: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dce.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dce.c
1590176480.80: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.80: dce.c:118:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   body = PATTERN (insn);
1590176480.80:          ^~~~~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:247:16: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
1590176480.80:   min_sp_off = INTTYPE_MAXIMUM (HOST_WIDE_INT);
1590176480.80:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./system.h:281:44: note: expanded from macro 'INTTYPE_MAXIMUM'
1590176480.80: #define INTTYPE_MAXIMUM(t) ((t) (~ (t) 0 - INTTYPE_MINIMUM (t)))
1590176480.80:                                            ^~~~~~~~~~~~~~~~~~~
1590176480.80: ./system.h:280:40: note: expanded from macro 'INTTYPE_MINIMUM'
1590176480.80:                              ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
1590176480.80:                                ~~~~~~~ ^
1590176480.80: dce.c:252:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
1590176480.80:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176480.80: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176480.80:                                         ^          ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:252:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
1590176480.80:                                                         ^        ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:258:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:         size = MEM_SIZE (mem);
1590176480.80:                ^~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176480.80: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176480.80:  ^~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176480.80: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176480.80:                        ^               ~
1590176480.80: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176480.80: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176480.80:                             ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:258:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:         size = MEM_SIZE (mem);
1590176480.80:                ^~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176480.80: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176480.80:                         ^~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176480.80: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176480.80:                        ^               ~
1590176480.80: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176480.80: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176480.80:                             ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:266:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:             off = INTVAL (XEXP (addr, 1));
1590176480.80:                           ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:295:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:                 set = single_set (DF_REF_INSN (defs->ref));
1590176480.80:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                                           ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176480.80: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176480.80:                                          ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:295:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:                 set = single_set (DF_REF_INSN (defs->ref));
1590176480.80:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                             ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:300:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:                     || XEXP (SET_SRC (set), 0) != stack_pointer_rtx
1590176480.80:                              ^~~~~~~~~~~~~
1590176480.80: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.80: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.80:                      ^          ~
1590176480.80: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.80: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.80:                                ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                                      ^~~
1590176480.80: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:304:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:                 off += INTVAL (XEXP (SET_SRC (set), 1));
1590176480.80:                                ^                    ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:304:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:                 off += INTVAL (XEXP (SET_SRC (set), 1));
1590176480.80:                                      ^~~~~~~~~~~~~
1590176480.80: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.80: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.80:                      ^          ~
1590176480.80: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.80: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.80:                                ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176480.80: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:320:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
1590176480.80:            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176480.80: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176480.80:                                         ^          ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:320:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
1590176480.80:                                                         ^        ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:331:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:             off = INTVAL (XEXP (addr, 1));
1590176480.80:                           ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:348:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:             set = single_set (DF_REF_INSN (defs->ref));
1590176480.80:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                                           ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176480.80: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176480.80:                                          ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:348:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:             set = single_set (DF_REF_INSN (defs->ref));
1590176480.80:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                             ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:349:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:             off += INTVAL (XEXP (SET_SRC (set), 1));
1590176480.80:                            ^                    ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:349:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:             off += INTVAL (XEXP (SET_SRC (set), 1));
1590176480.80:                                  ^~~~~~~~~~~~~
1590176480.80: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.80: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.80:                      ^          ~
1590176480.80: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.80: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.80:                                ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176480.80: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:351:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:         for (byte = off; byte < off + INTVAL (MEM_SIZE (mem)); byte++)
1590176480.80:                                               ^~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176480.80: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176480.80:  ^~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176480.80: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176480.80:                        ^               ~
1590176480.80: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176480.80: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176480.80:                             ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:351:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:         for (byte = off; byte < off + INTVAL (MEM_SIZE (mem)); byte++)
1590176480.80:                                               ^~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176480.80: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176480.80:                         ^~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176480.80: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176480.80:                        ^               ~
1590176480.80: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176480.80: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176480.80:                             ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:362:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   for (insn = PREV_INSN (call_insn); insn; insn = prev_insn)
1590176480.80:               ^~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:367:28: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:       if (insn == BB_HEAD (BLOCK_FOR_INSN (call_insn)))
1590176480.80:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176480.80: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176480.80:                              ^             ~
1590176480.80: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176480.80: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176480.80: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./basic-block.h:491:26: note: expanded from macro 'BB_HEAD'
1590176480.80: #define BB_HEAD(B)      (B)->il.rtl->head_
1590176480.80:                          ^
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:370:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:         prev_insn = PREV_INSN (insn);
1590176480.80:                     ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:378:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:       set = single_set (insn);
1590176480.80:             ^~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                                           ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176480.80: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176480.80:                                          ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:378:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:       set = single_set (insn);
1590176480.80:             ^~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                             ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:392:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:           off = INTVAL (XEXP (addr, 1));
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:419:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:               set = single_set (DF_REF_INSN (defs->ref));
1590176480.80:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                                           ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176480.80: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176480.80:                                          ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:419:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:               set = single_set (DF_REF_INSN (defs->ref));
1590176480.80:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176480.80:                           ? PATTERN (I) : single_set_1 (I)) \
1590176480.80:                             ^~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:424:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:                   || XEXP (SET_SRC (set), 0) != stack_pointer_rtx
1590176480.80:                            ^~~~~~~~~~~~~
1590176480.80: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.80: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.80:                      ^          ~
1590176480.80: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.80: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.80:                                ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                                      ^~~
1590176480.80: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:428:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:               off += INTVAL (XEXP (SET_SRC (set), 1));
1590176480.80:                              ^                    ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:428:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:               off += INTVAL (XEXP (SET_SRC (set), 1));
1590176480.80:                                    ^~~~~~~~~~~~~
1590176480.80: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.80: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.80:                      ^          ~
1590176480.80: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.80: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.80:                                ^                 ~
1590176480.80: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.80: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176480.80: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176480.80: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176480.80:                            ^~~
1590176480.80: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176480.80: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176480.80:                                       ^~~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:511:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)
1590176480.80:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:473:47: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
1590176480.80:   for ((INSN) = BB_END (BB),(CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL;        \
1590176480.80:                                               ^~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:511:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)
1590176480.80:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:474:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
1590176480.80:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176480.80:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:511:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)
1590176480.80:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:475:43: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
1590176480.80:        (INSN) = (CURR), (CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL)
1590176480.80:                                           ^~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:585:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:       FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)
1590176480.80:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:473:47: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
1590176480.80:   for ((INSN) = BB_END (BB),(CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL;        \
1590176480.80:                                               ^~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:585:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:       FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)
1590176480.80:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:474:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
1590176480.80:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176480.80:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:585:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:       FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)
1590176480.80:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:475:43: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
1590176480.80:        (INSN) = (CURR), (CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL)
1590176480.80:                                           ^~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:593:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:               mark_nonreg_stores (PATTERN (insn), insn, fast);
1590176480.80:                                   ^~~~~~~~~~~~~~
1590176480.80: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.80: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:799:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176480.80:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176480.80:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176480.80:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:799:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176480.80:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176480.80:        (INSN) = PREV_INSN (INSN))
1590176480.80:                 ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:903:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176480.80:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176480.80:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176480.80:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: dce.c:903:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.80:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176480.80:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.80: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176480.80:        (INSN) = PREV_INSN (INSN))
1590176480.80:                 ^~~~~~~~~~~~~~~~
1590176480.80: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176480.80: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176480.80:                         ^           ~
1590176480.80: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.80: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.80:                          ^                ~
1590176480.80: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.80: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.80:                                      ^            ~
1590176480.80: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.80:     rtunion fld[1];
1590176480.80:     ^
1590176480.80: 43 warnings generated.
1590176480.80: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decimal128.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decimal128.c
1590176480.80: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.91: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cselib.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cselib.c
1590176480.91: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176480.91: In file included from cselib.c:34:
1590176480.91: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:   if (INSN_CODE (insn) < 0)
1590176480.91:       ^~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176480.91: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176480.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: In file included from cselib.c:34:
1590176480.91: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176480.91:                               ^~~~~~~~~~~~~~
1590176480.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: In file included from cselib.c:34:
1590176480.91: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176480.91:     ^~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176480.91: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176480.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: In file included from cselib.c:34:
1590176480.91: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:   return INSN_CODE (insn);
1590176480.91:          ^~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176480.91: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176480.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: In file included from cselib.c:34:
1590176480.91: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176480.91: #if HAVE_DESIGNATED_INITIALIZERS
1590176480.91:     ^
1590176480.91: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176480.91:    && !defined(__cplusplus))
1590176480.91:        ^
1590176480.91: cselib.c:741:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:               && rtx_equal_for_cselib_p (XEXP (x, 1), XEXP (y, 0))
1590176480.91:                                          ^        ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:742:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:               && rtx_equal_for_cselib_p (XEXP (x, 0), XEXP (y, 1)))
1590176480.91:                                                       ^        ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:873:11: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                + CODE_LABEL_NUMBER (XEXP (x, 0)));
1590176480.91:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176480.91: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176480.91:                                 ^           ~
1590176480.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176480.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:1125:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:               && XEXP (note, 0) == XEXP (p->loc, 1))
1590176480.91:                                    ^             ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:1126:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:             return XEXP (p->loc, 1);
1590176480.91:                    ^             ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:1337:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                                      SUBREG_BYTE (orig));
1590176480.91:                                      ^~~~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176480.91: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176480.91:                          ^            ~
1590176480.91: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176480.91: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176480.91:                                ^                 ~
1590176480.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:1473:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                                               XEXP (copy, 0), XEXP (copy, 1),
1590176480.91:                                                               ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:1474:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                                               XEXP (copy, 2));
1590176480.91:                                               ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:1492:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                                                  XEXP (copy, 1));
1590176480.91:                                                  ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2021:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:   rtx body = PATTERN (insn);
1590176480.91:              ^~~~~~~~~~~~~~
1590176480.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2024:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:   body = PATTERN (insn);
1590176480.91:          ^~~~~~~~~~~~~~
1590176480.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2028:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:       body = COND_EXEC_CODE (body);
1590176480.91:              ^~~~~~~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
1590176480.91: #define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
1590176480.91:                             ^           ~
1590176480.91: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.91: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.91:                                ^                 ~
1590176480.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2034:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:       sets[0].src = SET_SRC (body);
1590176480.91:                     ^~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.91: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.91:                      ^          ~
1590176480.91: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.91: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.91:                                ^                 ~
1590176480.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2048:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:               sets[n_sets].src = SET_SRC (x);
1590176480.91:                                  ^~~~~~~~~~~
1590176480.91: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176480.91: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176480.91:                      ^          ~
1590176480.91: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176480.91: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176480.91:                                ^                 ~
1590176480.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2088:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                 = targetm.addr_space.address_mode (MEM_ADDR_SPACE (dest));
1590176480.91:                                                    ^~~~~~~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176480.91: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176480.91:                              ^~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176480.91: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176480.91:                        ^               ~
1590176480.91: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176480.91: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176480.91:                             ^                 ~
1590176480.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2088:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:                 = targetm.addr_space.address_mode (MEM_ADDR_SPACE (dest));
1590176480.91:                                                    ^~~~~~~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176480.91:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176480.91:                                                     ^~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176480.91: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176480.91:                        ^               ~
1590176480.91: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176480.91: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176480.91:                             ^                 ~
1590176480.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176480.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2155:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:           && MEM_VOLATILE_P (PATTERN (insn))))
1590176480.91:                              ^~~~~~~~~~~~~~
1590176480.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176480.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176480.91:                         ^           ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
1590176480.91:   (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
1590176480.91:                                       ^~~
1590176480.91: ./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
1590176480.91: #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
1590176480.91:                                                                          ^~~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2202:14: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:     for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))
1590176480.91:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176480.91: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176480.91: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176480.91:                                         ^          ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: cselib.c:2202:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176480.91:     for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))
1590176480.91:                                                      ^        ~
1590176480.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176480.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176480.91:                          ^                ~
1590176480.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176480.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176480.91:                                      ^            ~
1590176480.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176480.91:     rtunion fld[1];
1590176480.91:     ^
1590176480.91: 24 warnings generated.
1590176480.91: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decimal32.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decimal32.c
1590176480.91: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176481.01: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ddg.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ddg.c
1590176481.01: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176481.01: In file included from ddg.c:37:
1590176481.01: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   if (INSN_CODE (insn) < 0)
1590176481.01:       ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176481.01: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176481.01: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: In file included from ddg.c:37:
1590176481.01: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176481.01:                               ^~~~~~~~~~~~~~
1590176481.01: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176481.01: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: In file included from ddg.c:37:
1590176481.01: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176481.01:     ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176481.01: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176481.01: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: In file included from ddg.c:37:
1590176481.01: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   return INSN_CODE (insn);
1590176481.01:          ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176481.01: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176481.01: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: In file included from ddg.c:37:
1590176481.01: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176481.01: #if HAVE_DESIGNATED_INITIALIZERS
1590176481.01:     ^
1590176481.01: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176481.01:    && !defined(__cplusplus))
1590176481.01:        ^
1590176481.01: ddg.c:88:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   note_uses (&PATTERN (insn), mark_mem_use_1, NULL);
1590176481.01:               ^~~~~~~~~~~~~~
1590176481.01: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176481.01: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:104:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   note_stores (PATTERN (insn), mark_mem_store, NULL);
1590176481.01:                ^~~~~~~~~~~~~~
1590176481.01: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176481.01: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:145:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   return rtx_mem_access_p (PATTERN (insn));
1590176481.01:                            ^~~~~~~~~~~~~~
1590176481.01: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176481.01: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:183:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:       set = single_set (dest_node->insn);
1590176481.01:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176481.01:                           ? PATTERN (I) : single_set_1 (I)) \
1590176481.01:                                           ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176481.01: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176481.01:                                          ^~~~~~~~~~~
1590176481.01: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176481.01: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:183:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:       set = single_set (dest_node->insn);
1590176481.01:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176481.01:                           ? PATTERN (I) : single_set_1 (I)) \
1590176481.01:                             ^~~~~~~~~~~
1590176481.01: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176481.01: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:274:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:       if (BLOCK_FOR_INSN (use_insn) != g->bb)
1590176481.01:           ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176481.01: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176481.01:                              ^             ~
1590176481.01: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176481.01: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176481.01: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:471:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb));
1590176481.01:                                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176481.01: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:472:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:        insn = NEXT_INSN (insn))
1590176481.01:               ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176481.01: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:502:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:   for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb));
1590176481.01:                                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176481.01: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:503:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:        insn = NEXT_INSN (insn))
1590176481.01:               ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176481.01: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176481.01:                         ^           ~
1590176481.01: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.01: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.01:                          ^                ~
1590176481.01: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.01: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: ddg.c:508:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.01:               && NOTE_KIND (insn) !=  NOTE_INSN_BASIC_BLOCK)
1590176481.01:                  ^~~~~~~~~~~~~~~~
1590176481.01: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176481.01: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176481.01:                         ^            ~
1590176481.01: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176481.01: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176481.01:                                ^                 ~
1590176481.01: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176481.01: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176481.01:                                      ^            ~
1590176481.01: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.01:     rtunion fld[1];
1590176481.01:     ^
1590176481.01: 16 warnings generated.
1590176481.12: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decimal64.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decimal64.c
1590176481.12: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176481.22: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-byte-scan.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-byte-scan.c
1590176481.22: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176481.22: df-byte-scan.c:98:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.22:         offset += SUBREG_BYTE (reg) * BITS_PER_UNIT;
1590176481.22:                   ^~~~~~~~~~~~~~~~~
1590176481.22: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176481.22: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176481.22:                          ^            ~
1590176481.22: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176481.22: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176481.22:                                ^                 ~
1590176481.22: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176481.22: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176481.22:                                      ^            ~
1590176481.22: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.22:     rtunion fld[1];
1590176481.22:     ^
1590176481.22: df-byte-scan.c:173:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.22:   offset = SUBREG_BYTE (reg);
1590176481.22:            ^~~~~~~~~~~~~~~~~
1590176481.22: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176481.22: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176481.22:                          ^            ~
1590176481.22: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176481.22: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176481.22:                                ^                 ~
1590176481.22: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176481.22: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176481.22:                                      ^            ~
1590176481.22: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.22:     rtunion fld[1];
1590176481.22:     ^
1590176481.22: df-byte-scan.c:255:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.22:           int offset = SUBREG_BYTE (reg);
1590176481.22:                        ^~~~~~~~~~~~~~~~~
1590176481.22: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176481.22: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176481.22:                          ^            ~
1590176481.22: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176481.22: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176481.22:                                ^                 ~
1590176481.22: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176481.22: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176481.22:                                      ^            ~
1590176481.22: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.22:     rtunion fld[1];
1590176481.22:     ^
1590176481.22: df-byte-scan.c:271:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.22:       int offset = SUBREG_BYTE (reg);
1590176481.22:                    ^~~~~~~~~~~~~~~~~
1590176481.22: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176481.22: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176481.22:                          ^            ~
1590176481.22: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176481.22: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176481.22:                                ^                 ~
1590176481.22: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176481.22: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176481.22:                                      ^            ~
1590176481.22: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.22:     rtunion fld[1];
1590176481.22:     ^
1590176481.22: 4 warnings generated.
1590176481.72: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dbxout.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dbxout.c
1590176481.72: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176481.72: dbxout.c:3037:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:           number = DEBUGGER_AUTO_OFFSET (XEXP (XEXP (home, 0), 0));
1590176481.72:                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.72: dbxout.c:287:35: note: expanded from macro 'DEBUGGER_AUTO_OFFSET'
1590176481.72:   (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)
1590176481.72:                                   ^        ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3051:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:       number = DEBUGGER_AUTO_OFFSET (XEXP (home, 0));
1590176481.72:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.72: dbxout.c:287:35: note: expanded from macro 'DEBUGGER_AUTO_OFFSET'
1590176481.72:   (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)
1590176481.72:                                   ^        ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3060:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:       number = DEBUGGER_AUTO_OFFSET (XEXP (home, 0));
1590176481.72:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.72: dbxout.c:287:35: note: expanded from macro 'DEBUGGER_AUTO_OFFSET'
1590176481.72:   (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)
1590176481.72:                                   ^        ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3110:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:         dbxout_symbol_location (decl, subtype, "$imag", XEXP (home, 1));
1590176481.72:                                                         ^           ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3244:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:                 targetm.strip_name_encoding(XSTR (XEXP (sym_addr, 1), 0));
1590176481.72:                                                   ^               ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:703:35: note: expanded from macro 'XSTR'
1590176481.72: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176481.72:                                      ^~~
1590176481.72: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3246:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               c_decl = SYMBOL_REF_DECL (XEXP (sym_addr, 1));
1590176481.72:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.72: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176481.72:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176481.72:                                           ^              ~
1590176481.72: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176481.72: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176481.72:                             ^                ~
1590176481.72: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176481.72: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3246:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               c_decl = SYMBOL_REF_DECL (XEXP (sym_addr, 1));
1590176481.72:                                         ^               ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1379:52: note: expanded from macro 'SYMBOL_REF_DECL'
1590176481.72:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176481.72:                                                    ^~~
1590176481.72: ./rtl.h:725:40: note: expanded from macro 'X0TREE'
1590176481.72: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176481.72:                                         ^~~
1590176481.72: ./rtl.h:593:39: note: expanded from macro 'RTL_CHECK1'
1590176481.72: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3252:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               *value = INTVAL (XEXP (sym_addr, 1));
1590176481.72:                                ^               ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3253:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               c_decl = SYMBOL_REF_DECL (XEXP (sym_addr, 0));
1590176481.72:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.72: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176481.72:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176481.72:                                           ^              ~
1590176481.72: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176481.72: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176481.72:                             ^                ~
1590176481.72: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176481.72: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3260:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:           c_decl = SYMBOL_REF_DECL (sym_addr);
1590176481.72:                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176481.72: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176481.72:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176481.72:                                           ^              ~
1590176481.72: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176481.72: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176481.72:                             ^                ~
1590176481.72: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176481.72: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3375:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               number = INTVAL (XEXP (inrtl, 1));
1590176481.72:                                ^            ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3469:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               number = INTVAL (XEXP (XEXP (XEXP (DECL_RTL (parms), 0), 0), 1));
1590176481.72:                                ^                                           ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: dbxout.c:3494:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176481.72:               number = INTVAL (XEXP (XEXP (DECL_RTL (parms), 0), 1));
1590176481.72:                                ^                                 ~
1590176481.72: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176481.72: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176481.72:                          ^                ~
1590176481.72: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176481.72: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176481.72:                                      ^            ~
1590176481.72: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176481.72: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176481.72:                            ^~~
1590176481.72: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176481.72: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176481.72:                                       ^~~
1590176481.72: ./rtl.h:316:5: note: array 'fld' declared here
1590176481.72:     rtunion fld[1];
1590176481.72:     ^
1590176481.72: 13 warnings generated.
1590176481.92: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cplus-dem.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cplus-dem.c
1590176481.92: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176482.02: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-core.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-core.c
1590176482.02: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176482.02: In file included from df-core.c:385:
1590176482.02: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:   if (INSN_CODE (insn) < 0)
1590176482.02:       ^~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176482.02: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176482.02: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: In file included from df-core.c:385:
1590176482.02: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176482.02:                               ^~~~~~~~~~~~~~
1590176482.02: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176482.02: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.02: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: In file included from df-core.c:385:
1590176482.02: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176482.02:     ^~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176482.02: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176482.02: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: In file included from df-core.c:385:
1590176482.02: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:   return INSN_CODE (insn);
1590176482.02:          ^~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176482.02: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176482.02: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: In file included from df-core.c:385:
1590176482.02: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176482.02: #if HAVE_DESIGNATED_INITIALIZERS
1590176482.02:     ^
1590176482.02: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176482.02:    && !defined(__cplusplus))
1590176482.02:        ^
1590176482.02: df-core.c:1682:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:   FOR_BB_INSNS (bb, insn)
1590176482.02:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176482.02:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176482.02:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176482.02: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.02: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: df-core.c:1682:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:   FOR_BB_INSNS (bb, insn)
1590176482.02:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176482.02:        (INSN) = NEXT_INSN (INSN))
1590176482.02:                 ^~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176482.02: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.02: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: df-core.c:1708:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176482.02:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176482.02:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176482.02:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176482.02: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.02: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: df-core.c:1708:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176482.02:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176482.02:        (INSN) = PREV_INSN (INSN))
1590176482.02:                 ^~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176482.02: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176482.02:                         ^           ~
1590176482.02: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.02: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.02: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: df-core.c:2109:22: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:            INSN_UID (insn), BLOCK_FOR_INSN (insn)->index,
1590176482.02:                             ^~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176482.02: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176482.02:                              ^             ~
1590176482.02: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176482.02: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176482.02: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: df-core.c:2142:5: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.02:            DF_REF_BBNO (ref),
1590176482.02:            ^~~~~~~~~~~~~~~~~
1590176482.02: ./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
1590176482.02: #define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
1590176482.02:                           ^~~~~~~~~~~~~~~
1590176482.02: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176482.02:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176482.02:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176482.02: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176482.02: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176482.02:                              ^             ~
1590176482.02: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176482.02: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176482.02:                          ^                ~
1590176482.02: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176482.02: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176482.02:                                      ^            ~
1590176482.02: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.02:     rtunion fld[1];
1590176482.02:     ^
1590176482.02: 11 warnings generated.
1590176482.02: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dfp.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dfp.c
1590176482.02: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176482.22: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o diagnostic.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  diagnostic.c
1590176482.22: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176482.53: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dojump.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dojump.c
1590176482.53: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176482.53: dojump.c:165:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:   XEXP (and_test, 1)
1590176482.53:   ^               ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: dojump.c:167:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:   XEXP (XEXP (shift_test, 0), 1) = GEN_INT (bitnum);
1590176482.53:   ^                           ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: dojump.c:956:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:       op1 = XEXP (tem, 1);
1590176482.53:             ^          ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: dojump.c:1088:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:           for (last = NEXT_INSN (last);
1590176482.53:                       ^~~~~~~~~~~~~~~~
1590176482.53: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176482.53: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176482.53:                         ^           ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: dojump.c:1089:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:                last && NEXT_INSN (last);
1590176482.53:                        ^~~~~~~~~~~~~~~~
1590176482.53: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176482.53: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176482.53:                         ^           ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: dojump.c:1090:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:                last = NEXT_INSN (last))
1590176482.53:                       ^~~~~~~~~~~~~~~~
1590176482.53: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176482.53: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176482.53:                         ^           ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: dojump.c:1095:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176482.53:               || NEXT_INSN (last)
1590176482.53:                  ^~~~~~~~~~~~~~~~
1590176482.53: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176482.53: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176482.53:                         ^           ~
1590176482.53: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176482.53: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176482.53:                          ^                ~
1590176482.53: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176482.53: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176482.53:                                      ^            ~
1590176482.53: ./rtl.h:316:5: note: array 'fld' declared here
1590176482.53:     rtunion fld[1];
1590176482.53:     ^
1590176482.53: 7 warnings generated.
1590176482.53: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o domwalk.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  domwalk.c
1590176482.53: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176482.83: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o double-int.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  double-int.c
1590176482.83: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.03: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dominance.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dominance.c
1590176483.03: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.13: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-problems.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-problems.c
1590176483.13: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.13: In file included from df-problems.c:32:
1590176483.13: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   if (INSN_CODE (insn) < 0)
1590176483.13:       ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.13: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.13: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: In file included from df-problems.c:32:
1590176483.13: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.13:                               ^~~~~~~~~~~~~~
1590176483.13: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.13: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: In file included from df-problems.c:32:
1590176483.13: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.13:     ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.13: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.13: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: In file included from df-problems.c:32:
1590176483.13: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   return INSN_CODE (insn);
1590176483.13:          ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.13: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.13: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: In file included from df-problems.c:32:
1590176483.13: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.13: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.13:     ^
1590176483.13: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.13:    && !defined(__cplusplus))
1590176483.13:        ^
1590176483.13: df-problems.c:130:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:                DF_REF_BBNO (link->ref),
1590176483.13:                ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
1590176483.13: #define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
1590176483.13:                           ^~~~~~~~~~~~~~~
1590176483.13: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.13:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.13:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.13: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.13:                              ^             ~
1590176483.13: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.13: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.13: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:426:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:426:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) = PREV_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:857:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:857:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) = PREV_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:1465:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:1465:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2000:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2000:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2134:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2134:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2209:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2209:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2258:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2258:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2521:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2521:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:       FOR_BB_INSNS (bb, insn)
1590176483.13:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2637:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:2637:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) = PREV_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3114:17: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   rtx *pprev = &REG_NOTES (insn);
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.13: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.13:                         ^          ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3133:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:               rtx next = XEXP (link, 1);
1590176483.13:                          ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3137:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:               XEXP (link, 1) = dead;
1590176483.13:               ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3153:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:               rtx next = XEXP (link, 1);
1590176483.13:                          ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3157:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:               XEXP (link, 1) = unused;
1590176483.13:               ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3190:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           XEXP (prev, 1) = XEXP (curr, 1);
1590176483.13:           ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3190:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           XEXP (prev, 1) = XEXP (curr, 1);
1590176483.13:                            ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3192:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           old = XEXP (curr, 1);
1590176483.13:                 ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3193:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:         XEXP (curr, 1) = REG_NOTES (insn);
1590176483.13:         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3193:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:         XEXP (curr, 1) = REG_NOTES (insn);
1590176483.13:                          ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.13: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.13:                         ^          ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3194:2: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:         REG_NOTES (insn) = curr;
1590176483.13:         ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.13: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.13:                         ^          ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3200:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:         curr = XEXP (curr, 1);
1590176483.13:                ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3467:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3467:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.13:        (INSN) = PREV_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.13: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3620:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           rtx next = XEXP (old_unused_notes, 1);
1590176483.13:                      ^                       ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3626:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           rtx next = XEXP (old_dead_notes, 1);
1590176483.13:                      ^                     ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3635:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
1590176483.13:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.13:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.13: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.13:                                    ^             ~
1590176483.13: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.13: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.13:                                ^                 ~
1590176483.13: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.13: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3635:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:           INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
1590176483.13:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.13:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.13:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176483.13: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176483.13:                                 ^~~~~~~~~~~~~~
1590176483.13: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.13: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.13:                         ^           ~
1590176483.13: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.13: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.13: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.13:                                            ^~~
1590176483.13: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.13: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.13:                                             ^~~
1590176483.13: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.13: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.13:                                       ^~~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3945:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
1590176483.13:               ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.13: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.13:                         ^          ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:3945:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
1590176483.13:                                              ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:4197:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.13:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: df-problems.c:4197:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.13:   FOR_BB_INSNS (bb, insn)
1590176483.13:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.13: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.13:        (INSN) = NEXT_INSN (INSN))
1590176483.13:                 ^~~~~~~~~~~~~~~~
1590176483.13: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.13: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.13:                         ^           ~
1590176483.13: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.13: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.13:                          ^                ~
1590176483.13: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.13: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.13:                                      ^            ~
1590176483.13: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.13:     rtunion fld[1];
1590176483.13:     ^
1590176483.13: 46 warnings generated.
1590176483.13: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dwarf2asm.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dwarf2asm.c
1590176483.13: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.13: dwarf2asm.c:387:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.13: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.13:     ^
1590176483.13: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.13:    && !defined(__cplusplus))
1590176483.13:        ^
1590176483.13: dwarf2asm.c:393:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.13: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.13:     ^
1590176483.13: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.13:    && !defined(__cplusplus))
1590176483.13:        ^
1590176483.13: dwarf2asm.c:530:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.13: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.13:     ^
1590176483.13: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.13:    && !defined(__cplusplus))
1590176483.13:        ^
1590176483.13: 3 warnings generated.
1590176483.24: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decNumber.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decNumber.c
1590176483.24: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.24: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o combine.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  combine.c
1590176483.24: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.24: In file included from combine.c:94:
1590176483.24: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (INSN_CODE (insn) < 0)
1590176483.24:       ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.24: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: In file included from combine.c:94:
1590176483.24: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.24:                               ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: In file included from combine.c:94:
1590176483.24: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.24:     ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.24: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: In file included from combine.c:94:
1590176483.24: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   return INSN_CODE (insn);
1590176483.24:          ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.24: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: In file included from combine.c:94:
1590176483.24: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.24: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.24:     ^
1590176483.24: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.24:    && !defined(__cplusplus))
1590176483.24:        ^
1590176483.24: combine.c:633:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   bb = BLOCK_FOR_INSN (insn);
1590176483.24:        ^~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:634:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (next = NEXT_INSN (insn);
1590176483.24:               ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:635:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:        next && BLOCK_FOR_INSN (next) == bb;
1590176483.24:                ^~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:636:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:        next = NEXT_INSN (next))
1590176483.24:               ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:639:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         for (link = LOG_LINKS (next); link; link = XEXP (link, 1))
1590176483.24:                                                    ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:645:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             result = find_single_use_1 (dest, &PATTERN (next));
1590176483.24:                                                ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:885:41: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb)); insn = next)
1590176483.24:                                         ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:887:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           next = NEXT_INSN (insn);
1590176483.24:                  ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:922:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.24:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.24:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176483.24:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:922:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.24:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.24:        (INSN) = PREV_INSN (INSN))
1590176483.24:                 ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:957:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               if (BLOCK_FOR_INSN (use_insn) == bb)
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:967:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       || asm_noperands (PATTERN (use_insn)) < 0)
1590176483.24:                                         ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:972:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                            links = XEXP (links, 1))
1590176483.24:                                    ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1009:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176483.24:                                          ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1033:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     first = NEXT_INSN (first);
1590176483.24:             ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1086:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       FOR_BB_INSNS (this_basic_block, insn)
1590176483.24:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.24:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.24:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1086:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       FOR_BB_INSNS (this_basic_block, insn)
1590176483.24:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.24:        (INSN) = NEXT_INSN (INSN))
1590176483.24:                 ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1087:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         if (INSN_P (insn) && BLOCK_FOR_INSN (insn))
1590176483.24:                              ^~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1092:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             note_stores (PATTERN (insn), set_nonzero_bits_and_sign_copies,
1590176483.24:                          ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1105:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               INSN_COST (insn) = insn_rtx_cost (PATTERN (insn),
1590176483.24:                                                 ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1135:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            insn != NEXT_INSN (BB_END (this_basic_block));
1590176483.24:                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1136:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            insn = next ? next : NEXT_INSN (insn))
1590176483.24:                                 ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1143:37: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               check_promoted_subreg (insn, PATTERN (insn));
1590176483.24:                                            ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1148:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               note_uses (&PATTERN (insn), record_truncated_values, NULL);
1590176483.24:                           ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1152:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
1590176483.24:                                                             ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1159:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
1590176483.24:                                                             ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1170:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                        nextlinks = XEXP (nextlinks, 1))
1590176483.24:                                    ^                ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1239:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
1590176483.24:                                                             ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1240:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 for (nextlinks = XEXP (links, 1); nextlinks;
1590176483.24:                                  ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1241:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                      nextlinks = XEXP (nextlinks, 1))
1590176483.24:                                  ^                ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1248:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
1590176483.24:                                                             ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1252:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   if ((set = single_set (temp)) != 0
1590176483.24:                              ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1252:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   if ((set = single_set (temp)) != 0
1590176483.24:                              ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1257:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && ! unmentioned_reg_p (note, SET_SRC (set))
1590176483.24:                                                     ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1265:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       rtx orig = SET_SRC (set);
1590176483.24:                                  ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1266:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       SET_SRC (set) = note;
1590176483.24:                       ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1275:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       SET_SRC (set) = orig;
1590176483.24:                       ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1461:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && reg_referenced_p (x, PATTERN (insn))
1590176483.24:                                   ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1462:35: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && !REGNO_REG_SET_P (DF_LR_IN (BLOCK_FOR_INSN (insn)),
1590176483.24:                                          ^~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./df.h:633:37: note: expanded from macro 'DF_LR_IN'
1590176483.24: #define DF_LR_IN(BB) (DF_LR_BB_INFO(BB)->in)
1590176483.24:                                     ^~
1590176483.24: ./df.h:620:47: note: expanded from macro 'DF_LR_BB_INFO'
1590176483.24: #define DF_LR_BB_INFO(BB) (df_lr_get_bb_info((BB)->index))
1590176483.24:                                               ^~
1590176483.24: ./basic-block.h:80:48: note: expanded from macro 'REGNO_REG_SET_P'
1590176483.24: #define REGNO_REG_SET_P(TO, REG) bitmap_bit_p (TO, REG)
1590176483.24:                                                ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1467:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           for (link = LOG_LINKS (insn); link; link = XEXP (link, 1))
1590176483.24:                                                      ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1493:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx src = SET_SRC (set);
1590176483.24:                     ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1519:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           num = num_sign_bit_copies (SET_SRC (set), GET_MODE (x));
1590176483.24:                                      ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1573:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     set = PATTERN (insn);
1590176483.24:           ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1577:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)
1590176483.24:                                ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176483.24: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176483.24: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176483.24:                                           ^~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1579:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx elt = XVECEXP (PATTERN (insn), 0, i);
1590176483.24:                              ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176483.24: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176483.24: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176483.24:                                       ^~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1602:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   rtx i3pat = PATTERN (i3);
1590176483.24:                               ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1614:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                    PREV_INSN (insn), i3)
1590176483.24:                                                    ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1661:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   src = SET_SRC (set), dest = SET_DEST (set);
1590176483.24:         ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1740:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     for (i = XVECLEN (PATTERN (i3), 0) - 1; i >= 0; i--)
1590176483.24:                       ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176483.24: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176483.24: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176483.24:                                           ^~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1745:29: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx reg = XEXP (XVECEXP (PATTERN (i3), 0, i), 0);
1590176483.24:                                    ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176483.24: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176483.24:                                       ^~~~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1769:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (succ != 0 && volatile_refs_p (PATTERN (succ)))
1590176483.24:                                         ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1772:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
1590176483.24:                ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1772:47: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
1590176483.24:                                               ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1773:50: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         if (INSN_P (p) && p != succ && volatile_refs_p (PATTERN (p)))
1590176483.24:                                                         ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1787:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
1590176483.24:            ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1787:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
1590176483.24:                                           ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1788:53: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     if (INSN_P (p) && p != succ && volatile_insn_p (PATTERN (p)))
1590176483.24:                                                     ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1882:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rtx src = SET_SRC (set);
1590176483.24:                 ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1933:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && reg_referenced_p (subdest, PATTERN (i3))
1590176483.24:                                         ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1977:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 && exact_log2 (INTVAL (XEXP (x, 1))) >= 0);
1590176483.24:                                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:1981:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             || contains_muldiv (XEXP (x, 1));
1590176483.24:                                 ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2013:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   set = single_set (insn);
1590176483.24:         ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2013:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   set = single_set (insn);
1590176483.24:         ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2016:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   src = SET_SRC (set);
1590176483.24:         ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2085:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   reg = XEXP (PATTERN (use), 0);
1590176483.24:               ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2098:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (p = PREV_INSN (use); info.mask && p != insn; p = PREV_INSN (p))
1590176483.24:            ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2098:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (p = PREV_INSN (use); info.mask && p != insn; p = PREV_INSN (p))
1590176483.24:                                                         ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2100:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       note_stores (PATTERN (p), likely_spilled_retval_1, &info);
1590176483.24:                    ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2321:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   next = NEXT_INSN (insn);
1590176483.24:          ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2325:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       next = NEXT_INSN (insn);
1590176483.24:              ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2332:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           loc = simplify_replace_rtx (INSN_VAR_LOCATION_LOC (insn), dest, src);
1590176483.24:                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.24:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.24:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.24: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.24:                                    ^             ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2332:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           loc = simplify_replace_rtx (INSN_VAR_LOCATION_LOC (insn), dest, src);
1590176483.24:                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.24:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.24:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176483.24: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176483.24:                                 ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.24: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.24:                                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2334:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (loc == INSN_VAR_LOCATION_LOC (insn))
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.24:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.24:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.24: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.24:                                    ^             ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2334:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (loc == INSN_VAR_LOCATION_LOC (insn))
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.24:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.24:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176483.24: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176483.24:                                 ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.24: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.24:                                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2336:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           INSN_VAR_LOCATION_LOC (insn) = loc;
1590176483.24:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.24:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.24:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.24: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.24:                                    ^             ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2336:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           INSN_VAR_LOCATION_LOC (insn) = loc;
1590176483.24:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.24:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.24:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176483.24: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176483.24:                                 ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.24: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.24:                                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2340:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               PREV_INSN (insn) = NEXT_INSN (insn) = NULL_RTX;
1590176483.24:                                  ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2340:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               PREV_INSN (insn) = NEXT_INSN (insn) = NULL_RTX;
1590176483.24:               ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2357:20: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   basic_block bb = BLOCK_FOR_INSN (insn);
1590176483.24:                    ^~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2479:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && REGNO (SET_SRC (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER
1590176483.24:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176483.24: #define REGNO(RTX) (rhs_regno(RTX))
1590176483.24:                               ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2479:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && REGNO (SET_SRC (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER
1590176483.24:                          ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176483.24: #define REGNO(RTX) (rhs_regno(RTX))
1590176483.24:                               ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2480:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && find_reg_note (i3, REG_DEAD, SET_SRC (PATTERN (i3)))
1590176483.24:                                       ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2480:48: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && find_reg_note (i3, REG_DEAD, SET_SRC (PATTERN (i3)))
1590176483.24:                                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2482:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && ! side_effects_p (SET_DEST (PATTERN (i3)))
1590176483.24:                                      ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2489:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && ! reg_overlap_mentioned_p (SET_SRC (PATTERN (i3)),
1590176483.24:                                     ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2489:46: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && ! reg_overlap_mentioned_p (SET_SRC (PATTERN (i3)),
1590176483.24:                                              ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2490:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     SET_DEST (PATTERN (i3)))
1590176483.24:                                               ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2493:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rtx p2 = PATTERN (i2);
1590176483.24:                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2508:44: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             && reg_overlap_mentioned_p (SET_DEST (PATTERN (i3)),
1590176483.24:                                                   ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2516:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && SET_DEST (XVECEXP (p2, 0, i)) == SET_SRC (PATTERN (i3)))
1590176483.24:                                                   ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2516:53: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && SET_DEST (XVECEXP (p2, 0, i)) == SET_SRC (PATTERN (i3)))
1590176483.24:                                                            ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2524:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               i2src = SET_DEST (PATTERN (i3));
1590176483.24:                                 ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2525:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               i2dest = SET_SRC (PATTERN (i3));
1590176483.24:                        ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2525:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               i2dest = SET_SRC (PATTERN (i3));
1590176483.24:                                 ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2532:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                      SET_DEST (PATTERN (i3)));
1590176483.24:                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2544:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && (temp = single_set (i2)) != 0
1590176483.24:                  ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2544:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && (temp = single_set (i2)) != 0
1590176483.24:                  ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2550:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && reg_subword_p (SET_DEST (PATTERN (i3)), SET_DEST (temp)))
1590176483.24:                                   ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2552:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rtx dest = SET_DEST (PATTERN (i3));
1590176483.24:                            ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2561:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               width = INTVAL (XEXP (dest, 1));
1590176483.24:                               ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2562:25: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               offset = INTVAL (XEXP (dest, 2));
1590176483.24:                                ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2596:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx inner = SET_SRC (PATTERN (i3));
1590176483.24:                       ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2596:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx inner = SET_SRC (PATTERN (i3));
1590176483.24:                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2597:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx outer = SET_SRC (temp);
1590176483.24:                       ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2607:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               ohi = CONST_DOUBLE_HIGH (outer);
1590176483.24:                     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176483.24: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176483.24:                              ^           ~
1590176483.24: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176483.24: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176483.24:                                      ^              ~
1590176483.24: ./rtl.h:317:5: note: array 'hwint' declared here
1590176483.24:     HOST_WIDE_INT hwint[1];
1590176483.24:     ^
1590176483.24: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176483.24: #   define HOST_WIDE_INT long
1590176483.24:                          ^
1590176483.24: combine.c:2618:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               ihi = CONST_DOUBLE_HIGH (inner);
1590176483.24:                     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176483.24: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176483.24:                              ^           ~
1590176483.24: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176483.24: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176483.24:                                      ^              ~
1590176483.24: ./rtl.h:317:5: note: array 'hwint' declared here
1590176483.24:     HOST_WIDE_INT hwint[1];
1590176483.24:     ^
1590176483.24: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176483.24: #   define HOST_WIDE_INT long
1590176483.24:                          ^
1590176483.24: combine.c:2674:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           newpat = PATTERN (i2);
1590176483.24:                    ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2697:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XVECLEN (PATTERN (i2), 0) >= 2
1590176483.24:                   ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176483.24: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176483.24: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176483.24:                                           ^~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2702:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx
1590176483.24:          ^                                             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2702:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx
1590176483.24:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2702:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx
1590176483.24:                                  ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 6 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2705:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_p (XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 0),
1590176483.24:                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2705:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_p (XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 0),
1590176483.24:                                               ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 6 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2706:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       SET_SRC (XVECEXP (PATTERN (i2), 0, 1))))
1590176483.24:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2706:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       SET_SRC (XVECEXP (PATTERN (i2), 0, 1))))
1590176483.24:                                         ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2708:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (i = XVECLEN (PATTERN (i2), 0) - 1; i >= 2; i--)
1590176483.24:                         ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176483.24: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176483.24: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176483.24:                                           ^~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2720:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                              BLOCK_FOR_INSN (i2), INSN_LOCATOR (i2),
1590176483.24:                              ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:252:64: note: expanded from macro 'gen_rtx_INSN'
1590176483.24:   gen_rtx_fmt_iuuBieie (INSN, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
1590176483.24:                                                                ^~~~
1590176483.24: ./genrtl.h:38:54: note: expanded from macro 'gen_rtx_fmt_iuuBieie'
1590176483.24:         gen_rtx_fmt_iuuBieie_stat (c, m, p0, p1, p2, p3, p4, p5, p6, p7 MEM_STAT_INFO)
1590176483.24:                                                      ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2720:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                              BLOCK_FOR_INSN (i2), INSN_LOCATOR (i2),
1590176483.24:                                                   ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176483.24: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176483.24:                            ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:252:72: note: expanded from macro 'gen_rtx_INSN'
1590176483.24:   gen_rtx_fmt_iuuBieie (INSN, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
1590176483.24:                                                                        ^~~~
1590176483.24: ./genrtl.h:38:58: note: expanded from macro 'gen_rtx_fmt_iuuBieie'
1590176483.24:         gen_rtx_fmt_iuuBieie_stat (c, m, p0, p1, p2, p3, p4, p5, p6, p7 MEM_STAT_INFO)
1590176483.24:                                                          ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2721:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                              XVECEXP (PATTERN (i2), 0, 1), -1, NULL_RTX);
1590176483.24:                                       ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176483.24: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176483.24:                                       ^~~~~
1590176483.24: ./genrtl.h:252:80: note: expanded from macro 'gen_rtx_INSN'
1590176483.24:   gen_rtx_fmt_iuuBieie (INSN, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
1590176483.24:                                                                                ^~~~
1590176483.24: ./genrtl.h:38:62: note: expanded from macro 'gen_rtx_fmt_iuuBieie'
1590176483.24:         gen_rtx_fmt_iuuBieie_stat (c, m, p0, p1, p2, p3, p4, p5, p6, p7 MEM_STAT_INFO)
1590176483.24:                                                              ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2723:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));
1590176483.24:                  ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:40: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                            ^~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2723:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));
1590176483.24:                                         ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176483.24: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176483.24:                                       ^~~~~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2724:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),
1590176483.24:                                 ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: combine.c:708:40: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                            ^~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2725:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                  SET_DEST (PATTERN (i1)));
1590176483.24:                            ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2751:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (! combinable_i3pat (i3, &PATTERN (i3), i2dest, i1dest,
1590176483.24:                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2824:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         i2pat = copy_rtx (PATTERN (i2));
1590176483.24:                           ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2832:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         i1pat = copy_rtx (PATTERN (i1));
1590176483.24:                           ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2857:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx
1590176483.24:          ^                             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2857:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx
1590176483.24:                ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2857:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx
1590176483.24:                         ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2858:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_p (XEXP (SET_SRC (PATTERN (i3)), 0), i2dest))
1590176483.24:                             ^~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2858:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_p (XEXP (SET_SRC (PATTERN (i3)), 0), i2dest))
1590176483.24:                                      ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2865:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       newpat = PATTERN (i3);
1590176483.24:                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:2952:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       newpat = subst (PATTERN (i3), i2dest, i2src, 0,
1590176483.24:                       ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3103:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && !side_effects_p (SET_SRC (set1)))
1590176483.24:                               ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3115:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && !side_effects_p (SET_SRC (set0)))
1590176483.24:                                    ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3210:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (m_split && NEXT_INSN (m_split) == NULL_RTX)
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3212:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           m_split = PATTERN (m_split);
1590176483.24:                     ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3217:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       else if (m_split && NEXT_INSN (NEXT_INSN (m_split)) == NULL_RTX
1590176483.24:                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3217:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       else if (m_split && NEXT_INSN (NEXT_INSN (m_split)) == NULL_RTX
1590176483.24:                                      ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                               ^~~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3219:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    || ! use_crosses_set_p (PATTERN (m_split), DF_INSN_LUID (i2))))
1590176483.24:                                            ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3222:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx newi3pat = PATTERN (NEXT_INSN (m_split));
1590176483.24:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3222:28: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx newi3pat = PATTERN (NEXT_INSN (m_split));
1590176483.24:                                   ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:771:29: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                               ^~~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3223:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           newi2pat = PATTERN (m_split);
1590176483.24:                      ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3225:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i3set = single_set (NEXT_INSN (m_split));
1590176483.24:                               ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1801:36: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                                         ^
1590176483.24: ./rtl.h:1803:39: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                       ^
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3225:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i3set = single_set (NEXT_INSN (m_split));
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3225:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i3set = single_set (NEXT_INSN (m_split));
1590176483.24:                               ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:771:29: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                               ^~~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3225:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i3set = single_set (NEXT_INSN (m_split));
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3225:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i3set = single_set (NEXT_INSN (m_split));
1590176483.24:                               ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:771:29: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                               ^~~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3226:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i2set = single_set (m_split);
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3226:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           i2set = single_set (m_split);
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3314:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (*split, 1)) > 0
1590176483.24:                          ^             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3315:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (i = exact_log2 (INTVAL (XEXP (*split, 1)))) >= 0)
1590176483.24:                                           ^             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3346:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && ! side_effects_p (SET_SRC (newpat)))
1590176483.24:                                    ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3348:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx setsrc = SET_SRC (newpat);
1590176483.24:                            ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3352:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx src_op1 = XEXP (setsrc, 1);
1590176483.24:                             ^             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3371:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   rtx q = XEXP (XEXP (src_op0, 0), 1);
1590176483.24:                           ^                        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3372:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   rtx r = XEXP (src_op0, 1);
1590176483.24:                           ^              ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3452:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && rtx_equal_p (SET_SRC (XVECEXP (newpat, 0, 1)),
1590176483.24:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3453:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                            XEXP (SET_SRC (XVECEXP (newpat, 0, 0)), 0))
1590176483.24:                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3454:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && ! use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),
1590176483.24:                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3478:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                          SET_SRC (XVECEXP (newpat, 0, 1)))
1590176483.24:                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3512:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && ! use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),
1590176483.24:                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3518:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && ! (contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 0)))
1590176483.24:                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3519:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                  && contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 1))))
1590176483.24:                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3565:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       other_pat = PATTERN (undobuf.other_insn);
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3665:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       PATTERN (i3) = newpat;
1590176483.24:       ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3676:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       PATTERN (undobuf.other_insn) = other_pat;
1590176483.24:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3681:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (note = REG_NOTES (undobuf.other_insn); note; note = next)
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3683:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           next = XEXP (note, 1);
1590176483.24:                  ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3686:40: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && ! reg_set_p (XEXP (note, 0), PATTERN (undobuf.other_insn)))
1590176483.24:                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3702:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       PATTERN (i3) = newpat;
1590176483.24:       ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3720:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (insn = NEXT_INSN (i3);
1590176483.24:                   ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3723:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            insn = NEXT_INSN (insn))
1590176483.24:                   ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3725:52: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (INSN_P (insn) && reg_referenced_p (ni2dest, PATTERN (insn)))
1590176483.24:                                                           ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3728:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    link = XEXP (link, 1))
1590176483.24:                           ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3756:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     i3notes = REG_NOTES (i3), i3links = LOG_LINKS (i3);
1590176483.24:               ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3757:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     i2notes = REG_NOTES (i2), i2links = LOG_LINKS (i2);
1590176483.24:               ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3759:17: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       i1notes = REG_NOTES (i1), i1links = LOG_LINKS (i1);
1590176483.24:                 ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3771:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       reset_used_flags (PATTERN (undobuf.other_insn));
1590176483.24:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3779:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       reset_used_flags (PATTERN (undobuf.other_insn));
1590176483.24:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3781:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     INSN_CODE (i3) = insn_code_number;
1590176483.24:     ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.24: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3782:5: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     PATTERN (i3) = newpat;
1590176483.24:     ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3784:24: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     if (CALL_P (i3) && CALL_INSN_FUNCTION_USAGE (i3))
1590176483.24:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176483.24: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176483.24:                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3786:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         rtx call_usage = CALL_INSN_FUNCTION_USAGE (i3);
1590176483.24:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176483.24: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176483.24:                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3797:2: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         CALL_INSN_FUNCTION_USAGE (i3) = call_usage;
1590176483.24:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176483.24: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176483.24:                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3801:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       INSN_CODE (undobuf.other_insn) = other_code_number;
1590176483.24:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.24: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3814:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         for (i = 0; i < XVECLEN (PATTERN (i2), 0); i++)
1590176483.24:                                  ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176483.24: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176483.24: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176483.24:                                           ^~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3818:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && SET_DEST (XVECEXP (PATTERN (i2), 0, i)) != i2dest
1590176483.24:                                     ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3820:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                   SET_DEST (XVECEXP (PATTERN (i2), 0, i))))
1590176483.24:                                                      ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3821:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             for (temp = NEXT_INSN (i2);
1590176483.24:                         ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3824:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                  temp = NEXT_INSN (temp))
1590176483.24:                         ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3826:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 for (link = LOG_LINKS (temp); link; link = XEXP (link, 1))
1590176483.24:                                                            ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3833:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             while (XEXP (link, 1))
1590176483.24:                    ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3834:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               link = XEXP (link, 1);
1590176483.24:                      ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3835:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             XEXP (link, 1) = i2notes;
1590176483.24:             ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3843:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     REG_NOTES (i3) = 0;
1590176483.24:     ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3845:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     REG_NOTES (i2) = 0;
1590176483.24:     ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3851:2: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         INSN_CODE (i2) = i2_code_number;
1590176483.24:         ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.24: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.24: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3852:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         PATTERN (i2) = newi2pat;
1590176483.24:         ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3864:2: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         REG_NOTES (i1) = 0;
1590176483.24:         ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3967:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         for (link = LOG_LINKS (i3); link; link = XEXP (link, 1))
1590176483.24:                                                  ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3968:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if ((set = single_set (XEXP (link, 0))) != 0
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3968:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if ((set = single_set (XEXP (link, 0))) != 0
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3970:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             i2_insn = XEXP (link, 0), i2_val = SET_SRC (set);
1590176483.24:                                                ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3990:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         for (link = LOG_LINKS (i3); link; link = XEXP (link, 1))
1590176483.24:                                                  ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3991:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if ((set = single_set (XEXP (link, 0))) != 0
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3991:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if ((set = single_set (XEXP (link, 0))) != 0
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:3993:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             i1_insn = XEXP (link, 0), i1_val = SET_SRC (set);
1590176483.24:                                                ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4021:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (i1 && !(NOTE_P(i1) && (NOTE_KIND (i1) == NOTE_INSN_DELETED)))
1590176483.24:                              ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176483.24: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176483.24:                         ^            ~
1590176483.24: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176483.24: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4031:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (i2 && !(NOTE_P(i2) && (NOTE_KIND (i2) == NOTE_INSN_DELETED)))
1590176483.24:                              ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176483.24: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176483.24:                         ^            ~
1590176483.24: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176483.24: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4041:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (i3 && !(NOTE_P(i3) && (NOTE_KIND (i3) == NOTE_INSN_DELETED)))
1590176483.24:                              ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176483.24: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176483.24:                         ^            ~
1590176483.24: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176483.24: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4057:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       mark_jump_label (PATTERN (i3), i3, 0);
1590176483.24:                        ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4072:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && SET_SRC (newpat) == pc_rtx
1590176483.24:          ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4195:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                             MEM_ADDR_SPACE (x)))
1590176483.24:                                             ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.24: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176483.24:                              ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.24: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.24:                        ^               ~
1590176483.24: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.24: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.24:                             ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4195:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                             MEM_ADDR_SPACE (x)))
1590176483.24:                                             ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.24:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176483.24:                                                     ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.24: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.24:                        ^               ~
1590176483.24: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.24: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.24:                             ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4208:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && NEXT_INSN (seq) != NULL_RTX
1590176483.24:                  ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4209:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && NEXT_INSN (NEXT_INSN (seq)) == NULL_RTX
1590176483.24:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4209:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && NEXT_INSN (NEXT_INSN (seq)) == NULL_RTX
1590176483.24:                             ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                               ^~~~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4212:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && SET_DEST (PATTERN (seq)) == reg
1590176483.24:                            ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4214:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     SET_SRC (PATTERN (seq)))
1590176483.24:                                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4214:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     SET_SRC (PATTERN (seq)))
1590176483.24:                                              ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4217:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && SET_DEST (PATTERN (NEXT_INSN (seq))) == reg
1590176483.24:                            ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4217:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && SET_DEST (PATTERN (NEXT_INSN (seq))) == reg
1590176483.24:                                     ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176483.24: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176483.24:                              ^~~
1590176483.24: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176483.24: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176483.24:                                                   ^~~
1590176483.24: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176483.24: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4220:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                     MEM_ADDR_SPACE (x)))
1590176483.24:                     ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.24: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176483.24:                              ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.24: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.24:                        ^               ~
1590176483.24: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.24: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.24:                             ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4219:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    (GET_MODE (x), SET_SRC (PATTERN (NEXT_INSN (seq))),
1590176483.24:                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4219:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    (GET_MODE (x), SET_SRC (PATTERN (NEXT_INSN (seq))),
1590176483.24:                                            ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4219:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    (GET_MODE (x), SET_SRC (PATTERN (NEXT_INSN (seq))),
1590176483.24:                                                     ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4220:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                     MEM_ADDR_SPACE (x)))
1590176483.24:                     ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.24:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176483.24:                                                     ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.24: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.24:                        ^               ~
1590176483.24: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.24: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.24:                             ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4222:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx src1 = SET_SRC (PATTERN (seq));
1590176483.24:                          ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4222:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx src1 = SET_SRC (PATTERN (seq));
1590176483.24:                                   ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4223:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx src2 = SET_SRC (PATTERN (NEXT_INSN (seq)));
1590176483.24:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4223:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx src2 = SET_SRC (PATTERN (NEXT_INSN (seq)));
1590176483.24:                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4223:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx src2 = SET_SRC (PATTERN (NEXT_INSN (seq)));
1590176483.24:                                            ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4260:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                             MEM_ADDR_SPACE (x))
1590176483.24:                                             ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.24: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176483.24:                              ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.24: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.24:                        ^               ~
1590176483.24: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.24: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.24:                             ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4260:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                             MEM_ADDR_SPACE (x))
1590176483.24:                                             ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.24:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176483.24:                                                     ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.24: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.24:                        ^               ~
1590176483.24: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.24: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.24:                             ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4301:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && ((INTVAL (XEXP (SET_DEST (x), 1))
1590176483.24:                        ^                   ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4302:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                + INTVAL (XEXP (SET_DEST (x), 2)))
1590176483.24:                          ^                   ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4306:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           HOST_WIDE_INT pos = INTVAL (XEXP (SET_DEST (x), 2));
1590176483.24:                                       ^                   ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4307:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           unsigned HOST_WIDE_INT len = INTVAL (XEXP (SET_DEST (x), 1));
1590176483.24:                                                ^                   ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4308:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           unsigned HOST_WIDE_INT src = INTVAL (SET_SRC (x));
1590176483.24:                                                ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4356:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (pos = exact_log2 (INTVAL (XEXP (SET_SRC (x), 1)))) >= 7
1590176483.24:                                             ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4356:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (pos = exact_log2 (INTVAL (XEXP (SET_SRC (x), 1)))) >= 7
1590176483.24:                                                   ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4361:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (*split, 1) == const0_rtx)
1590176483.24:                  ^             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4364:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                 XEXP (SET_SRC (x), 0),
1590176483.24:                                                       ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4398:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           inner = XEXP (SET_SRC (x), 0);
1590176483.24:                         ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4417:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               inner = XEXP (SET_SRC (x), 0);
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4418:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               len = INTVAL (XEXP (SET_SRC (x), 1));
1590176483.24:                             ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4418:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               len = INTVAL (XEXP (SET_SRC (x), 1));
1590176483.24:                                   ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4419:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               pos = INTVAL (XEXP (SET_SRC (x), 2));
1590176483.24:                             ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4419:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               pos = INTVAL (XEXP (SET_SRC (x), 2));
1590176483.24:                                   ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4487:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && ! register_operand (XEXP (SET_SRC (x), 0), VOIDmode))
1590176483.24:                                        ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4504:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                               XEXP (XEXP (x, 1), 0))));
1590176483.24:                                                     ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./genrtl.h:358:32: note: expanded from macro 'gen_rtx_NOT'
1590176483.24:   gen_rtx_fmt_e (NOT, (MODE), (ARG0))
1590176483.24:                                ^~~~
1590176483.24: ./genrtl.h:30:35: note: expanded from macro 'gen_rtx_fmt_e'
1590176483.24:         gen_rtx_fmt_e_stat (c, m, p0 MEM_STAT_INFO)
1590176483.24:                                   ^~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4514:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           SUBST (XEXP (x, 0), XEXP (x, 1));
1590176483.24:                               ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4528:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       split = find_split_point (&XEXP (x, 2), insn);
1590176483.24:                                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4798:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                        SUBREG_BYTE (x));
1590176483.24:                                        ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4869:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))
1590176483.24:                                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4872:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       SUBST (XEXP (x, 0), XEXP (x, 1));
1590176483.24:                           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:4996:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                               XEXP (x, 0), XEXP (x, 1));
1590176483.24:                                                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5001:66: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       temp = simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));
1590176483.24:                                                                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5006:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                          XEXP (x, 1), XEXP (x, 2));
1590176483.24:                                          ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5006:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                          XEXP (x, 1), XEXP (x, 2));
1590176483.24:                                                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5041:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx inner_op0 = XEXP (XEXP (x, 0), 1);
1590176483.24:                           ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5042:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx inner_op1 = XEXP (x, 1);
1590176483.24:                           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5062:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               other = XEXP (XEXP (x, 0), 1);
1590176483.24:                       ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5065:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                  XEXP (x, 1));
1590176483.24:                                                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5089:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && subreg_lowpart_offset (mode, op0_mode) == SUBREG_BYTE (x)
1590176483.24:                                                        ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5102:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                 SUBREG_BYTE (x));
1590176483.24:                                 ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5129:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (temp, 1)) == GET_MODE_BITSIZE (mode) - 1)
1590176483.24:                      ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5131:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                      INTVAL (XEXP (temp, 1)));
1590176483.24:                                              ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5215:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) == -INTVAL (XEXP (XEXP (x, 0), 1))
1590176483.24:                                               ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5215:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) == -INTVAL (XEXP (XEXP (x, 0), 1))
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5216:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && ((i = exact_log2 (INTVAL (XEXP (XEXP (x, 0), 1)))) >= 0
1590176483.24:                                        ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5217:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               || (i = exact_log2 (INTVAL (XEXP (x, 1)))) >= 0)
1590176483.24:                                           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5221:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && (INTVAL (XEXP (XEXP (XEXP (x, 0), 0), 1))
1590176483.24:                            ^                            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5237:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (XEXP (x, 1) == constm1_rtx
1590176483.24:           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5255:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               & nonzero_bits (XEXP (x, 1), mode)) == 0)
1590176483.24:                               ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5258:59: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx tor = simplify_gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));
1590176483.24:                                                                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5274:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && exact_log2 (-INTVAL (XEXP (XEXP (x, 1), 1))) >= 0
1590176483.24:                                   ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5274:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && exact_log2 (-INTVAL (XEXP (XEXP (x, 1), 1))) >= 0
1590176483.24:                                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5275:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && rtx_equal_p (XEXP (XEXP (x, 1), 0), XEXP (x, 0)))
1590176483.24:                                 ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5277:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                        -INTVAL (XEXP (XEXP (x, 1), 1)) - 1);
1590176483.24:                                                 ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5277:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                        -INTVAL (XEXP (XEXP (x, 1), 1)) - 1);
1590176483.24:                                                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5298:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                XEXP (x, 1));
1590176483.24:                                                ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5300:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             return simplify_gen_binary (DIV, mode, tem, XEXP (XEXP (x, 0), 1));
1590176483.24:                                                         ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5308:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (i = exact_log2 (INTVAL (XEXP (x, 1)))) >= 0
1590176483.24:                                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5331:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx op1 = XEXP (x, 1);
1590176483.24:                     ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5335:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             op1 = XEXP (op0, 1), op0 = XEXP (op0, 0);
1590176483.24:                   ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5458:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               if (GET_CODE (x) == AND && XEXP (x, 1) == const_true_rtx)
1590176483.24:                                          ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5503:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                      INTVAL (XEXP (x, 1)));
1590176483.24:                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5528:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   rtx true_rtx = XEXP (x, 1);
1590176483.24:                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5529:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   rtx false_rtx = XEXP (x, 2);
1590176483.24:                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5540:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     XEXP (cond, 0), XEXP (cond, 1));
1590176483.24:                                                     ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5559:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rtx true_val = XEXP (cond, 1);
1590176483.24:                      ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5603:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       SUBST (XEXP (x, 2), swapped ? true_rtx : false_rtx);
1590176483.24:              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:40: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                            ^~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5605:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       true_rtx = XEXP (x, 1);
1590176483.24:                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5606:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       false_rtx = XEXP (x, 2);
1590176483.24:                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5631:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       SUBST (XEXP (x, 2), true_rtx);
1590176483.24:              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:40: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                            ^~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5650:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_p (XEXP (cond, 1), true_rtx))
1590176483.24:                       ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5655:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && rtx_equal_p (XEXP (cond, 1), false_rtx))
1590176483.24:                            ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5662:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (cond, 1) == const0_rtx
1590176483.24:          ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5687:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_p (XEXP (cond, 1), false_rtx)
1590176483.24:                       ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5722:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rtx cond_op1 = XEXP (cond, 1);
1590176483.24:                      ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5732:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         c1 = XEXP (t, 1), op = GET_CODE (t), z = f;
1590176483.24:              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5738:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && rtx_equal_p (XEXP (t, 1), f))
1590176483.24:                                ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5756:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           c1 = XEXP (XEXP (t, 0), 1); z = f; op = GET_CODE (XEXP (t, 0));
1590176483.24:                ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5765:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && subreg_lowpart_p (XEXP (XEXP (t, 0), 1))
1590176483.24:                                     ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5766:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && rtx_equal_p (SUBREG_REG (XEXP (XEXP (t, 0), 1)), f)
1590176483.24:                                            ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1111:32: note: expanded from macro 'SUBREG_REG'
1590176483.24: #define SUBREG_REG(RTX) XCEXP (RTX, 0, SUBREG)
1590176483.24:                                ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5792:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           c1 = XEXP (XEXP (t, 0), 1); z = f; op = GET_CODE (XEXP (t, 0));
1590176483.24:                ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5802:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && subreg_lowpart_p (XEXP (XEXP (t, 0), 1))
1590176483.24:                                     ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5803:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && rtx_equal_p (SUBREG_REG (XEXP (XEXP (t, 0), 1)), f)
1590176483.24:                                            ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1111:32: note: expanded from macro 'SUBREG_REG'
1590176483.24: #define SUBREG_REG(RTX) XCEXP (RTX, 0, SUBREG)
1590176483.24:                                ^~~
1590176483.24: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                             ^~~
1590176483.24: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5836:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (true_code == NE && XEXP (cond, 1) == const0_rtx
1590176483.24:                          ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5848:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   if (true_code == NE && XEXP (cond, 1) == const0_rtx
1590176483.24:                          ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5864:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   rtx src = SET_SRC (x);
1590176483.24:             ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5904:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         op0 = XEXP (src, 0), op1 = XEXP (src, 1);
1590176483.24:                                    ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5916:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           op1 = XEXP (tmp, 1);
1590176483.24:                 ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5920:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx pat = PATTERN (other_insn);
1590176483.24:                     ^~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:5927:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx new_rtx = simplify_rtx (SET_SRC (pat));
1590176483.24:                                           ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6004:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx pat = PATTERN (other_insn), note = 0;
1590176483.24:                         ^~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6026:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           src = SET_SRC (x);
1590176483.24:                 ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6031:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           src = SET_SRC (x);
1590176483.24:                 ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6034:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       else if (XEXP (src, 0) != op0 || XEXP (src, 1) != op1)
1590176483.24:                                        ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6037:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           src = SET_SRC (x);
1590176483.24:                 ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6085:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       src = SET_SRC (x), dest = SET_DEST (x);
1590176483.24:             ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6143:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (XEXP (src, 0), 1) == const0_rtx
1590176483.24:          ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6154:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       ? XEXP (src, 1) : XEXP (src, 2));
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6154:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       ? XEXP (src, 1) : XEXP (src, 2));
1590176483.24:                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6156:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    ? XEXP (src, 2) : XEXP (src, 1));
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6156:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    ? XEXP (src, 2) : XEXP (src, 1));
1590176483.24:                                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6161:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         term1 = false_rtx, true_rtx = XEXP (true_rtx, 1), false_rtx = const0_rtx;
1590176483.24:                                       ^               ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6163:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && rtx_equal_p (XEXP (true_rtx, 1), false_rtx))
1590176483.24:                                ^               ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6167:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         term1 = true_rtx, false_rtx = XEXP (false_rtx, 1), true_rtx = const0_rtx;
1590176483.24:                                       ^                ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6169:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && rtx_equal_p (XEXP (false_rtx, 1), true_rtx))
1590176483.24:                                ^                ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6186:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       src = SET_SRC (x);
1590176483.24:             ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6208:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   rtx op1 = XEXP (x, 1);
1590176483.24:             ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6225:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           op1 = XEXP (x, 1);
1590176483.24:                 ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6356:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       len = INTVAL (XEXP (x, 1));
1590176483.24:                     ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6357:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       pos = INTVAL (XEXP (x, 2));
1590176483.24:                     ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6520:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           len = INTVAL (XEXP (SET_DEST (x), 1));
1590176483.24:                         ^                   ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6521:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           pos = XEXP (SET_DEST (x), 2);
1590176483.24:                 ^                   ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6561:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                             SET_SRC (x)));
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:280:41: note: expanded from macro 'gen_rtx_SET'
1590176483.24:   gen_rtx_fmt_ee (SET, (MODE), (ARG0), (ARG1))
1590176483.24:                                         ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6608:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                       gen_lowpart (compute_mode, SET_SRC (x)),
1590176483.24:                                                                  ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6680:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                              0, 0, len - INTVAL (XEXP (inner, 1)),
1590176483.24:                                                  ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:6683:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         return gen_rtx_ASHIFT (mode, new_rtx, XEXP (inner, 1));
1590176483.24:                                               ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:360:44: note: expanded from macro 'gen_rtx_ASHIFT'
1590176483.24:   gen_rtx_fmt_ee (ASHIFT, (MODE), (ARG0), (ARG1))
1590176483.24:                                            ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7064:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) >= count)
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7066:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                      INTVAL (XEXP (x, 1)) - count);
1590176483.24:                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7079:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (INTVAL (XEXP (x, 1)) & ((((HOST_WIDE_INT) 1 << count)) - 1)) == 0
1590176483.24:                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7082:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     GEN_INT (INTVAL (XEXP (x, 1)) >> count));
1590176483.24:                                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7130:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   && XEXP (x, 1) == const0_rtx) ? COMPARE
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7142:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7143:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) >= 0)
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7148:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                        << INTVAL (XEXP (x, 1))));
1590176483.24:                                                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./genrtl.h:334:42: note: expanded from macro 'gen_rtx_MULT'
1590176483.24:   gen_rtx_fmt_ee (MULT, (MODE), (ARG0), (ARG1))
1590176483.24:                                          ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7161:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
1590176483.24:                                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7164:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           new_rtx = make_extraction (mode, new_rtx, 0, XEXP (XEXP (x, 0), 1), i, 1,
1590176483.24:                                                        ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7172:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
1590176483.24:                                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7177:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                  XEXP (SUBREG_REG (XEXP (x, 0)), 1), i, 1,
1590176483.24:                                  ^                               ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7185:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
1590176483.24:                                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7190:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                              XEXP (x, 1)),
1590176483.24:                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:352:41: note: expanded from macro 'gen_rtx_AND'
1590176483.24:   gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
1590176483.24:                                         ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                    ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7191:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                 gen_rtx_AND (mode, XEXP (XEXP (x, 0), 1),
1590176483.24:                                                    ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:352:33: note: expanded from macro 'gen_rtx_AND'
1590176483.24:   gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
1590176483.24:                                 ^~~~
1590176483.24: ./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                    ^~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7192:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                              XEXP (x, 1)));
1590176483.24:                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:352:41: note: expanded from macro 'gen_rtx_AND'
1590176483.24:   gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
1590176483.24:                                         ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7201:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0
1590176483.24:                                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7202:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && i <= INTVAL (XEXP (XEXP (x, 0), 1)))
1590176483.24:                                ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7207:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                   - INTVAL (XEXP (XEXP (x, 0), 1))),
1590176483.24:                                             ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7218:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && INTVAL (XEXP (XEXP (x, 0), 1)) >= 0
1590176483.24:                           ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7219:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && INTVAL (XEXP (XEXP (x, 0), 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                           ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7224:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           mask >>= INTVAL (XEXP (XEXP (x, 0), 1));
1590176483.24:                            ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7225:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if ((INTVAL (XEXP (x, 1)) & ~mask) == 0)
1590176483.24:                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7230:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                      XEXP (XEXP (x, 0), 1)));
1590176483.24:                                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:364:46: note: expanded from macro 'gen_rtx_ASHIFTRT'
1590176483.24:   gen_rtx_fmt_ee (ASHIFTRT, (MODE), (ARG0), (ARG1))
1590176483.24:                                              ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7237:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       else if ((i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
1590176483.24:                                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7246:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                && (i = exact_log2 (INTVAL (XEXP (x, 1)))) >= 0)
1590176483.24:                                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7265:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                   XEXP (x, 1));
1590176483.24:                                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:364:46: note: expanded from macro 'gen_rtx_ASHIFTRT'
1590176483.24:   gen_rtx_fmt_ee (ASHIFTRT, (MODE), (ARG0), (ARG1))
1590176483.24:                                              ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7273:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rhs = XEXP (x, 1);
1590176483.24:             ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7280:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (rhs) >= INTVAL (XEXP (lhs, 1))
1590176483.24:                                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7285:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                  INTVAL (rhs) - INTVAL (XEXP (lhs, 1)),
1590176483.24:                                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7318:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                           SUBREG_BYTE (x));
1590176483.24:                                           ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7377:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))
1590176483.24:                                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7380:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       SUBST (XEXP (x, 0), XEXP (x, 1));
1590176483.24:                           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7436:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       op1 = canon_reg_for_combine (XEXP (x, 1), reg);
1590176483.24:                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7437:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
1590176483.24:                                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7444:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       op1 = canon_reg_for_combine (XEXP (x, 1), reg);
1590176483.24:                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7445:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
1590176483.24:                                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7453:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       op1 = canon_reg_for_combine (XEXP (x, 1), reg);
1590176483.24:                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7454:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       op2 = canon_reg_for_combine (XEXP (x, 2), reg);
1590176483.24:                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7455:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1) || op2 != XEXP (x, 2))
1590176483.24:                                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7455:62: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1) || op2 != XEXP (x, 2))
1590176483.24:                                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7587:42: warning: shift count >= width of type [-Wshift-count-overflow]
1590176483.24:   if (mask & ((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT - 1)))
1590176483.24:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: combine.c:7662:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                       mask & INTVAL (XEXP (x, 1)));
1590176483.24:                                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7669:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && ((INTVAL (XEXP (x, 1)) & GET_MODE_MASK (GET_MODE (x)))
1590176483.24:                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7682:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               HOST_WIDE_INT cval = (INTVAL (XEXP (x, 1))
1590176483.24:                                             ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7725:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             && (INTVAL (XEXP (x, 1)) & ~smask) != 0)
1590176483.24:                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7727:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                (INTVAL (XEXP (x, 1)) & smask)),
1590176483.24:                                                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7748:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           x = simplify_gen_unary (NEG, GET_MODE (x), XEXP (x, 1),
1590176483.24:                                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7760:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                   XEXP (x, 1), GET_MODE (x));
1590176483.24:                                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7776:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (XEXP (x, 0), 1)) >= 0
1590176483.24:                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7777:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (XEXP (x, 0), 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7780:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                + floor_log2 (INTVAL (XEXP (x, 1))))
1590176483.24:                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7779:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && ((INTVAL (XEXP (XEXP (x, 0), 1))
1590176483.24:                        ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7782:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (INTVAL (XEXP (x, 1))
1590176483.24:                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7785:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           temp = GEN_INT ((INTVAL (XEXP (x, 1)) & mask)
1590176483.24:                                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7786:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                           << INTVAL (XEXP (XEXP (x, 0), 1)));
1590176483.24:                                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7790:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                    XEXP (XEXP (x, 0), 1));
1590176483.24:                                    ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7799:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       op1 = force_to_mode (XEXP (x, 1), mode, mask, next_select);
1590176483.24:                            ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7813:67: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (op_mode != GET_MODE (x) || op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
1590176483.24:                                                                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7825:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:              && INTVAL (XEXP (x, 1)) >= 0
1590176483.24:                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7826:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:              && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (mode))
1590176483.24:                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7828:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 && (nonzero_bits (XEXP (x, 1), GET_MODE (XEXP (x, 1)))
1590176483.24:                                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7836:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) >= 0
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7837:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (op_mode)
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7839:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         mask >>= INTVAL (XEXP (x, 1));
1590176483.24:                          ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7848:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         x = simplify_gen_binary (code, op_mode, op0, XEXP (x, 1));
1590176483.24:                                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7857:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7864:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           inner_mask = mask << INTVAL (XEXP (x, 1));
1590176483.24:                                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7875:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             x = simplify_gen_binary (LSHIFTRT, op_mode, inner, XEXP (x, 1));
1590176483.24:                                                                ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7886:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && ((INTVAL (XEXP (x, 1))
1590176483.24:                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7892:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && ((INTVAL (XEXP (x, 1)) + exact_log2 (mask + 1))
1590176483.24:                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7918:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) >= 0
1590176483.24:                                                ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7919:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT)
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7936:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               if (GET_MODE_BITSIZE (GET_MODE (x)) - INTVAL (XEXP (x, 1))
1590176483.24:                                                             ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7938:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 nonzero >>= INTVAL (XEXP (x, 1))
1590176483.24:                                     ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7945:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               nonzero >>= INTVAL (XEXP (x, 1));
1590176483.24:                                   ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7951:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                         XEXP (x, 0), INTVAL (XEXP (x, 1)));
1590176483.24:                                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7971:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                  XEXP (x, 0), XEXP (x, 1));
1590176483.24:                                               ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7981:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) >= 0
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7982:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (INTVAL (XEXP (x, 1))
1590176483.24:                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7985:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (XEXP (x, 0), 1) == XEXP (x, 1))
1590176483.24:              ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7985:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (XEXP (x, 0), 1) == XEXP (x, 1))
1590176483.24:                                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:7998:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (x, 1)) >= 0)
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8002:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                             XEXP (x, 1));
1590176483.24:                                             ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8029:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (XEXP (x, 0), 1)) >= 0
1590176483.24:                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8030:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (INTVAL (XEXP (XEXP (x, 0), 1)) + floor_log2 (mask)
1590176483.24:                       ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8032:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (XEXP (x, 0), 1)) < HOST_BITS_PER_WIDE_INT)
1590176483.24:                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8034:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           temp = gen_int_mode (mask << INTVAL (XEXP (XEXP (x, 0), 1)),
1590176483.24:                                                ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8039:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                    temp, XEXP (XEXP (x, 0), 1));
1590176483.24:                                          ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8060:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if ((mask & ~STORE_FLAG_VALUE) == 0 && XEXP (x, 1) == const0_rtx
1590176483.24:                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8075:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                       force_to_mode (XEXP (x, 1), mode,
1590176483.24:                                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8079:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                       force_to_mode (XEXP (x, 2), mode,
1590176483.24:                                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:48: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                                    ^~~~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8077:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       SUBST (XEXP (x, 2),
1590176483.24:              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: combine.c:708:40: note: expanded from macro 'SUBST'
1590176483.24: #define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
1590176483.24:                                            ^~~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8108:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && XEXP (x, 1) == const0_rtx)
1590176483.24:          ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8137:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       cond1 = if_then_else_cond (XEXP (x, 1), &true1, &false1);
1590176483.24:                                  ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8175:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx op0 = XEXP (XEXP (x, 0), 1);
1590176483.24:                     ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8176:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx op1 = XEXP (XEXP (x, 1), 1);
1590176483.24:                     ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8176:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           rtx op1 = XEXP (XEXP (x, 1), 1);
1590176483.24:                           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8179:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           cond1 = XEXP (XEXP (x, 1), 0);
1590176483.24:                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8185:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
1590176483.24:                                    ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8185:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
1590176483.24:                                                     ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8188:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 1))
1590176483.24:                                                        ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8189:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 0))))
1590176483.24:                                       ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8210:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           cond1 = XEXP (XEXP (x, 1), 0);
1590176483.24:                         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                                      ^~~
1590176483.24: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8216:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
1590176483.24:                                    ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8216:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
1590176483.24:                                                     ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8219:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 1))
1590176483.24:                                                        ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8220:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 0))))
1590176483.24:                                       ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8234:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       *ptrue = XEXP (x, 1), *pfalse = XEXP (x, 2);
1590176483.24:                ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8234:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       *ptrue = XEXP (x, 1), *pfalse = XEXP (x, 2);
1590176483.24:                                       ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8235:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (GET_CODE (cond0) == NE && XEXP (cond0, 1) == const0_rtx)
1590176483.24:                                     ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8237:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       else if (GET_CODE (cond0) == EQ && XEXP (cond0, 1) == const0_rtx)
1590176483.24:                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8239:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           *ptrue = XEXP (x, 2), *pfalse = XEXP (x, 1);
1590176483.24:                    ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8239:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           *ptrue = XEXP (x, 2), *pfalse = XEXP (x, 1);
1590176483.24:                                           ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8253:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                    GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));
1590176483.24:                                                               ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8255:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));
1590176483.24:                                                                ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8356:58: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       if (rtx_equal_p (XEXP (x, 0), reg) && rtx_equal_p (XEXP (x, 1), val))
1590176483.24:                                                          ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8386:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   return unsignedp ? x : XEXP (x, 1);
1590176483.24:                                          ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8390:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   return unsignedp ? XEXP (x, 1) : x;
1590176483.24:                                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8409:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                  inner_mode, SUBREG_BYTE (x));
1590176483.24:                                              ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8502:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   rtx src = SET_SRC (x);
1590176483.24:             ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8519:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_for_field_assignment_p (dest, XEXP (src, 1)))
1590176483.24:                                                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8521:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),
1590176483.24:                                                    ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8535:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_for_field_assignment_p (dest, XEXP (src, 1)))
1590176483.24:                                                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8538:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                 XEXP (SUBREG_REG (XEXP (src, 0)), 1),
1590176483.24:                                 ^                                 ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8549:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && rtx_equal_for_field_assignment_p (dest, XEXP (src, 1)))
1590176483.24:                                                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8551:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),
1590176483.24:                                                    ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8566:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       HOST_WIDE_INT width = INTVAL (XEXP (dest, 1));
1590176483.24:                                     ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8567:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       unsigned HOST_WIDE_INT and_mask = INTVAL (XEXP (src, 1));
1590176483.24:                                                 ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8601:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   lhs = expand_compound_operation (XEXP (src, 1));
1590176483.24:                                    ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8606:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     c1 = INTVAL (XEXP (rhs, 1)), other = lhs;
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8610:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     c1 = INTVAL (XEXP (lhs, 1)), other = rhs;
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8646:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       && INTVAL (XEXP (assign, 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                  ^             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8650:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           == ((unsigned HOST_WIDE_INT) 1 << INTVAL (XEXP (assign, 1))) - 1))
1590176483.24:                                                     ^             ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8679:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   rhs = XEXP (x, 1);
1590176483.24:         ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8727:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           || SUBREG_BYTE (lhs) != SUBREG_BYTE (rhs)
1590176483.24:              ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8727:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           || SUBREG_BYTE (lhs) != SUBREG_BYTE (rhs)
1590176483.24:                                   ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.24: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.24: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8756:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     other = XEXP (lhs, 0), lhs = XEXP (lhs, 1), rhs = XEXP (rhs, 1);
1590176483.24:                                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8756:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     other = XEXP (lhs, 0), lhs = XEXP (lhs, 1), rhs = XEXP (rhs, 1);
1590176483.24:                                                       ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8758:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && rtx_equal_p (XEXP (lhs, 0), XEXP (rhs, 1)))
1590176483.24:                                           ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8759:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     other = XEXP (lhs, 0), lhs = XEXP (lhs, 1), rhs = XEXP (rhs, 0);
1590176483.24:                                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8761:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            && rtx_equal_p (XEXP (lhs, 1), XEXP (rhs, 0)))
1590176483.24:                            ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8762:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     other = XEXP (lhs, 1), lhs = XEXP (lhs, 0), rhs = XEXP (rhs, 1);
1590176483.24:             ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8762:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     other = XEXP (lhs, 1), lhs = XEXP (lhs, 0), rhs = XEXP (rhs, 1);
1590176483.24:                                                       ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8763:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   else if (rtx_equal_p (XEXP (lhs, 1), XEXP (rhs, 1)))
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8763:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   else if (rtx_equal_p (XEXP (lhs, 1), XEXP (rhs, 1)))
1590176483.24:                                        ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8764:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     other = XEXP (lhs, 1), lhs = XEXP (lhs, 0), rhs = XEXP (rhs, 0);
1590176483.24:             ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8828:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   inner_op1 = XEXP (decomposed, 1);
1590176483.24:               ^                 ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8937:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                        XEXP (varop, 1),
1590176483.24:                                                        ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:8950:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       o1 = simplify_and_const_int (NULL_RTX, mode, XEXP (varop, 1), constop);
1590176483.24:                                                    ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9522:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && exact_log2 (INTVAL (XEXP (varop, 1))) >= 0)
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9528:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                 INTVAL (XEXP (varop, 1)))));
1590176483.24:                                                         ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9536:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && exact_log2 (INTVAL (XEXP (varop, 1))) >= 0)
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9542:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                 INTVAL (XEXP (varop, 1)))));
1590176483.24:                                                         ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9570:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (varop, 1)) >= 0
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9571:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (varop, 1)) < GET_MODE_BITSIZE (GET_MODE (varop))
1590176483.24:                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9577:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               unsigned int first_count = INTVAL (XEXP (varop, 1));
1590176483.24:                                                  ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9717:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               varop = gen_rtx_fmt_ee (code, mode, new_rtx, XEXP (varop, 1));
1590176483.24:                                                            ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9743:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (XEXP (varop, 0), 1) == constm1_rtx
1590176483.24:                  ^                      ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9747:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && rtx_equal_p (XEXP (XEXP (varop, 0), 0), XEXP (varop, 1)))
1590176483.24:                                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9750:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               varop = gen_rtx_LE (GET_MODE (varop), XEXP (varop, 1),
1590176483.24:                                                     ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:398:32: note: expanded from macro 'gen_rtx_LE'
1590176483.24:   gen_rtx_fmt_ee (LE, (MODE), (ARG0), (ARG1))
1590176483.24:                                ^~~~
1590176483.24: ./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                    ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9769:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),
1590176483.24:                                                       ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9772:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                          XEXP (varop, 1),
1590176483.24:                                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9788:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),
1590176483.24:                                                      ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9794:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                               XEXP (varop, 1), count);
1590176483.24:                                               ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9811:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (varop, 1) == const0_rtx
1590176483.24:                  ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9857:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (varop, 1) == constm1_rtx
1590176483.24:                  ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9876:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && nonzero_bits (XEXP (varop, 1), result_mode) >> count == 0
1590176483.24:                                ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9877:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (nonzero_bits (XEXP (varop, 1), result_mode)
1590176483.24:                                 ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9889:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                             & nonzero_bits (XEXP (varop, 1),
1590176483.24:                                             ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9892:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               varop = XEXP (varop, 1);
1590176483.24:                       ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9900:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                          XEXP (varop, 1),
1590176483.24:                                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9917:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && mode_signbit_p (result_mode, XEXP (varop, 1))
1590176483.24:                                               ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9919:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                          XEXP (varop, 1),
1590176483.24:                                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9944:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (XEXP (varop, 0), 1)) == count
1590176483.24:                          ^                      ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9945:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && rtx_equal_p (XEXP (XEXP (varop, 0), 0), XEXP (varop, 1)))
1590176483.24:                                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9948:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               varop = gen_rtx_GT (GET_MODE (varop), XEXP (varop, 1),
1590176483.24:                                                     ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:396:32: note: expanded from macro 'gen_rtx_GT'
1590176483.24:   gen_rtx_fmt_ee (GT, (MODE), (ARG0), (ARG1))
1590176483.24:                                ^~~~
1590176483.24: ./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                    ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9964:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (INTVAL (XEXP (XEXP (varop, 0), 1))
1590176483.24:                           ^                      ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:9974:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                     (count + INTVAL (XEXP (varop_inner, 1))));
1590176483.24:                                                      ^                  ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.24: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176483.24: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176483.24:                                                   ^
1590176483.24: ./genrtl.h:366:46: note: expanded from macro 'gen_rtx_LSHIFTRT'
1590176483.24:   gen_rtx_fmt_ee (LSHIFTRT, (MODE), (ARG0), (ARG1))
1590176483.24:                                              ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10117:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   old_pat = PATTERN (insn);
1590176483.24:             ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10118:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   old_notes = REG_NOTES (insn);
1590176483.24:               ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10119:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   PATTERN (insn) = pat;
1590176483.24:   ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10120:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   REG_NOTES (insn) = 0;
1590176483.24:   ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10155:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       PATTERN (insn) = pat;
1590176483.24:       ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10166:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   PATTERN (insn) = old_pat;
1590176483.24:   ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10167:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   REG_NOTES (insn) = old_notes;
1590176483.24:   ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10302:62: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     return gen_rtx_fmt_ee (GET_CODE (x), omode, XEXP (x, 0), XEXP (x, 1));
1590176483.24:                                                              ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10364:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (op1, 1)
1590176483.24:              ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10364:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (op1, 1)
1590176483.24:                               ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10365:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
1590176483.24:              ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10365:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
1590176483.24:                               ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10366:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (XEXP (op1, 0), 1)
1590176483.24:              ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10366:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (XEXP (op1, 0), 1)
1590176483.24:                               ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10367:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (INTVAL (XEXP (op0, 1))
1590176483.24:                       ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10390:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (op0, 1)) >= 0
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10391:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10392:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (op1, 1))
1590176483.24:              ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10392:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && XEXP (op0, 1) == XEXP (op1, 1))
1590176483.24:                               ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10396:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           int shift_count = INTVAL (XEXP (op0, 1));
1590176483.24:                                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10429:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           HOST_WIDE_INT c0 = INTVAL (XEXP (op0, 1));
1590176483.24:                                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10430:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           HOST_WIDE_INT c1 = INTVAL (XEXP (op1, 1));
1590176483.24:                                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10723:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == const1_rtx
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10740:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               op0 = XEXP (op0, 2);
1590176483.24:                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10823:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                    op1, XEXP (op0, 1))) != 0)
1590176483.24:                                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10840:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                  - INTVAL (XEXP (op0, 1)))));
1590176483.24:                                                            ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10908:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               HOST_WIDE_INT c1 = -INTVAL (XEXP (SUBREG_REG (op0), 1));
1590176483.24:                                           ^                       ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10966:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                         op1, XEXP (op0, 1))))
1590176483.24:                                                              ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10974:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (const_op == 0 && XEXP (op0, 1) == constm1_rtx
1590176483.24:                                ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:10995:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                         XEXP (op0, 1), op1)))
1590176483.24:                                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11006:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               op0 = XEXP (op0, 1);
1590176483.24:                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11017:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && rtx_equal_p (XEXP (XEXP (op0, 0), 0), XEXP (op0, 1)))
1590176483.24:                                                        ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11019:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               op0 = XEXP (op0, 1);
1590176483.24:                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11030:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                         XEXP (op0, 1), op1)))
1590176483.24:                                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11052:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             tem = XEXP (XEXP (op0, 0), 0), tem1 = XEXP (XEXP (op0, 0), 1);
1590176483.24:                                                   ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11054:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             tem = XEXP (op0, 0), tem1 = XEXP (op0, 1);
1590176483.24:                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11086:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (XEXP (op0, 0), 1) == constm1_rtx
1590176483.24:                  ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11087:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && rtx_equal_p (XEXP (XEXP (op0, 0), 0), XEXP (op0, 1)))
1590176483.24:                                                        ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11089:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               op0 = XEXP (op0, 1);
1590176483.24:                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11104:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                    XEXP (op0, 1),
1590176483.24:                                                    ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:366:38: note: expanded from macro 'gen_rtx_LSHIFTRT'
1590176483.24:   gen_rtx_fmt_ee (LSHIFTRT, (MODE), (ARG0), (ARG1))
1590176483.24:                                      ^~~~
1590176483.24: ./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                    ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11105:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                    XEXP (XEXP (op0, 0), 1)),
1590176483.24:                                                    ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./genrtl.h:366:46: note: expanded from macro 'gen_rtx_LSHIFTRT'
1590176483.24:   gen_rtx_fmt_ee (LSHIFTRT, (MODE), (ARG0), (ARG1))
1590176483.24:                                              ^~~~
1590176483.24: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.24:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.24:                                        ^~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11118:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (XEXP (op0, 0), 1)) >= 0
1590176483.24:                          ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11119:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (XEXP (op0, 0), 1)) < HOST_BITS_PER_WIDE_INT)
1590176483.24:                          ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11121:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               mask = ((INTVAL (XEXP (op0, 1)) & GET_MODE_MASK (mode))
1590176483.24:                                ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11122:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       << INTVAL (XEXP (XEXP (op0, 0), 1)));
1590176483.24:                                  ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11140:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && ((INTVAL (XEXP (op0, 1)) & GET_MODE_MASK (mode))
1590176483.24:                            ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11163:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (i = exact_log2 ((INTVAL (XEXP (op0, 1))
1590176483.24:                                            ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11205:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   && ((c1 = INTVAL (XEXP (op0, 1))) & ~mask) == 0
1590176483.24:                                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11220:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == const1_rtx
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11233:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == const1_rtx
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11237:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx shift_count = XEXP (XEXP (op0, 0), 1);
1590176483.24:                                 ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11244:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && (INTVAL (XEXP (shift_op, 1))
1590176483.24:                                   ^               ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11264:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (op0, 1)) >= 0
1590176483.24:                          ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11265:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && ((INTVAL (XEXP (op0, 1)) + ! equality_comparison_p)
1590176483.24:                            ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11268:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                    & (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1)) == 0)
1590176483.24:                                                     ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11271:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   & ~(mask >> (INTVAL (XEXP (op0, 1))
1590176483.24:                                        ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11278:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               temp >>= INTVAL (XEXP (op0, 1));
1590176483.24:                                ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11292:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                  - INTVAL (XEXP (op0, 1)))));
1590176483.24:                                                            ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11319:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                           INTVAL (XEXP (op0, 1)));
1590176483.24:                                                   ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11328:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11328:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
1590176483.24:                                   ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11329:56: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (tmode = mode_for_size (mode_width - INTVAL (XEXP (op0, 1)),
1590176483.24:                                                               ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11347:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == XEXP (XEXP (XEXP (op0, 0), 0), 1)
1590176483.24:                  ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11347:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && XEXP (op0, 1) == XEXP (XEXP (XEXP (op0, 0), 0), 1)
1590176483.24:                                   ^                              ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11348:56: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (tmode = mode_for_size (mode_width - INTVAL (XEXP (op0, 1)),
1590176483.24:                                                               ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11355:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx add_const = XEXP (XEXP (op0, 0), 1);
1590176483.24:                               ^                    ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11357:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                    add_const, XEXP (op0, 1));
1590176483.24:                                                               ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11372:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (op0, 1)) >= 0
1590176483.24:                          ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11373:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT
1590176483.24:                          ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11376:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   & (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1)) == 0
1590176483.24:                                                    ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11379:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       ? ((GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1)) >> 1)
1590176483.24:                                                           ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11382:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   <= GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1))))
1590176483.24:                                                      ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11389:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               const_op <<= INTVAL (XEXP (op0, 1));
1590176483.24:                                    ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.24: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.24:                            ^~~
1590176483.24: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.24: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.24:                                       ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11534:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                         XEXP (op0, 1)));
1590176483.24:                                                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11577:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       rtx x1 = XEXP (x, 1);
1590176483.24:                ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11584:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))
1590176483.24:                                           ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11587:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                              ? XEXP (x1, 1) : XEXP (x1, 0));
1590176483.24:                                ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11591:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))
1590176483.24:                                           ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11594:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                              ? XEXP (x0, 1) : XEXP (x0, 0));
1590176483.24:                                ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11645:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             rtx x1 = XEXP (x, 1);
1590176483.24:                      ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11656:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))
1590176483.24:                                                 ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11662:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))
1590176483.24:                                                 ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11819:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         record_value_for_reg (dest, record_dead_insn, SET_SRC (setter));
1590176483.24:                                                       ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11827:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                        SET_SRC (setter)));
1590176483.24:                                                        ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11853:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
1590176483.24:               ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11853:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
1590176483.24:                                              ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11897:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       note_stores (PATTERN (insn), record_dead_and_set_regs_1, NULL_RTX);
1590176483.24:                    ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11900:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:     note_stores (PATTERN (insn), record_dead_and_set_regs_1, insn);
1590176483.24:                  ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11927:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       set = single_set (insn);
1590176483.24:             ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11927:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       set = single_set (insn);
1590176483.24:             ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11933:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           links = XEXP (links, 1);
1590176483.24:                   ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:11946:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           regno = REGNO (SET_SRC (set));
1590176483.24:                          ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176483.24: #define REGNO(RTX) (rhs_regno(RTX))
1590176483.24:                               ^~~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12130:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx x1 = XEXP (x, 1);
1590176483.24:                        ^        ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12140:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))
1590176483.24:                                                   ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12146:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))
1590176483.24:                                                   ^         ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12344:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:   block = BLOCK_FOR_INSN (insn);
1590176483.24:           ^~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12349:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           note_stores (PATTERN (insn), reg_dead_at_p_1, NULL);
1590176483.24:                        ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12360:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       insn = PREV_INSN (insn);
1590176483.24:              ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12441:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         mark_used_regs_combine (SET_SRC (x));
1590176483.24:                                 ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12513:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && BLOCK_FOR_INSN (where_dead) == BLOCK_FOR_INSN (to_insn)
1590176483.24:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12513:38: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           && BLOCK_FOR_INSN (where_dead) == BLOCK_FOR_INSN (to_insn)
1590176483.24:                                             ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.24: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.24:                              ^             ~
1590176483.24: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.24: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.24: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12570:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               XEXP (note, 1) = *pnotes;
1590176483.24:               ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12584:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       move_deaths (SET_SRC (x), maybe_kill_insn, from_luid, to_insn, pnotes);
1590176483.24:                    ^~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12692:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       insn = NEXT_INSN (insn);
1590176483.24:              ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12729:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       next_note = XEXP (note, 1);
1590176483.24:                   ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12804:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (reg_set_p (XEXP (note, 0), PATTERN (i3)))
1590176483.24:                                          ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12817:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           else if (reg_referenced_p (XEXP (note, 0), PATTERN (i3))
1590176483.24:                                                      ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12850:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (reg_mentioned_p (XEXP (note, 0), PATTERN (i3)))
1590176483.24:                                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12853:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (i2 && reg_mentioned_p (XEXP (note, 0), PATTERN (i2)))
1590176483.24:                                                      ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12868:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           if (reg_mentioned_p (XEXP (note, 0), PATTERN (i3))
1590176483.24:                                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12875:45: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (reg_mentioned_p (XEXP (note, 0), PATTERN (i2))
1590176483.24:                                                    ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12891:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (JUMP_LABEL (place) == NULL
1590176483.24:                   ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12892:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   || JUMP_LABEL (place) == XEXP (note, 0)))
1590176483.24:                      ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12894:20: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx label = JUMP_LABEL (place);
1590176483.24:                           ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12897:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 JUMP_LABEL (place) = XEXP (note, 0);
1590176483.24:                 ^~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12899:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 LABEL_NUSES (label)--;
1590176483.24:                 ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176483.24: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176483.24:                          ^           ~
1590176483.24: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176483.24: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12904:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               && (JUMP_LABEL (place2) == NULL
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12905:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   || JUMP_LABEL (place2) == XEXP (note, 0)))
1590176483.24:                      ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12907:20: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               rtx label = JUMP_LABEL (place2);
1590176483.24:                           ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12910:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 JUMP_LABEL (place2) = XEXP (note, 0);
1590176483.24:                 ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176483.24: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176483.24:                            ^            ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12912:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                 LABEL_NUSES (label)--;
1590176483.24:                 ^~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176483.24: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176483.24:                          ^           ~
1590176483.24: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176483.24: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12957:51: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               else if (reg_referenced_p (XEXP (note, 0), PATTERN (i3)))
1590176483.24:                                                          ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12960:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                        && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))
1590176483.24:                                                             ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12975:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               for (tem = PREV_INSN (tem); place == 0; tem = PREV_INSN (tem))
1590176483.24:                          ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12975:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               for (tem = PREV_INSN (tem); place == 0; tem = PREV_INSN (tem))
1590176483.24:                                                             ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12990:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       && reg_set_p (XEXP (note, 0), PATTERN (tem)))
1590176483.24:                                                     ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12992:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       rtx set = single_set (tem);
1590176483.24:                                 ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:12992:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       rtx set = single_set (tem);
1590176483.24:                                 ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13014:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                       if (set != 0 && ! side_effects_p (SET_SRC (set))
1590176483.24:                                                         ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.24: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.24:                      ^          ~
1590176483.24: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.24: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.24:                                ^                 ~
1590176483.24: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.24: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13027:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                           rtx old_notes = REG_NOTES (tem);
1590176483.24:                                           ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13029:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                           PATTERN (tem) = pc_rtx;
1590176483.24:                           ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13030:6: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                           REG_NOTES (tem) = NULL;
1590176483.24:                           ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13075:48: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   else if (reg_referenced_p (XEXP (note, 0), PATTERN (tem))
1590176483.24:                                                              ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13090:43: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                           && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))
1590176483.24:                                                                ^~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13117:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                   || reg_bitfield_target_p (XEXP (note, 0), PATTERN (place)))
1590176483.24:                                                             ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13146:43: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                     if ((! refers_to_regno_p (i, i + 1, PATTERN (place), 0)
1590176483.24:                                                         ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13164:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                           PATTERN (place)))
1590176483.24:                                                           ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13173:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                         PATTERN (place), 0)
1590176483.24:                                                         ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13175:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                             for (tem = PREV_INSN (place); ;
1590176483.24:                                        ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13176:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                  tem = PREV_INSN (tem))
1590176483.24:                                        ^~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.24: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13186:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:                                                               PATTERN (tem)))
1590176483.24:                                                               ^~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13209:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           XEXP (note, 1) = REG_NOTES (place);
1590176483.24:           ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13209:21: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           XEXP (note, 1) = REG_NOTES (place);
1590176483.24:                            ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13210:4: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           REG_NOTES (place) = note;
1590176483.24:           ^~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.24: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.24:                         ^          ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13233:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       next_link = XEXP (link, 1);
1590176483.24:                   ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13247:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           || (set = single_set (XEXP (link, 0))) == 0)
1590176483.24:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                                           ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.24: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.24:                                          ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13247:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           || (set = single_set (XEXP (link, 0))) == 0)
1590176483.24:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.24:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.24:                             ^~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13264:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:       for (insn = NEXT_INSN (XEXP (link, 0));
1590176483.24:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13267:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:            insn = NEXT_INSN (insn))
1590176483.24:                   ^~~~~~~~~~~~~~~~
1590176483.24: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.24: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13270:58: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:         else if (INSN_P (insn) && reg_overlap_mentioned_p (reg, PATTERN (insn)))
1590176483.24:                                                                 ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13272:33: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:             if (reg_referenced_p (reg, PATTERN (insn)))
1590176483.24:                                        ^~~~~~~~~~~~~~
1590176483.24: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.24: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.24:                         ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13292:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:           for (link2 = LOG_LINKS (place); link2; link2 = XEXP (link2, 1))
1590176483.24:                                                          ^            ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: combine.c:13298:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.24:               XEXP (link, 1) = LOG_LINKS (place);
1590176483.24:               ^           ~
1590176483.24: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.24: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.24:                          ^                ~
1590176483.24: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.24: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.24:                                      ^            ~
1590176483.24: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.24:     rtunion fld[1];
1590176483.24:     ^
1590176483.24: 680 warnings generated.
1590176483.24: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dyn-string.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dyn-string.c
1590176483.24: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.38: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-scan.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-scan.c
1590176483.38: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.38: In file included from df-scan.c:32:
1590176483.38: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   if (INSN_CODE (insn) < 0)
1590176483.38:       ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: In file included from df-scan.c:32:
1590176483.38: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.38:                               ^~~~~~~~~~~~~~
1590176483.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: In file included from df-scan.c:32:
1590176483.38: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.38:     ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: In file included from df-scan.c:32:
1590176483.38: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   return INSN_CODE (insn);
1590176483.38:          ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.38: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.38: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: In file included from df-scan.c:32:
1590176483.38: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.38: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.38:     ^
1590176483.38: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.38:    && !defined(__cplusplus))
1590176483.38:        ^
1590176483.38: df-scan.c:303:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:303:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:481:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     FOR_BB_INSNS (bb, insn)
1590176483.38:     ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:481:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     FOR_BB_INSNS (bb, insn)
1590176483.38:     ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:919:45: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:           if (bitmap_bit_p (df->blocks_to_analyze, DF_REF_BBNO (ref)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~
1590176483.38: ./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
1590176483.38: #define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
1590176483.38:                           ^~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1001:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:             = df_scan_get_bb_info (DF_REF_BBNO (ref));
1590176483.38:                                    ^~~~~~~~~~~~~~~~~
1590176483.38: ./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
1590176483.38: #define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
1590176483.38:                           ^~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1016:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:             = df_scan_get_bb_info (DF_REF_BBNO (ref));
1590176483.38:                                    ^~~~~~~~~~~~~~~~~
1590176483.38: ./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
1590176483.38: #define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
1590176483.38:                           ^~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1035:22: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     df_set_bb_dirty (DF_REF_BB (ref));
1590176483.38:                      ^~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1227:20: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   basic_block bb = BLOCK_FOR_INSN (insn);
1590176483.38:                    ^~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1331:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:               && VAR_LOC_UNKNOWN_P (INSN_VAR_LOCATION_LOC (insn)));
1590176483.38:                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.38:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176483.38: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176483.38:                                    ^             ~
1590176483.38: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.38: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.38:                                ^                 ~
1590176483.38: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.38: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                                      ^~~
1590176483.38: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                       ^~~
1590176483.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176483.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176483.38:                ^~~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1331:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:               && VAR_LOC_UNKNOWN_P (INSN_VAR_LOCATION_LOC (insn)));
1590176483.38:                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176483.38:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176483.38:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176483.38: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176483.38:                                 ^~~~~~~~~~~~~~
1590176483.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.38:                         ^           ~
1590176483.38: note: (skipping 6 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176483.38: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                                      ^~~
1590176483.38: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                       ^~~
1590176483.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176483.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176483.38:                ^~~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1420:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1420:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1654:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1654:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1722:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1722:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1836:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   FOR_BB_INSNS (bb, insn)
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1836:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   FOR_BB_INSNS (bb, insn)
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1979:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   basic_block old_bb = BLOCK_FOR_INSN (insn);
1590176483.38:                        ^~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:1986:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   set_block_for_insn (insn, new_bb);
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176483.38: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176483.38:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2060:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:           if (DF_REF_BB (the_ref))
1590176483.38:               ^~~~~~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2061:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:             df_set_bb_dirty (DF_REF_BB (the_ref));
1590176483.38:                              ^~~~~~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2184:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   if (!BLOCK_FOR_INSN (insn))
1590176483.38:        ^~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2217:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       basic_block bb = BLOCK_FOR_INSN (insn);
1590176483.38:                        ^~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2232:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       for (note = REG_NOTES (insn); note;
1590176483.38:                   ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.38: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.38:                         ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2233:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:            note = XEXP (note, 1))
1590176483.38:                   ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2330:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       || DF_REF_BB (ref1) != DF_REF_BB (ref2)
1590176483.38:          ^~~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2330:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       || DF_REF_BB (ref1) != DF_REF_BB (ref2)
1590176483.38:                              ^~~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2933:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:                                         SUBREG_BYTE (reg), GET_MODE (reg));
1590176483.38:                                         ^~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176483.38: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176483.38:                          ^            ~
1590176483.38: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176483.38: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176483.38:                                ^                 ~
1590176483.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:2967:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:           gcc_assert (ORIGINAL_REGNO (DF_REF_REG (ref)) == i);
1590176483.38:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
1590176483.38: #define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
1590176483.38:                             ^            ~
1590176483.38: ./rtl.h:719:28: note: expanded from macro 'X0UINT'
1590176483.38: #define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
1590176483.38:                             ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176483.38:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176483.38:                ^~~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3053:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:           width = INTVAL (XEXP (dst, 1));
1590176483.38:                           ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.38: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.38:                            ^~~
1590176483.38: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.38: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.38:                                       ^~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3054:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:           offset = INTVAL (XEXP (dst, 2));
1590176483.38:                            ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.38: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.38:                            ^~~
1590176483.38: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.38: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.38:                                       ^~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3109:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       df_defs_record (collection_rec, COND_EXEC_CODE (x),
1590176483.38:                                       ^~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
1590176483.38: #define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
1590176483.38:                             ^           ~
1590176483.38: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.38: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.38:                                ^                 ~
1590176483.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3209:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:             width = INTVAL (XEXP (x, 1));
1590176483.38:                             ^        ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.38: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.38:                            ^~~
1590176483.38: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.38: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.38:                                       ^~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3210:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:             offset = INTVAL (XEXP (x, 2));
1590176483.38:                              ^        ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.38: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.38:                            ^~~
1590176483.38: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.38: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.38:                                       ^~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3275:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:                     width = INTVAL (XEXP (dst, 1));
1590176483.38:                                     ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.38: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.38:                            ^~~
1590176483.38: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.38: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.38:                                       ^~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3276:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:                     offset = INTVAL (XEXP (dst, 2));
1590176483.38:                                      ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.38: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.38:                            ^~~
1590176483.38: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.38: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.38:                                       ^~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3301:44: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:                     df_uses_record (cl, collection_rec, &XEXP (dst, 2),
1590176483.38:                                                          ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3357:22: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:             for (j = 0; j < ASM_OPERANDS_INPUT_LENGTH (x); j++)
1590176483.38:                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176483.38: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176483.38:                                        ^              ~
1590176483.38: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176483.38: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176483.38:                                               ^           ~
1590176483.38: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176483.38: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176483.38:                                ^                 ~
1590176483.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176483.38: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176483.38:                                           ^~~~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3358:45: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:               df_uses_record (cl, collection_rec, &ASM_OPERANDS_INPUT (x, j),
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176483.38: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176483.38:                                    ^              ~
1590176483.38: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176483.38: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176483.38:                                            ^           ~
1590176483.38: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176483.38: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176483.38:                                ^                 ~
1590176483.38: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.38: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176483.38: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176483.38:                                       ^~~~~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3453:25: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:                                          DF_REF_LOC (ref), DF_REF_BB (ref),
1590176483.38:                                                            ^~~~~~~~~~~~~~~
1590176483.38: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176483.38:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176483.38:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176483.38: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176483.38:                              ^             ~
1590176483.38: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176483.38: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.38: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3487:15: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   for (note = CALL_INSN_FUNCTION_USAGE (insn_info->insn); note;
1590176483.38:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176483.38: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176483.38:                                         ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3488:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:        note = XEXP (note, 1))
1590176483.38:               ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3567:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   df_defs_record (collection_rec, PATTERN (insn_info->insn), bb, insn_info, 0);
1590176483.38:                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3570:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   for (note = REG_NOTES (insn_info->insn); note;
1590176483.38:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176483.38: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176483.38:                         ^          ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3571:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:        note = XEXP (note, 1))
1590176483.38:               ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3605:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:                   &PATTERN (insn_info->insn), DF_REF_REG_USE, bb, insn_info, 0,
1590176483.38:                    ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.38: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3626:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   FOR_BB_INSNS (bb, insn)
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3626:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   FOR_BB_INSNS (bb, insn)
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3741:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     FOR_BB_INSNS (bb, insn)
1590176483.38:     ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:3741:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:     FOR_BB_INSNS (bb, insn)
1590176483.38:     ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:4268:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:4268:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:       FOR_BB_INSNS (bb, insn)
1590176483.38:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176483.38:        (INSN) = NEXT_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176483.38: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:4551:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.38:        (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
1590176483.38:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: df-scan.c:4551:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.38:   FOR_BB_INSNS_REVERSE (bb, insn)
1590176483.38:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.38: ./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
1590176483.38:        (INSN) = PREV_INSN (INSN))
1590176483.38:                 ^~~~~~~~~~~~~~~~
1590176483.38: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176483.38: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176483.38:                         ^           ~
1590176483.38: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.38: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.38:                          ^                ~
1590176483.38: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.38: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.38:                                      ^            ~
1590176483.38: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.38:     rtunion fld[1];
1590176483.38:     ^
1590176483.38: 61 warnings generated.
1590176483.51: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o et-forest.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  et-forest.c
1590176483.51: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.61: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ebitmap.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ebitmap.c
1590176483.61: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.91: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o explow.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  explow.c
1590176483.91: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176483.91: In file included from explow.c:39:
1590176483.91: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:   if (INSN_CODE (insn) < 0)
1590176483.91:       ^~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.91: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.91:                         ^           ~
1590176483.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: In file included from explow.c:39:
1590176483.91: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.91:                               ^~~~~~~~~~~~~~
1590176483.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.91:                         ^           ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: In file included from explow.c:39:
1590176483.91: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176483.91:     ^~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.91: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.91:                         ^           ~
1590176483.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: In file included from explow.c:39:
1590176483.91: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:   return INSN_CODE (insn);
1590176483.91:          ^~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176483.91: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176483.91:                         ^           ~
1590176483.91: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176483.91: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: In file included from explow.c:39:
1590176483.91: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176483.91: #if HAVE_DESIGNATED_INITIALIZERS
1590176483.91:     ^
1590176483.91: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176483.91:    && !defined(__cplusplus))
1590176483.91:        ^
1590176483.91: explow.c:104:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:         HOST_WIDE_INT h1 = CONST_DOUBLE_HIGH (x);
1590176483.91:                            ^~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176483.91: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176483.91:                              ^           ~
1590176483.91: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176483.91: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176483.91:                                      ^              ~
1590176483.91: ./rtl.h:317:5: note: array 'hwint' declared here
1590176483.91:     HOST_WIDE_INT hwint[1];
1590176483.91:     ^
1590176483.91: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176483.91: #   define HOST_WIDE_INT long
1590176483.91:                          ^
1590176483.91: explow.c:158:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:           c += INTVAL (XEXP (x, 1));
1590176483.91:                        ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.91: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.91:                            ^~~
1590176483.91: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.91: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.91:                                       ^~~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:168:56: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:           x = gen_rtx_PLUS (mode, XEXP (x, 0), plus_constant (XEXP (x, 1), c));
1590176483.91:                                                               ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./genrtl.h:328:42: note: expanded from macro 'gen_rtx_PLUS'
1590176483.91:   gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
1590176483.91:                                          ^~~~
1590176483.91: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176483.91:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176483.91:                                        ^~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:216:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:                                                 XEXP (x, 1)))
1590176483.91:                                                 ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:225:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:   x1 = eliminate_constant_term (XEXP (x, 1), &tem);
1590176483.91:                                 ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:226:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:   if ((x1 != XEXP (x, 1) || x0 != XEXP (x, 0))
1590176483.91:              ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:306:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       rtx op1 = break_out_memory_refs (XEXP (x, 1));
1590176483.91:                                        ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:308:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
1590176483.91:                                        ^        ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:533:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:                                    MEM_ADDR_SPACE (ref)))
1590176483.91:                                    ^~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.91: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176483.91:                              ^~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.91: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.91:                        ^               ~
1590176483.91: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.91: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.91:                             ^                 ~
1590176483.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:533:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:                                    MEM_ADDR_SPACE (ref)))
1590176483.91:                                    ^~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176483.91:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176483.91:                                                     ^~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176483.91: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176483.91:                        ^               ~
1590176483.91: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176483.91: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176483.91:                             ^                 ~
1590176483.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:563:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       offset += INTVAL (XEXP (XEXP (base, 0), 1));
1590176483.91:                         ^                     ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176483.91: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176483.91:                            ^~~
1590176483.91: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176483.91: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176483.91:                                       ^~~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:569:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       || !SYMBOL_REF_HAS_BLOCK_INFO_P (base)
1590176483.91:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1425:5: note: expanded from macro 'SYMBOL_REF_HAS_BLOCK_INFO_P'
1590176483.91:   ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_HAS_BLOCK_INFO) != 0)
1590176483.91:     ^~~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176483.91: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176483.91:                                 ^             ~
1590176483.91: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176483.91: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:570:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       || SYMBOL_REF_ANCHOR_P (base)
1590176483.91:          ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1430:5: note: expanded from macro 'SYMBOL_REF_ANCHOR_P'
1590176483.91:   ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_ANCHOR) != 0)
1590176483.91:     ^~~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176483.91: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176483.91:                                 ^             ~
1590176483.91: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176483.91: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:581:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:                              SYMBOL_REF_TLS_MODEL (base));
1590176483.91:                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
1590176483.91:   ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
1590176483.91:                       ^~~~~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176483.91: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176483.91:                                 ^             ~
1590176483.91: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176483.91: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:679:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       && (set = single_set (insn)) != 0
1590176483.91:                 ^~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176483.91:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.91:                                           ^~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176483.91: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176483.91:                                          ^~~~~~~~~~~
1590176483.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.91:                         ^           ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:679:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       && (set = single_set (insn)) != 0
1590176483.91:                 ^~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176483.91:                           ? PATTERN (I) : single_set_1 (I)) \
1590176483.91:                             ^~~~~~~~~~~
1590176483.91: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176483.91: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176483.91:                         ^           ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:681:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:       && ! rtx_equal_p (x, SET_SRC (set)))
1590176483.91:                            ^~~~~~~~~~~~~
1590176483.91: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176483.91: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176483.91:                      ^          ~
1590176483.91: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176483.91: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176483.91:                                ^                 ~
1590176483.91: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176483.91: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:691:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:         if (SYMBOL_REF_DECL (x) && DECL_P (SYMBOL_REF_DECL (x)))
1590176483.91:             ^~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176483.91:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176483.91:                                           ^              ~
1590176483.91: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176483.91: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:692:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:           align = DECL_ALIGN (SYMBOL_REF_DECL (x));
1590176483.91:                               ^~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176483.91:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176483.91:                                           ^              ~
1590176483.91: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176483.91: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./tree.h:2557:46: note: expanded from macro 'DECL_ALIGN'
1590176483.91: #define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)
1590176483.91:                                              ^~~~
1590176483.91: ./tree.h:945:56: note: expanded from macro 'DECL_COMMON_CHECK'
1590176483.91: #define DECL_COMMON_CHECK(T)    CONTAINS_STRUCT_CHECK (T, TS_DECL_COMMON)
1590176483.91:                                                        ^
1590176483.91: ./tree.h:911:50: note: expanded from macro 'CONTAINS_STRUCT_CHECK'
1590176483.91: #define CONTAINS_STRUCT_CHECK(T, ENUM)          (T)
1590176483.91:                                                  ^
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:702:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:         rtx c = XEXP (XEXP (x, 0), 1);
1590176483.91:                 ^                  ~
1590176483.91: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176483.91: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176483.91:                          ^                ~
1590176483.91: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176483.91: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:706:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:         if (SYMBOL_REF_DECL (s) && DECL_P (SYMBOL_REF_DECL (s)))
1590176483.91:             ^~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176483.91:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176483.91:                                           ^              ~
1590176483.91: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176483.91: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: explow.c:707:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176483.91:           sa = DECL_ALIGN (SYMBOL_REF_DECL (s));
1590176483.91:                            ^~~~~~~~~~~~~~~~~~~
1590176483.91: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176483.91:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176483.91:                                           ^              ~
1590176483.91: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176483.91: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176483.91:                             ^                ~
1590176483.91: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176483.91: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176483.91:                                      ^            ~
1590176483.91: ./tree.h:2557:46: note: expanded from macro 'DECL_ALIGN'
1590176483.91: #define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)
1590176483.91:                                              ^~~~
1590176483.91: ./tree.h:945:56: note: expanded from macro 'DECL_COMMON_CHECK'
1590176483.91: #define DECL_COMMON_CHECK(T)    CONTAINS_STRUCT_CHECK (T, TS_DECL_COMMON)
1590176483.91:                                                        ^
1590176483.91: ./tree.h:911:50: note: expanded from macro 'CONTAINS_STRUCT_CHECK'
1590176483.91: #define CONTAINS_STRUCT_CHECK(T, ENUM)          (T)
1590176483.91:                                                  ^
1590176483.91: ./rtl.h:316:5: note: array 'fld' declared here
1590176483.91:     rtunion fld[1];
1590176483.91:     ^
1590176483.91: 27 warnings generated.
1590176484.01: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fdmatch.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fdmatch.c
1590176484.01: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.11: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fibheap.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fibheap.c
1590176484.11: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.21: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o filename_cmp.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  filename_cmp.c
1590176484.21: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.21: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cse.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cse.c
1590176484.21: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.21: In file included from cse.c:35:
1590176484.21: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   if (INSN_CODE (insn) < 0)
1590176484.21:       ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.21: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.21: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: In file included from cse.c:35:
1590176484.21: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176484.21:                               ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: In file included from cse.c:35:
1590176484.21: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176484.21:     ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.21: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.21: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: In file included from cse.c:35:
1590176484.21: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   return INSN_CODE (insn);
1590176484.21:          ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.21: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.21: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: In file included from cse.c:35:
1590176484.21: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176484.21: #if HAVE_DESIGNATED_INITIALIZERS
1590176484.21:     ^
1590176484.21: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176484.21:    && !defined(__cplusplus))
1590176484.21:        ^
1590176484.21: cse.c:1078:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             remove_invalid_subreg_refs (i, SUBREG_BYTE (x), GET_MODE (x));
1590176484.21:                                            ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176484.21: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176484.21:                          ^            ~
1590176484.21: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176484.21: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:1107:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           && ! REGNO_QTY_VALID_P (REGNO (XEXP (x, 1))))
1590176484.21:                                          ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176484.21: #define REGNO(RTX) (rhs_regno(RTX))
1590176484.21:                               ^~~
1590176484.21: cse.c:503:40: note: expanded from macro 'REGNO_QTY_VALID_P'
1590176484.21: #define REGNO_QTY_VALID_P(N) (REG_QTY (N) >= 0)
1590176484.21:                                        ^
1590176484.21: cse.c:498:39: note: expanded from macro 'REG_QTY'
1590176484.21: #define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
1590176484.21:                                       ^
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:1108:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         if (insert_regs (XEXP (x, 1), NULL, 0))
1590176484.21:                          ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:1110:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             rehash_using_reg (XEXP (x, 1));
1590176484.21:                               ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2037:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                 || (((SUBREG_BYTE (exp)
1590176484.21:                       ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176484.21: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176484.21:                          ^            ~
1590176484.21: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176484.21: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2039:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                     && SUBREG_BYTE (exp) <= end))
1590176484.21:                        ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176484.21: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176484.21:                          ^            ~
1590176484.21: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176484.21: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2335:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                      + (SUBREG_BYTE (x) / UNITS_PER_WORD));
1590176484.21:                         ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176484.21: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176484.21:                          ^            ~
1590176484.21: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176484.21: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2385:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   + CODE_LABEL_NUMBER (XEXP (x, 0)));
1590176484.21:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176484.21: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176484.21:                                 ^           ~
1590176484.21: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.21: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2474:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             + hash_rtx_string (ASM_OPERANDS_OUTPUT_CONSTRAINT (x))
1590176484.21:                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1183:45: note: expanded from macro 'ASM_OPERANDS_OUTPUT_CONSTRAINT'
1590176484.21: #define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XCSTR (RTX, 1, ASM_OPERANDS)
1590176484.21:                                             ^           ~
1590176484.21: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176484.21: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2477:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           if (ASM_OPERANDS_INPUT_LENGTH (x))
1590176484.21:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2479:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               for (i = 1; i < ASM_OPERANDS_INPUT_LENGTH (x); i++)
1590176484.21:                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2481:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   hash += (hash_rtx_cb (ASM_OPERANDS_INPUT (x, i),
1590176484.21:                                         ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2486:29: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                            (ASM_OPERANDS_INPUT_CONSTRAINT (x, i)));
1590176484.21:                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
1590176484.21:   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
1590176484.21:         ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:703:35: note: expanded from macro 'XSTR'
1590176484.21: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2489:33: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               hash += hash_rtx_string (ASM_OPERANDS_INPUT_CONSTRAINT (x, 0));
1590176484.21:                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
1590176484.21:   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
1590176484.21:         ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:703:35: note: expanded from macro 'XSTR'
1590176484.21: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2490:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               x = ASM_OPERANDS_INPUT (x, 0);
1590176484.21:                   ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2627:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
1590176484.21:                      ^~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.21: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176484.21:                              ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.21: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.21:                        ^               ~
1590176484.21: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.21: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.21:                             ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2627:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
1590176484.21:                                            ^~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.21: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176484.21:                              ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.21: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.21:                        ^               ~
1590176484.21: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.21: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.21:                             ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2627:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
1590176484.21:                      ^~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.21:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176484.21:                                                     ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.21: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.21:                        ^               ~
1590176484.21: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.21: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.21:                             ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2627:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
1590176484.21:                                            ^~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.21:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176484.21:                                                     ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.21: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.21:                        ^               ~
1590176484.21: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.21: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.21:                             ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2692:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           if (MEM_ATTRS (x) != MEM_ATTRS (y))
1590176484.21:               ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.21: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.21:                        ^               ~
1590176484.21: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.21: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.21:                             ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2692:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           if (MEM_ATTRS (x) != MEM_ATTRS (y))
1590176484.21:                                ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.21: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.21:                        ^               ~
1590176484.21: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.21: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.21:                             ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2707:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                && exp_equiv_p (XEXP (x, 1), XEXP (y, 1),
1590176484.21:                                ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2707:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                && exp_equiv_p (XEXP (x, 1), XEXP (y, 1),
1590176484.21:                                             ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2709:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               || (exp_equiv_p (XEXP (x, 0), XEXP (y, 1),
1590176484.21:                                             ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2711:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   && exp_equiv_p (XEXP (x, 1), XEXP (y, 0),
1590176484.21:                                   ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2724:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           || strcmp (ASM_OPERANDS_OUTPUT_CONSTRAINT (x),
1590176484.21:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1183:45: note: expanded from macro 'ASM_OPERANDS_OUTPUT_CONSTRAINT'
1590176484.21: #define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XCSTR (RTX, 1, ASM_OPERANDS)
1590176484.21:                                             ^           ~
1590176484.21: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176484.21: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2725:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                      ASM_OPERANDS_OUTPUT_CONSTRAINT (y))
1590176484.21:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1183:45: note: expanded from macro 'ASM_OPERANDS_OUTPUT_CONSTRAINT'
1590176484.21: #define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XCSTR (RTX, 1, ASM_OPERANDS)
1590176484.21:                                             ^           ~
1590176484.21: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176484.21: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2726:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           || ASM_OPERANDS_OUTPUT_IDX (x) != ASM_OPERANDS_OUTPUT_IDX (y)
1590176484.21:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1184:38: note: expanded from macro 'ASM_OPERANDS_OUTPUT_IDX'
1590176484.21: #define ASM_OPERANDS_OUTPUT_IDX(RTX) XCINT (RTX, 2, ASM_OPERANDS)
1590176484.21:                                      ^           ~
1590176484.21: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.21: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2726:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           || ASM_OPERANDS_OUTPUT_IDX (x) != ASM_OPERANDS_OUTPUT_IDX (y)
1590176484.21:                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1184:38: note: expanded from macro 'ASM_OPERANDS_OUTPUT_IDX'
1590176484.21: #define ASM_OPERANDS_OUTPUT_IDX(RTX) XCINT (RTX, 2, ASM_OPERANDS)
1590176484.21:                                      ^           ~
1590176484.21: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.21: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2727:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           || ASM_OPERANDS_INPUT_LENGTH (x) != ASM_OPERANDS_INPUT_LENGTH (y))
1590176484.21:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2727:40: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           || ASM_OPERANDS_INPUT_LENGTH (x) != ASM_OPERANDS_INPUT_LENGTH (y))
1590176484.21:                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2730:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       if (ASM_OPERANDS_INPUT_LENGTH (x))
1590176484.21:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2732:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)
1590176484.21:                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2733:25: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             if (! exp_equiv_p (ASM_OPERANDS_INPUT (x, i),
1590176484.21:                                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2734:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                                ASM_OPERANDS_INPUT (y, i),
1590176484.21:                                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2736:14: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                 || strcmp (ASM_OPERANDS_INPUT_CONSTRAINT (x, i),
1590176484.21:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
1590176484.21:   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
1590176484.21:         ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:703:35: note: expanded from macro 'XSTR'
1590176484.21: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2737:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                            ASM_OPERANDS_INPUT_CONSTRAINT (y, i)))
1590176484.21:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
1590176484.21:   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
1590176484.21:         ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:703:35: note: expanded from macro 'XSTR'
1590176484.21: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2841:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && REGNO_QTY_VALID_P (REGNO (XEXP (x, 1))))
1590176484.21:                                    ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176484.21: #define REGNO(RTX) (rhs_regno(RTX))
1590176484.21:                               ^~~
1590176484.21: cse.c:503:40: note: expanded from macro 'REGNO_QTY_VALID_P'
1590176484.21: #define REGNO_QTY_VALID_P(N) (REG_QTY (N) >= 0)
1590176484.21:                                        ^
1590176484.21: cse.c:498:39: note: expanded from macro 'REG_QTY'
1590176484.21: #define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
1590176484.21:                                       ^
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:2844:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       int x1_q = REG_QTY (REGNO (XEXP (x, 1)));
1590176484.21:                                  ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176484.21: #define REGNO(RTX) (rhs_regno(RTX))
1590176484.21:                               ^~~
1590176484.21: cse.c:498:39: note: expanded from macro 'REG_QTY'
1590176484.21: #define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
1590176484.21:                                       ^
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3136:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       arg1 = XEXP (x, 0), arg2 = XEXP (x, 1);
1590176484.21:                                  ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3219:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)
1590176484.21:                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3221:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                              fold_rtx (ASM_OPERANDS_INPUT (x, i), insn), 0);
1590176484.21:                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3220:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             validate_change (insn, &ASM_OPERANDS_INPUT (x, i),
1590176484.21:                                     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3531:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               && (inner_const = equiv_constant (XEXP (y, 1))) != 0
1590176484.21:                                                 ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3560:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   && XEXP (XEXP (y, 1), 0) == XEXP (const_arg1, 0))
1590176484.21:                            ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3568:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   && XEXP (XEXP (XEXP (y, 0), 1), 0) == XEXP (const_arg1, 0))
1590176484.21:                            ^                  ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3580:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   && XEXP (XEXP (y, 1), 0) == XEXP (const_arg0, 0))
1590176484.21:                            ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3588:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   && XEXP (XEXP (XEXP (y, 0), 1), 0) == XEXP (const_arg0, 0))
1590176484.21:                            ^                  ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3612:29: warning: shift count >= width of type [-Wshift-count-overflow]
1590176484.21:                 ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT - 1))
1590176484.21:                                    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: cse.c:3686:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               inner_const = equiv_constant (fold_rtx (XEXP (y, 1), 0));
1590176484.21:                                                       ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3797:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                                         const_arg2 ? const_arg2 : XEXP (x, 2));
1590176484.21:                                                                   ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3843:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           int byte = SUBREG_BYTE (x) - subreg_lowpart_offset (mode, word_mode);
1590176484.21:                      ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176484.21: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176484.21:                          ^            ~
1590176484.21: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176484.21: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3856:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         return simplify_subreg (mode, new_rtx, imode, SUBREG_BYTE (x));
1590176484.21:                                                       ^~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176484.21: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176484.21:                          ^            ~
1590176484.21: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176484.21: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3912:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     cond_known_true = (XEXP (SET_SRC (set), 2) == pc_rtx);
1590176484.21:                        ^                    ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3912:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     cond_known_true = (XEXP (SET_SRC (set), 2) == pc_rtx);
1590176484.21:                              ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3914:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     cond_known_true = (XEXP (SET_SRC (set), 1) == pc_rtx);
1590176484.21:                        ^                    ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3914:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     cond_known_true = (XEXP (SET_SRC (set), 1) == pc_rtx);
1590176484.21:                              ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3920:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   op0 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 0), insn);
1590176484.21:                               ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3921:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   op1 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 1), insn);
1590176484.21:                   ^                              ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:3921:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   op1 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 1), insn);
1590176484.21:                               ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4204:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   rtx x = PATTERN (insn);
1590176484.21:           ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4231:18: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (tem = CALL_INSN_FUNCTION_USAGE (insn); tem; tem = XEXP (tem, 1))
1590176484.21:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176484.21: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176484.21:                                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4231:62: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (tem = CALL_INSN_FUNCTION_USAGE (insn); tem; tem = XEXP (tem, 1))
1590176484.21:                                                              ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4264:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           canon_reg (SET_SRC (x), insn);
1590176484.21:                      ^~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4266:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           fold_rtx (SET_SRC (x), insn);
1590176484.21:                     ^~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4314:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   canon_reg (SET_SRC (y), insn);
1590176484.21:                              ^~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4316:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   fold_rtx (SET_SRC (y), insn);
1590176484.21:                             ^~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4366:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     canon_reg (PATTERN (insn), insn);
1590176484.21:                ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4372:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   if (n_sets == 1 && REG_NOTES (insn) != 0
1590176484.21:                      ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176484.21: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176484.21:                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4374:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && (! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl))
1590176484.21:                                         ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4398:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       rtx src = SET_SRC (sets[i].rtl);
1590176484.21:                 ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4406:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                            canon_reg (XEXP (dest, 1), insn), 1);
1590176484.21:                                       ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4408:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                            canon_reg (XEXP (dest, 2), insn), 1);
1590176484.21:                                       ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4407:28: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           validate_change (insn, &XEXP (dest, 2),
1590176484.21:                                   ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4464:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       src = SET_SRC (sets[i].rtl);
1590176484.21:             ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:4717:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           rtx new_and = gen_rtx_AND (VOIDmode, NULL_RTX, XEXP (src, 1));
1590176484.21:                                                          ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./genrtl.h:352:41: note: expanded from macro 'gen_rtx_AND'
1590176484.21:   gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
1590176484.21:                                         ^~~~
1590176484.21: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176484.21:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176484.21:                                        ^~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5044:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   >= INTVAL (XEXP (SET_DEST (sets[i].rtl), 1)))
1590176484.21:                              ^                             ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.21: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.21:                            ^~~
1590176484.21: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.21: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5050:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               rtx width = XEXP (SET_DEST (sets[i].rtl), 1);
1590176484.21:                           ^                             ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5051:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               rtx pos = XEXP (SET_DEST (sets[i].rtl), 2);
1590176484.21:                         ^                             ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5123:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               SET_SRC (sets[i].rtl) = trial;
1590176484.21:               ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5148:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               rtx new_rtx = canon_reg (SET_SRC (sets[i].rtl), insn);
1590176484.21:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5186:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       src = SET_SRC (sets[i].rtl);
1590176484.21:             ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5312:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           rtx width = XEXP (SET_DEST (sets[i].rtl), 1);
1590176484.21:                       ^                             ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5363:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               JUMP_LABEL (new_rtx) = XEXP (src, 0);
1590176484.21:               ^~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176484.21: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176484.21:                            ^            ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5364:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               LABEL_NUSES (XEXP (src, 0))++;
1590176484.21:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176484.21: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176484.21:                          ^           ~
1590176484.21: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.21: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5370:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   XEXP (note, 1) = NULL_RTX;
1590176484.21:                   ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5371:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   REG_NOTES (new_rtx) = note;
1590176484.21:                   ^~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176484.21: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176484.21:                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5378:6: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             INSN_CODE (insn) = -1;
1590176484.21:             ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.21: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.21: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5455:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             && rtx_equal_p (SET_SRC (sets[i].rtl), src_eqv))
1590176484.21:                             ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5461:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         && ! rtx_equal_p (SET_SRC (sets[i].rtl), SET_DEST (sets[i].rtl)))
1590176484.21:                           ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5599:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && MEM_VOLATILE_P (PATTERN (insn)))
1590176484.21:                          ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
1590176484.21:   (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
1590176484.21: #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
1590176484.21:                                                                          ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5858:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && NEXT_INSN (PREV_INSN (insn)) == insn
1590176484.21:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5858:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && NEXT_INSN (PREV_INSN (insn)) == insn
1590176484.21:                     ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.21: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                               ^~~~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5860:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && REGNO (SET_SRC (sets[0].rtl)) >= FIRST_PSEUDO_REGISTER
1590176484.21:                 ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176484.21: #define REGNO(RTX) (rhs_regno(RTX))
1590176484.21:                               ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5861:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       && REGNO_QTY_VALID_P (REGNO (SET_SRC (sets[0].rtl))))
1590176484.21:                                    ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176484.21: #define REGNO(RTX) (rhs_regno(RTX))
1590176484.21:                               ^~~
1590176484.21: cse.c:503:40: note: expanded from macro 'REGNO_QTY_VALID_P'
1590176484.21: #define REGNO_QTY_VALID_P(N) (REG_QTY (N) >= 0)
1590176484.21:                                        ^
1590176484.21: cse.c:498:39: note: expanded from macro 'REG_QTY'
1590176484.21: #define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
1590176484.21:                                       ^
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5863:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       int src_q = REG_QTY (REGNO (SET_SRC (sets[0].rtl)));
1590176484.21:                                   ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176484.21: #define REGNO(RTX) (rhs_regno(RTX))
1590176484.21:                               ^~~
1590176484.21: cse.c:498:39: note: expanded from macro 'REG_QTY'
1590176484.21: #define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
1590176484.21:                                       ^
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5871:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           rtx bb_head = BB_HEAD (BLOCK_FOR_INSN (insn));
1590176484.21:                                  ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176484.21: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176484.21:                              ^             ~
1590176484.21: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176484.21: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.21: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./basic-block.h:491:26: note: expanded from macro 'BB_HEAD'
1590176484.21: #define BB_HEAD(B)      (B)->il.rtl->head_
1590176484.21:                          ^
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5874:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               prev = PREV_INSN (prev);
1590176484.21:                      ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.21: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5891:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               && SET_DEST (PATTERN (prev)) == SET_SRC (sets[0].rtl)
1590176484.21:                            ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176484.21: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176484.21:                              ^~~
1590176484.21: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176484.21: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176484.21:                                                   ^~~
1590176484.21: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176484.21: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5891:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               && SET_DEST (PATTERN (prev)) == SET_SRC (sets[0].rtl)
1590176484.21:                                               ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5895:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               rtx src = SET_SRC (sets[0].rtl);
1590176484.21:                         ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:5898:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               validate_change (prev, &SET_DEST (PATTERN (prev)), dest, 1);
1590176484.21:                                                 ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176484.21: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176484.21:                              ^~~
1590176484.21: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176484.21: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176484.21:                                                   ^~~
1590176484.21: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176484.21: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6018:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       if (XEXP (x, 1))
1590176484.21:           ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6019:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         XEXP (x, 1) = cse_process_notes (XEXP (x, 1), NULL_RTX, changed);
1590176484.21:                                          ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6019:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         XEXP (x, 1) = cse_process_notes (XEXP (x, 1), NULL_RTX, changed);
1590176484.21:         ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6267:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       FOR_BB_INSNS (bb, insn)
1590176484.21:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176484.21:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176484.21:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6267:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       FOR_BB_INSNS (bb, insn)
1590176484.21:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176484.21:        (INSN) = NEXT_INSN (INSN))
1590176484.21:                 ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6275:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:             nsets += XVECLEN (PATTERN (insn), 0);
1590176484.21:                               ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176484.21: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6320:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       FOR_BB_INSNS (bb, insn)
1590176484.21:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176484.21:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176484.21:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6320:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       FOR_BB_INSNS (bb, insn)
1590176484.21:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176484.21:        (INSN) = NEXT_INSN (INSN))
1590176484.21:                 ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6343:12: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               if (REG_NOTES (insn))
1590176484.21:                   ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176484.21: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176484.21:                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6346:43: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   REG_NOTES (insn) = cse_process_notes (REG_NOTES (insn),
1590176484.21:                                                         ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176484.21: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176484.21:                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6346:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   REG_NOTES (insn) = cse_process_notes (REG_NOTES (insn),
1590176484.21:                   ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176484.21: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176484.21:                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6357:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                   && for_each_rtx (&PATTERN (insn), check_for_label_ref,
1590176484.21:                                     ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6427:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           && single_set (insn)
1590176484.21:              ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176484.21:                           ? PATTERN (I) : single_set_1 (I)) \
1590176484.21:                                           ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176484.21: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176484.21:                                          ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6427:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           && single_set (insn)
1590176484.21:              ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176484.21:                           ? PATTERN (I) : single_set_1 (I)) \
1590176484.21:                             ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6619:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       count_reg_usage (SET_SRC (x), counts,
1590176484.21:                        ^~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6635:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         count_reg_usage (CALL_INSN_FUNCTION_USAGE (x), counts, dest, incr);
1590176484.21:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176484.21: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176484.21:                                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6636:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       count_reg_usage (PATTERN (x), counts, dest, incr);
1590176484.21:                        ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6652:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                 eqv = XEXP (eqv, 1);
1590176484.21:                       ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6668:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       count_reg_usage (XEXP (x, 1), counts, NULL_RTX, incr);
1590176484.21:                        ^        ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6677:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)
1590176484.21:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176484.21: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176484.21:                                        ^              ~
1590176484.21: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176484.21: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176484.21:                                               ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6678:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         count_reg_usage (ASM_OPERANDS_INPUT (x, i), counts, dest, incr);
1590176484.21:                          ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176484.21: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176484.21:                                    ^              ~
1590176484.21: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176484.21: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176484.21:                                            ^           ~
1590176484.21: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176484.21: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6733:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:            || side_effects_p (SET_SRC (set)))
1590176484.21:                               ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6747:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:     return set_live_p (PATTERN (insn), insn, counts);
1590176484.21:                        ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6750:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
1590176484.21:                         ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176484.21: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176484.21: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176484.21:                                           ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6752:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           rtx elt = XVECEXP (PATTERN (insn), 0, i);
1590176484.21:                              ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176484.21: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.21: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.21:                                       ^~~~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6768:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (next = NEXT_INSN (insn); next; next = NEXT_INSN (next))
1590176484.21:                   ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6768:50: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (next = NEXT_INSN (insn); next; next = NEXT_INSN (next))
1590176484.21:                                                  ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6773:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         else if (INSN_VAR_LOCATION_DECL (insn) == INSN_VAR_LOCATION_DECL (next))
1590176484.21:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:915:26: note: expanded from macro 'INSN_VAR_LOCATION_DECL'
1590176484.21:   PAT_VAR_LOCATION_DECL (INSN_VAR_LOCATION (INSN))
1590176484.21:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176484.21: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176484.21:                                 ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:893:46: note: expanded from macro 'PAT_VAR_LOCATION_DECL'
1590176484.21: #define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))
1590176484.21:                                              ^~~
1590176484.21: ./rtl.h:743:45: note: expanded from macro 'XCTREE'
1590176484.21: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176484.21:                                             ^~~
1590176484.21: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6773:44: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:         else if (INSN_VAR_LOCATION_DECL (insn) == INSN_VAR_LOCATION_DECL (next))
1590176484.21:                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:915:26: note: expanded from macro 'INSN_VAR_LOCATION_DECL'
1590176484.21:   PAT_VAR_LOCATION_DECL (INSN_VAR_LOCATION (INSN))
1590176484.21:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176484.21: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176484.21:                                 ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:893:46: note: expanded from macro 'PAT_VAR_LOCATION_DECL'
1590176484.21: #define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))
1590176484.21:                                              ^~~
1590176484.21: ./rtl.h:743:45: note: expanded from macro 'XCTREE'
1590176484.21: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176484.21:                                             ^~~
1590176484.21: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6779:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       if (for_each_rtx (&INSN_VAR_LOCATION_LOC (insn), is_dead_reg, counts))
1590176484.21:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176484.21:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176484.21:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176484.21: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176484.21:                                 ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176484.21: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176484.21:                                            ^~~
1590176484.21: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                             ^~~
1590176484.21: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6781:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
1590176484.21:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176484.21:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176484.21:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176484.21: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176484.21:                                    ^             ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6781:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
1590176484.21:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176484.21:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176484.21:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176484.21: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176484.21:                                 ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.21: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176484.21: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176484.21:                                            ^~~
1590176484.21: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                             ^~~
1590176484.21: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6809:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   for (insn = insns; insn; insn = NEXT_INSN (insn))
1590176484.21:                                   ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6824:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       prev = PREV_INSN (insn);
1590176484.21:              ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.21: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6887:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   for_each_rtx (&PATTERN (insn), cse_change_cc_mode, &args);
1590176484.21:                  ^~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6888:18: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   for_each_rtx (&REG_NOTES (insn), cse_change_cc_mode, &args);
1590176484.21:                  ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176484.21: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176484.21:                         ^          ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6907:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:   for (insn = start; insn != end; insn = NEXT_INSN (insn))
1590176484.21:                                          ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6973:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       end = NEXT_INSN (BB_END (e->dest));
1590176484.21:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6974:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (insn = BB_HEAD (e->dest); insn != end; insn = NEXT_INSN (insn))
1590176484.21:                                                          ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6987:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           set = single_set (insn);
1590176484.21:                 ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176484.21:                           ? PATTERN (I) : single_set_1 (I)) \
1590176484.21:                                           ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176484.21: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176484.21:                                          ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6987:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           set = single_set (insn);
1590176484.21:                 ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176484.21:                           ? PATTERN (I) : single_set_1 (I)) \
1590176484.21:                             ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:6999:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               if (rtx_equal_p (cc_src, SET_SRC (set)))
1590176484.21:                                        ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7005:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                                        XEXP (SET_SRC (set), 0))
1590176484.21:                                              ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7006:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                        && rtx_equal_p (XEXP (cc_src, 1),
1590176484.21:                                        ^             ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7007:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                                        XEXP (SET_SRC (set), 1)))
1590176484.21:                                        ^                    ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7007:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                                        XEXP (SET_SRC (set), 1)))
1590176484.21:                                              ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                                      ^~~
1590176484.21: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                       ^~~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7106:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           cse_change_cc_mode_insns (NEXT_INSN (insns[i]), last_insns[i],
1590176484.21:                                     ^~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7160:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       if (reg_referenced_p (cc_reg_1, PATTERN (last_insn)))
1590176484.21:                                       ^~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7162:56: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       else if (cc_reg_2 && reg_referenced_p (cc_reg_2, PATTERN (last_insn)))
1590176484.21:                                                        ^~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7169:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       for (insn = PREV_INSN (last_insn);
1590176484.21:                   ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.21: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7170:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:            insn && insn != PREV_INSN (BB_HEAD (bb));
1590176484.21:                            ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.21: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7171:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:            insn = PREV_INSN (insn))
1590176484.21:                   ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.21: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7177:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           set = single_set (insn);
1590176484.21:                 ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176484.21:                           ? PATTERN (I) : single_set_1 (I)) \
1590176484.21:                                           ^~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176484.21: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176484.21:                                          ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7177:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:           set = single_set (insn);
1590176484.21:                 ^~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176484.21:                           ? PATTERN (I) : single_set_1 (I)) \
1590176484.21:                             ^~~~~~~~~~~
1590176484.21: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.21: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7183:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               cc_src = SET_SRC (set);
1590176484.21:                        ^~~~~~~~~~~~~
1590176484.21: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.21: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.21:                      ^          ~
1590176484.21: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.21: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.21:                                ^                 ~
1590176484.21: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.21: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7193:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:       if (modified_between_p (cc_src, cc_src_insn, NEXT_INSN (last_insn)))
1590176484.21:                                                    ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7215:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:               cse_change_cc_mode_insns (NEXT_INSN (cc_src_insn),
1590176484.21:                                         ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: cse.c:7216:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.21:                                         NEXT_INSN (last_insn),
1590176484.21:                                         ^~~~~~~~~~~~~~~~~~~~~
1590176484.21: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.21: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.21:                         ^           ~
1590176484.21: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.21: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.21:                          ^                ~
1590176484.21: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.21: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.21:                                      ^            ~
1590176484.21: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.21:     rtunion fld[1];
1590176484.21:     ^
1590176484.21: 165 warnings generated.
1590176484.34: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dse.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dse.c
1590176484.34: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.34: In file included from dse.c:45:
1590176484.34: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   if (INSN_CODE (insn) < 0)
1590176484.34:       ^~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.34: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.34: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: In file included from dse.c:45:
1590176484.34: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176484.34:                               ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: In file included from dse.c:45:
1590176484.34: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176484.34:     ^~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.34: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.34: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: In file included from dse.c:45:
1590176484.34: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   return INSN_CODE (insn);
1590176484.34:          ^~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176484.34: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.34: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: In file included from dse.c:45:
1590176484.34: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176484.34: #if HAVE_DESIGNATED_INITIALIZERS
1590176484.34:     ^
1590176484.34: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176484.34:    && !defined(__cplusplus))
1590176484.34:        ^
1590176484.34: dse.c:1070:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (mem));
1590176484.34:                                        ^~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.34: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176484.34:                              ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1070:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (mem));
1590176484.34:                                        ^~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.34:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176484.34:                                                     ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1081:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       alias_set_type alias_set = MEM_ALIAS_SET (mem);
1590176484.34:                                  ^~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176484.34: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176484.34:                             ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1081:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       alias_set_type alias_set = MEM_ALIAS_SET (mem);
1590176484.34:                                  ^~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176484.34: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176484.34:                                                        ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1172:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:           *offset = INTVAL (XEXP (address, 1));
1590176484.34:                             ^              ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1176:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (mem))
1590176484.34:                                 ^~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.34: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176484.34:                              ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176484.34: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176484.34:                                    ^~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1176:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (mem))
1590176484.34:                                 ^~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176484.34:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176484.34:                                                     ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176484.34: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176484.34:                                    ^~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1353:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       else if (!MEM_SIZE (mem)
1590176484.34:                 ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:  ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1353:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       else if (!MEM_SIZE (mem)
1590176484.34:                 ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:                         ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1354:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                || !CONST_INT_P (MEM_SIZE (mem))
1590176484.34:                                 ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:  ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:376:35: note: expanded from macro 'CONST_INT_P'
1590176484.34: #define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)
1590176484.34:                                   ^
1590176484.34: ./rtl.h:349:45: note: expanded from macro 'GET_CODE'
1590176484.34: #define GET_CODE(RTX)       ((enum rtx_code) (RTX)->code)
1590176484.34:                                               ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1356:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                || INTVAL (MEM_SIZE (mem)) <= 0
1590176484.34:                           ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:  ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1356:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                || INTVAL (MEM_SIZE (mem)) <= 0
1590176484.34:                           ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:                         ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1357:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                || INTVAL (MEM_SIZE (mem)) > MAX_OFFSET
1590176484.34:                           ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:  ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1357:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                || INTVAL (MEM_SIZE (mem)) > MAX_OFFSET
1590176484.34:                           ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:                         ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1382:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:     width = INTVAL (MEM_SIZE (mem));
1590176484.34:                     ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:  ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1382:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:     width = INTVAL (MEM_SIZE (mem));
1590176484.34:                     ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176484.34: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176484.34:                         ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176484.34: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176484.34:                            ^~~
1590176484.34: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176484.34: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1455:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       rhs = SET_SRC (body);
1590176484.34:             ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.34: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.34:                      ^          ~
1590176484.34: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.34: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.34:                                ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1458:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       else if (body == PATTERN (insn_info->insn))
1590176484.34:                        ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1563:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                                         BLOCK_FOR_INSN (insn_info->insn),
1590176484.34:                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176484.34: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176484.34:                              ^             ~
1590176484.34: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176484.34: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1747:55: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       for (insn = shift_seq; insn != NULL_RTX; insn = NEXT_INSN (insn))
1590176484.34:                                                       ^~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.34: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1749:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:           cost += insn_rtx_cost (PATTERN (insn), speed);
1590176484.34:                                  ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1931:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   bb = BLOCK_FOR_INSN (read_insn->insn);
1590176484.34:        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176484.34: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176484.34:                              ^             ~
1590176484.34: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176484.34: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1957:66: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       for (this_insn = insns; this_insn != NULL_RTX; this_insn = NEXT_INSN (this_insn))
1590176484.34:                                                                  ^~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.34: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:1958:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:         note_stores (PATTERN (this_insn), look_for_hardregs, regs_set);
1590176484.34:                      ^~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2061:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   if ((MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176484.34:        ^~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176484.34: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176484.34:                             ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2061:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   if ((MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
1590176484.34:        ^~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176484.34: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176484.34:                                                        ^~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176484.34: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176484.34:                        ^               ~
1590176484.34: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176484.34: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176484.34:                             ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2334:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       for (link = CALL_INSN_FUNCTION_USAGE (call_insn);
1590176484.34:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176484.34: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176484.34:                                         ^          ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2336:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:            link = XEXP (link, 1))
1590176484.34:                   ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2401:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       && MEM_VOLATILE_P (PATTERN (insn)))
1590176484.34:                          ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
1590176484.34:   (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
1590176484.34:                                       ^~~
1590176484.34: ./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
1590176484.34: #define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
1590176484.34:                                                                          ^~~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2409:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   note_uses (&PATTERN (insn), check_mem_read_use, bb_info);
1590176484.34:               ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2425:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:           rtx call = PATTERN (insn);
1590176484.34:                      ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2429:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:             call = SET_SRC (call);
1590176484.34:                    ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176484.34: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176484.34:                      ^          ~
1590176484.34: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.34: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.34:                                ^                 ~
1590176484.34: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.34: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2435:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:               if (SYMBOL_REF_DECL (symbol)
1590176484.34:                   ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176484.34:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176484.34:                                           ^              ~
1590176484.34: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176484.34: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176484.34:                             ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2438:31: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                   if ((DECL_BUILT_IN_CLASS (SYMBOL_REF_DECL (symbol))
1590176484.34:                                             ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176484.34:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176484.34:                                           ^              ~
1590176484.34: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176484.34: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176484.34:                             ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./tree.h:3225:26: note: expanded from macro 'DECL_BUILT_IN_CLASS'
1590176484.34:    (FUNCTION_DECL_CHECK (NODE)->function_decl.built_in_class)
1590176484.34:                          ^~~~
1590176484.34: ./tree-check.h:35:44: note: expanded from macro 'FUNCTION_DECL_CHECK'
1590176484.34: #define FUNCTION_DECL_CHECK(t)  TREE_CHECK (t, FUNCTION_DECL)
1590176484.34:                                             ^
1590176484.34: ./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
1590176484.34: #define TREE_CHECK(T, CODE)                     (T)
1590176484.34:                                                  ^
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2440:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                        && (DECL_FUNCTION_CODE (SYMBOL_REF_DECL (symbol))
1590176484.34:                                                ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176484.34:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176484.34:                                           ^              ~
1590176484.34: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176484.34: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176484.34:                             ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./tree.h:2573:25: note: expanded from macro 'DECL_FUNCTION_CODE'
1590176484.34:   (FUNCTION_DECL_CHECK (NODE)->function_decl.function_code)
1590176484.34:                         ^~~~
1590176484.34: ./tree-check.h:35:44: note: expanded from macro 'FUNCTION_DECL_CHECK'
1590176484.34: #define FUNCTION_DECL_CHECK(t)  TREE_CHECK (t, FUNCTION_DECL)
1590176484.34:                                             ^
1590176484.34: ./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
1590176484.34: #define TREE_CHECK(T, CODE)                     (T)
1590176484.34:                                                  ^
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2442:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                       || SYMBOL_REF_DECL (symbol) == block_clear_fn)
1590176484.34:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176484.34:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176484.34:                                           ^              ~
1590176484.34: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176484.34: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176484.34:                             ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2443:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:                     memset_call = SYMBOL_REF_DECL (symbol);
1590176484.34:                                   ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176484.34:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176484.34:                                           ^              ~
1590176484.34: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176484.34: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176484.34:                             ^                ~
1590176484.34: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.34: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2534:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:       || volatile_refs_p (PATTERN (insn))
1590176484.34:                           ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2540:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:   body = PATTERN (insn);
1590176484.34:          ^~~~~~~~~~~~~~
1590176484.34: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.34: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2651:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:           FOR_BB_INSNS (bb, insn)
1590176484.34:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176484.34:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176484.34:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.34: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: dse.c:2651:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.34:           FOR_BB_INSNS (bb, insn)
1590176484.34:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.34: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176484.34:        (INSN) = NEXT_INSN (INSN))
1590176484.34:                 ^~~~~~~~~~~~~~~~
1590176484.34: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.34: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.34:                         ^           ~
1590176484.34: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.34: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.34:                          ^                ~
1590176484.34: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.34: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.34:                                      ^            ~
1590176484.34: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.34:     rtunion fld[1];
1590176484.34:     ^
1590176484.34: 46 warnings generated.
1590176484.55: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o except.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  except.c
1590176484.55: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.55: except.c:941:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (ei = ei_start (BLOCK_FOR_INSN (insn)->preds); (e = ei_safe_edge (ei)); )
1590176484.55:                       ^~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176484.55: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176484.55:                              ^             ~
1590176484.55: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176484.55: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.55: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./basic-block.h:691:38: note: expanded from macro 'ei_start'
1590176484.55: #define ei_start(iter) ei_start_1 (&(iter))
1590176484.55:                                      ^~~~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:948:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:     last = PREV_INSN (last);
1590176484.55:            ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.55: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:949:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   bb = create_basic_block (seq, last, BLOCK_FOR_INSN (insn)->prev_bb);
1590176484.55:                                       ^~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176484.55: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176484.55:                              ^             ~
1590176484.55: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176484.55: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.55: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1069:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))
1590176484.55:                                           ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1150:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:       SYMBOL_REF_FLAGS (sym) = SYMBOL_FLAG_LOCAL;
1590176484.55:       ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176484.55: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176484.55:                                 ^             ~
1590176484.55: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176484.55: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176484.55:                             ^                ~
1590176484.55: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.55: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1189:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (fn_begin = get_insns (); ; fn_begin = NEXT_INSN (fn_begin))
1590176484.55:                                              ^~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1192:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:         if (NOTE_KIND (fn_begin) == NOTE_INSN_FUNCTION_BEG)
1590176484.55:             ^~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176484.55: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176484.55:                         ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1194:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:         else if (NOTE_INSN_BASIC_BLOCK_P (fn_begin))
1590176484.55:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176484.55:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176484.55:       ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176484.55: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176484.55:                         ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1232:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:     insn = NEXT_INSN (insn);
1590176484.55:            ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1446:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:           redirect_edge_succ (e, BLOCK_FOR_INSN (lp->landing_pad));
1590176484.55:                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176484.55: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176484.55:                              ^             ~
1590176484.55: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176484.55: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176484.55: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1625:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:     return may_trap_p (PATTERN (insn));
1590176484.55:                        ^~~~~~~~~~~~~~
1590176484.55: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.55: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1646:44: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (insn = first; insn != last ; insn = NEXT_INSN (insn))
1590176484.55:                                            ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1667:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (insn = last; insn != first; insn = PREV_INSN (insn))
1590176484.55:                                           ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.55: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1691:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:     insn = XVECEXP (PATTERN (insn), 0, 0);
1590176484.55:                     ^~~~~~~~~~~~~~
1590176484.55: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.55: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.55: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176484.55: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176484.55:                                      ^~~
1590176484.55: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                       ^~~
1590176484.55: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.55: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.55:                                       ^~~~~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1770:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:       rtx seq = PATTERN (insn);
1590176484.55:                 ^~~~~~~~~~~~~~
1590176484.55: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.55: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1814:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:       rtx seq = PATTERN (insn);
1590176484.55:                 ^~~~~~~~~~~~~~
1590176484.55: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.55: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1868:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176484.55:                                          ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:1881:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:        insn = XEXP (insn, 1))
1590176484.55:               ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2414:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:   for (iter = get_insns (); iter ; iter = NEXT_INSN (iter))
1590176484.55:                                           ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2426:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:           insn = XVECEXP (PATTERN (insn), 0, 0);
1590176484.55:                           ^~~~~~~~~~~~~~
1590176484.55: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176484.55: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176484.55: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176484.55: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176484.55:                                      ^~~
1590176484.55: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                       ^~~
1590176484.55: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176484.55: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176484.55:                                       ^~~~~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2471:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                     NOTE_EH_HANDLER (note) = call_site;
1590176484.55:                     ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176484.55: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176484.55:                                 ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2477:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                         NOTE_EH_HANDLER (note) = call_site;
1590176484.55:                         ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176484.55: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176484.55:                                 ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2488:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                     NOTE_EH_HANDLER (note) = call_site;
1590176484.55:                     ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176484.55: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176484.55:                                 ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2494:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                 NOTE_EH_HANDLER (note) = call_site;
1590176484.55:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176484.55: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176484.55:                                 ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2505:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                 NOTE_EH_HANDLER (note) = call_site;
1590176484.55:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176484.55: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176484.55:                                 ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2514:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:              && NOTE_KIND (iter) == NOTE_INSN_SWITCH_TEXT_SECTIONS)
1590176484.55:                 ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176484.55: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176484.55:                         ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2543:25: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:       SET_BIT (pad_loc, CODE_LABEL_NUMBER (iter) - min_labelno);
1590176484.55:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176484.55: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176484.55:                                 ^           ~
1590176484.55: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.55: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2548:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:       NOTE_EH_HANDLER (note) = call_site;
1590176484.55:       ^~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176484.55: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176484.55:                                 ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2574:14: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:               idx = CODE_LABEL_NUMBER (cs->landing_pad) - min_labelno;
1590176484.55:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176484.55: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176484.55:                                 ^           ~
1590176484.55: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176484.55: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2586:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                          iter; iter = PREV_INSN (iter))
1590176484.55:                                       ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176484.55: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2587:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                       if (NOTE_INSN_BASIC_BLOCK_P (iter))
1590176484.55:                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176484.55:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176484.55:       ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176484.55: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176484.55:                         ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2589:16: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                           prev_bb = NOTE_BASIC_BLOCK (iter);
1590176484.55:                                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176484.55: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176484.55:                                 ^              ~
1590176484.55: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176484.55: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2606:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                   JUMP_LABEL (jump) = cs->landing_pad;
1590176484.55:                   ^~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176484.55: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176484.55:                            ^            ~
1590176484.55: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176484.55: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2608:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                   iter = NEXT_INSN (cs->landing_pad);
1590176484.55:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176484.55: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176484.55:                         ^           ~
1590176484.55: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176484.55: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176484.55:                          ^                ~
1590176484.55: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176484.55: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2609:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                   if (iter && NOTE_INSN_BASIC_BLOCK_P (iter))
1590176484.55:                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176484.55:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176484.55:       ^~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176484.55: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176484.55:                         ^            ~
1590176484.55: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176484.55: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:2610:15: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176484.55:                     padbb = NOTE_BASIC_BLOCK (iter);
1590176484.55:                             ^~~~~~~~~~~~~~~~~~~~~~~
1590176484.55: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176484.55: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176484.55:                                 ^              ~
1590176484.55: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176484.55: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176484.55:                                ^                 ~
1590176484.55: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176484.55: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176484.55:                                      ^            ~
1590176484.55: ./rtl.h:316:5: note: array 'fld' declared here
1590176484.55:     rtunion fld[1];
1590176484.55:     ^
1590176484.55: except.c:3235:57: warning: for loop has empty body [-Wempty-body]
1590176484.55:               for (lp = i->landing_pads; lp ; lp = lp->next_lp);
1590176484.55:                                                                ^
1590176484.55: except.c:3235:57: note: put the semicolon on a separate line to silence this warning
1590176484.55: 37 warnings generated.
1590176484.66: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fixed-value.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fixed-value.c
1590176484.66: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.66: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o floatformat.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  floatformat.c
1590176484.66: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176484.76: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fopen_unlocked.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fopen_unlocked.c
1590176484.76: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.16: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o expmed.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  expmed.c
1590176485.16: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.16: In file included from expmed.c:37:
1590176485.16: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   if (INSN_CODE (insn) < 0)
1590176485.16:       ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.16: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.16: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: In file included from expmed.c:37:
1590176485.16: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.16:                               ^~~~~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: In file included from expmed.c:37:
1590176485.16: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.16:     ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.16: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.16: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: In file included from expmed.c:37:
1590176485.16: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   return INSN_CODE (insn);
1590176485.16:          ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.16: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.16: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: In file included from expmed.c:37:
1590176485.16: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176485.16: #if HAVE_DESIGNATED_INITIALIZERS
1590176485.16:     ^
1590176485.16: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176485.16:    && !defined(__cplusplus))
1590176485.16:        ^
1590176485.16: expmed.c:158:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.plus, 1) = &all.reg;
1590176485.16:   ^                ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:165:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.mult, 1) = &all.reg;
1590176485.16:   ^                ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:169:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.sdiv, 1) = &all.reg;
1590176485.16:   ^                ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:173:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.udiv, 1) = &all.reg;
1590176485.16:   ^                ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:177:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.sdiv_32, 1) = 32 < MAX_BITS_PER_WORD ? cint[32] : GEN_INT (32);
1590176485.16:   ^                   ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:181:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.smod_32, 1) = XEXP (&all.sdiv_32, 1);
1590176485.16:   ^                   ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:181:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.smod_32, 1) = XEXP (&all.sdiv_32, 1);
1590176485.16:                            ^                   ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:188:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.wide_mult, 1) = &all.zext;
1590176485.16:   ^                     ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:204:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.shift_add, 1) = &all.reg;
1590176485.16:   ^                     ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:208:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.shift_sub0, 1) = &all.reg;
1590176485.16:   ^                      ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:212:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:   XEXP (&all.shift_sub1, 1) = &all.shift_mult;
1590176485.16:   ^                      ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:255:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:               XEXP (&all.wide_lshr, 1) = GEN_INT (GET_MODE_BITSIZE (mode));
1590176485.16:               ^                     ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:270:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:               XEXP (&all.shift, 1) = cint[m];
1590176485.16:               ^                 ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:271:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:               XEXP (&all.shift_mult, 1) = pow2[m];
1590176485.16:               ^                      ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:397:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:       if (SUBREG_BYTE (op0) == 0 && inner_mode_size < outer_mode_size)
1590176485.16:           ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:407:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:         byte_offset = SUBREG_BYTE (op0);
1590176485.16:                       ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:699:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:         xop0 = gen_rtx_SUBREG (op_mode, SUBREG_REG (xop0), SUBREG_BYTE (xop0));
1590176485.16:                                                            ^~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:800:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:         bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
1590176485.16:                                                    ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:800:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:         bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
1590176485.16:                                                    ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:908:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                             MEM_ALIGN (op0), mode, MEM_VOLATILE_P (op0));
1590176485.16:                             ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:908:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                             MEM_ALIGN (op0), mode, MEM_VOLATILE_P (op0));
1590176485.16:                             ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:20: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                    ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:20: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                    ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:32: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                                ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:32: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                                ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1124:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:           int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD) + offset;
1590176485.16:                              ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1198:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:       bitnum += SUBREG_BYTE (op0) * BITS_PER_UNIT;
1590176485.16:                 ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1329:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:             bitnum += SUBREG_BYTE (subreg) * BITS_PER_UNIT;
1590176485.16:                       ^~~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1621:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:         bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
1590176485.16:                                                    ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1621:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:         bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
1590176485.16:                                                    ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1734:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                             MEM_ALIGN (op0), word_mode, MEM_VOLATILE_P (op0));
1590176485.16:                             ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1734:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                             MEM_ALIGN (op0), word_mode, MEM_VOLATILE_P (op0));
1590176485.16:                             ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:20: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                    ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:20: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                    ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:  ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:32: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                                ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:     unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
1590176485.16:                 ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.16: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.16:                         ^~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.16: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.16:                        ^               ~
1590176485.16: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.16: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.16:                             ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./system.h:338:32: note: expanded from macro 'MIN'
1590176485.16: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.16:                                ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:1950:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:           int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD) + offset;
1590176485.16:                              ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.16: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.16:                          ^            ~
1590176485.16: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.16: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.16:                                ^                 ~
1590176485.16: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.16: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:3188:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:           if (CONST_DOUBLE_HIGH (op1) == 0
1590176485.16:               ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.16: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.16:                              ^           ~
1590176485.16: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.16: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.16:                                      ^              ~
1590176485.16: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.16:     HOST_WIDE_INT hwint[1];
1590176485.16:     ^
1590176485.16: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.16: #   define HOST_WIDE_INT long
1590176485.16:                          ^
1590176485.16: expmed.c:3192:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                    && EXACT_POWER_OF_2_OR_ZERO_P (CONST_DOUBLE_HIGH (op1)))
1590176485.16:                                                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.16: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.16:                              ^           ~
1590176485.16: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.16: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.16:                                      ^              ~
1590176485.16: expmed.c:60:49: note: expanded from macro 'EXACT_POWER_OF_2_OR_ZERO_P'
1590176485.16: #define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)
1590176485.16:                                                 ^
1590176485.16: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.16:     HOST_WIDE_INT hwint[1];
1590176485.16:     ^
1590176485.16: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.16: #   define HOST_WIDE_INT long
1590176485.16:                          ^
1590176485.16: expmed.c:3192:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                    && EXACT_POWER_OF_2_OR_ZERO_P (CONST_DOUBLE_HIGH (op1)))
1590176485.16:                                                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.16: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.16:                              ^           ~
1590176485.16: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.16: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.16:                                      ^              ~
1590176485.16: expmed.c:60:42: note: expanded from macro 'EXACT_POWER_OF_2_OR_ZERO_P'
1590176485.16: #define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)
1590176485.16:                                          ^
1590176485.16: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.16:     HOST_WIDE_INT hwint[1];
1590176485.16:     ^
1590176485.16: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.16: #   define HOST_WIDE_INT long
1590176485.16:                          ^
1590176485.16: expmed.c:3194:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:               int shift = floor_log2 (CONST_DOUBLE_HIGH (op1))
1590176485.16:                                       ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.16: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.16:                              ^           ~
1590176485.16: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.16: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.16:                                      ^              ~
1590176485.16: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.16:     HOST_WIDE_INT hwint[1];
1590176485.16:     ^
1590176485.16: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.16: #   define HOST_WIDE_INT long
1590176485.16:                          ^
1590176485.16: expmed.c:3340:47: warning: shift count >= width of type [-Wshift-count-overflow]
1590176485.16:       unsigned HOST_WIDE_INT ml_lo = (mlow_hi << (HOST_BITS_PER_WIDE_INT - 1)) | (mlow_lo >> 1);
1590176485.16:                                               ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: expmed.c:3341:48: warning: shift count >= width of type [-Wshift-count-overflow]
1590176485.16:       unsigned HOST_WIDE_INT mh_lo = (mhigh_hi << (HOST_BITS_PER_WIDE_INT - 1)) | (mhigh_lo >> 1);
1590176485.16:                                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: expmed.c:4164:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                     && (set = single_set (insn)) != 0
1590176485.16:                               ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.16:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.16:                                           ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.16: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.16:                                          ^~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:4164:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                     && (set = single_set (insn)) != 0
1590176485.16:                               ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.16:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.16:                             ^~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:4247:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                             && (set = single_set (insn)) != 0
1590176485.16:                                       ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.16:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.16:                                           ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.16: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.16:                                          ^~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:4247:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                             && (set = single_set (insn)) != 0
1590176485.16:                                       ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.16:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.16:                             ^~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:4250:6: warning: shift count >= width of type [-Wshift-count-overflow]
1590176485.16:                                         << (HOST_BITS_PER_WIDE_INT - 1)))
1590176485.16:                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.16: expmed.c:4350:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                     && (set = single_set (insn)) != 0
1590176485.16:                               ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.16:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.16:                                           ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.16: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.16:                                          ^~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:4350:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                     && (set = single_set (insn)) != 0
1590176485.16:                               ^~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.16:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.16:                             ^~~~~~~~~~~
1590176485.16: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.16: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.16:                         ^           ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5000:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                                 CONST_DOUBLE_LOW (x), CONST_DOUBLE_HIGH (x));
1590176485.16:                                                       ^~~~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.16: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.16:                              ^           ~
1590176485.16: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.16: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.16:                                      ^              ~
1590176485.16: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.16:     HOST_WIDE_INT hwint[1];
1590176485.16:     ^
1590176485.16: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.16: #   define HOST_WIDE_INT long
1590176485.16:                          ^
1590176485.16: expmed.c:5031:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                           make_tree (type, XEXP (x, 1)));
1590176485.16:                                            ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:4782:55: note: expanded from macro 'fold_build2'
1590176485.16:    fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
1590176485.16:                                                       ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5035:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                           make_tree (type, XEXP (x, 1)));
1590176485.16:                                            ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:4782:55: note: expanded from macro 'fold_build2'
1590176485.16:    fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
1590176485.16:                                                       ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5042:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                           make_tree (type, XEXP (x, 1)));
1590176485.16:                                            ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:4782:55: note: expanded from macro 'fold_build2'
1590176485.16:    fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
1590176485.16:                                                       ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5046:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                           make_tree (type, XEXP (x, 1)));
1590176485.16:                                            ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:4782:55: note: expanded from macro 'fold_build2'
1590176485.16:    fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
1590176485.16:                                                       ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5052:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                                          make_tree (type, XEXP (x, 1))));
1590176485.16:                                                           ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:3887:49: note: expanded from macro 'build2'
1590176485.16: #define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
1590176485.16:                                                 ^~
1590176485.16: ./tree.h:4804:43: note: expanded from macro 'fold_convert'
1590176485.16:    fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
1590176485.16:                                           ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5058:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                                          make_tree (type, XEXP (x, 1))));
1590176485.16:                                                           ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:3887:49: note: expanded from macro 'build2'
1590176485.16: #define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
1590176485.16:                                                 ^~
1590176485.16: ./tree.h:4804:43: note: expanded from macro 'fold_convert'
1590176485.16:    fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
1590176485.16:                                           ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5068:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                                          make_tree (t, XEXP (x, 1))));
1590176485.16:                                                        ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:3887:49: note: expanded from macro 'build2'
1590176485.16: #define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
1590176485.16:                                                 ^~
1590176485.16: ./tree.h:4804:43: note: expanded from macro 'fold_convert'
1590176485.16:    fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
1590176485.16:                                           ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5073:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:                                          make_tree (t, XEXP (x, 1))));
1590176485.16:                                                        ^        ~
1590176485.16: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.16: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:3887:49: note: expanded from macro 'build2'
1590176485.16: #define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
1590176485.16:                                                 ^~
1590176485.16: ./tree.h:4804:43: note: expanded from macro 'fold_convert'
1590176485.16:    fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
1590176485.16:                                           ^~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5085:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:       t = SYMBOL_REF_DECL (x);
1590176485.16:           ^~~~~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.16:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.16:                                           ^              ~
1590176485.16: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.16: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.16:                             ^                ~
1590176485.16: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.16: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: expmed.c:5091:23: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.16:       t = build_decl (RTL_LOCATION (x), VAR_DECL, NULL_TREE, type);
1590176485.16:                       ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:766:23: note: expanded from macro 'RTL_LOCATION'
1590176485.16:                          locator_location (INSN_LOCATOR (X)) \
1590176485.16:                                            ^~~~~~~~~~~~~~~~
1590176485.16: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.16: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.16:                            ^           ~
1590176485.16: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.16: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.16:                          ^                ~
1590176485.16: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.16: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.16:                                      ^            ~
1590176485.16: ./tree.h:3927:46: note: expanded from macro 'build_decl'
1590176485.16: #define build_decl(l,c,t,q) build_decl_stat (l,c,t,q MEM_STAT_INFO)
1590176485.16:                                              ^
1590176485.16: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.16:     rtunion fld[1];
1590176485.16:     ^
1590176485.16: 66 warnings generated.
1590176485.57: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fwprop.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fwprop.c
1590176485.57: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.57: In file included from fwprop.c:33:
1590176485.57: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   if (INSN_CODE (insn) < 0)
1590176485.57:       ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.57: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.57: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: In file included from fwprop.c:33:
1590176485.57: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.57:                               ^~~~~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: In file included from fwprop.c:33:
1590176485.57: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.57:     ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.57: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.57: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: In file included from fwprop.c:33:
1590176485.57: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   return INSN_CODE (insn);
1590176485.57:          ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.57: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.57: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: In file included from fwprop.c:33:
1590176485.57: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176485.57: #if HAVE_DESIGNATED_INITIALIZERS
1590176485.57:     ^
1590176485.57: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176485.57:    && !defined(__cplusplus))
1590176485.57:        ^
1590176485.57: fwprop.c:233:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   FOR_BB_INSNS (bb, insn)
1590176485.57:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176485.57:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176485.57:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.57: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:233:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   FOR_BB_INSNS (bb, insn)
1590176485.57:   ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176485.57:        (INSN) = NEXT_INSN (INSN))
1590176485.57:                 ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.57: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:356:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (GET_MODE (x))
1590176485.57:                        ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.57: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.57:                            ^~~
1590176485.57: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.57: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.57:                                       ^~~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:357:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             && INTVAL (XEXP (x, 1)) >= 0)
1590176485.57:                        ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.57: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.57:                            ^~~
1590176485.57: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.57: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.57:                                       ^~~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:359:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             HOST_WIDE_INT shift = INTVAL (XEXP (x, 1));
1590176485.57:                                           ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.57: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.57:                            ^~~
1590176485.57: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.57: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.57:                                       ^~~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:361:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             XEXP (x, 1) = gen_int_mode ((HOST_WIDE_INT) 1 << shift,
1590176485.57:             ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:374:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:         x = XEXP (x, 1);
1590176485.57:             ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:498:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       op1 = XEXP (x, 1);
1590176485.57:             ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:501:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))
1590176485.57:                                        ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:509:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       op1 = XEXP (x, 1);
1590176485.57:             ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:513:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))
1590176485.57:                                        ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:521:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       op1 = XEXP (x, 1);
1590176485.57:             ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:522:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       op2 = XEXP (x, 2);
1590176485.57:             ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:527:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1) && op2 == XEXP (x, 2))
1590176485.57:                                        ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:527:62: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1) && op2 == XEXP (x, 2))
1590176485.57:                                                              ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:543:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:                                      SUBREG_BYTE (x));
1590176485.57:                                      ^~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.57: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.57:                          ^            ~
1590176485.57: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.57: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:573:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:                                           MEM_ADDR_SPACE (x),
1590176485.57:                                           ^~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.57: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.57:                              ^~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.57: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.57:                        ^               ~
1590176485.57: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.57: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.57:                             ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:573:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:                                           MEM_ADDR_SPACE (x),
1590176485.57:                                           ^~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.57:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.57:                                                     ^~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.57: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.57:                        ^               ~
1590176485.57: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.57: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.57:                             ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:583:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:           op1 = XEXP (x, 1);
1590176485.57:                 ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:590:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:           if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))
1590176485.57:                                            ^        ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:700:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   for (insn = from; insn != to; insn = NEXT_INSN (insn))
1590176485.57:                                        ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.57: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:728:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   basic_block def_bb = BLOCK_FOR_INSN (def_insn);
1590176485.57:                        ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:729:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   basic_block target_bb = BLOCK_FOR_INSN (target_insn);
1590176485.57:                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:794:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   rtx def_set = single_set (def_insn);
1590176485.57:                 ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                                           ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.57: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.57:                                          ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:794:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   rtx def_set = single_set (def_insn);
1590176485.57:                 ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                             ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:800:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   if (NEXT_INSN (def_insn) == target_insn
1590176485.57:       ^~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.57: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:926:17: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:                                insn, BLOCK_FOR_INSN (insn),
1590176485.57:                                      ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:952:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   rtx set = single_set (insn);
1590176485.57:             ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                                           ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.57: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.57:                                          ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:952:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   rtx set = single_set (insn);
1590176485.57:             ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                             ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:953:41: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   bool speed = optimize_bb_for_speed_p (BLOCK_FOR_INSN (insn));
1590176485.57:                                         ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:961:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:     old_cost = rtx_cost (SET_SRC (set), SET, speed);
1590176485.57:                          ^~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:982:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:            && rtx_cost (SET_SRC (set), SET, speed) > old_cost)
1590176485.57:                         ^~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1112:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       src = SET_SRC (def_set);
1590176485.57:             ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1129:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       src = SET_SRC (def_set);
1590176485.57:             ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1154:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   src = SET_SRC (def_set);
1590176485.57:         ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1155:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   use_pat = PATTERN (use_insn);
1590176485.57:             ^~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1163:38: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   speed_p = optimize_bb_for_speed_p (BLOCK_FOR_INSN (use_insn));
1590176485.57:                                      ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1178:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       asm_operands = SET_SRC (use_pat);
1590176485.57:                      ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1192:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             asm_operands = SET_SRC (XVECEXP (use_pat, 0, i));
1590176485.57:                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1202:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   for (i = 0; i < ASM_OPERANDS_INPUT_LENGTH (asm_operands); i++)
1590176485.57:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176485.57: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176485.57:                                        ^              ~
1590176485.57: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176485.57: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176485.57:                                               ^           ~
1590176485.57: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176485.57: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176485.57: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176485.57:                                           ^~~~~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1204:14: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       loc = &ASM_OPERANDS_INPUT (asm_operands, i);
1590176485.57:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
1590176485.57: #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
1590176485.57:                                    ^              ~
1590176485.57: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176485.57: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176485.57:                                            ^           ~
1590176485.57: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176485.57: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.57: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.57:                                       ^~~~~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1224:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   rtx use_set = single_set (use_insn);
1590176485.57:                 ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                                           ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.57: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.57:                                          ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1224:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   rtx use_set = single_set (use_insn);
1590176485.57:                 ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                             ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1230:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   if (INSN_CODE (use_insn) < 0)
1590176485.57:       ^~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.57: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.57: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1231:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:     asm_use = asm_noperands (PATTERN (use_insn));
1590176485.57:                              ^~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1244:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       && (SUBREG_BYTE (SET_DEST (def_set)) != SUBREG_BYTE (reg)
1590176485.57:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.57: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.57:                          ^            ~
1590176485.57: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.57: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1244:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       && (SUBREG_BYTE (SET_DEST (def_set)) != SUBREG_BYTE (reg)
1590176485.57:                                               ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.57: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.57:                          ^            ~
1590176485.57: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.57: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1259:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   src = SET_SRC (def_set);
1590176485.57:         ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1272:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:           rtx old_rtx = note ? XEXP (note, 0) : SET_SRC (use_set);
1590176485.57:                                                 ^~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176485.57: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176485.57:                      ^          ~
1590176485.57: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                ^                 ~
1590176485.57: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1292:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:       loc = &INSN_VAR_LOCATION_LOC (use_insn);
1590176485.57:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
1590176485.57:   PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
1590176485.57:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176485.57: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176485.57:                                 ^~~~~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.57: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176485.57: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176485.57:                                            ^~~
1590176485.57: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176485.57: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.57:                                             ^~~
1590176485.57: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176485.57: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.57:                                       ^~~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1316:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:                            optimize_bb_for_speed_p (BLOCK_FOR_INSN (use_insn)));
1590176485.57:                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1350:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father)
1590176485.57:       ^~~~~~~~~~~~~~~
1590176485.57: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176485.57:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176485.57:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1350:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father)
1590176485.57:                                       ^~~~~~~~~~~~~~~
1590176485.57: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176485.57:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176485.57:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1358:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:     parent = PATTERN (use_insn);
1590176485.57:              ^~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1366:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   def_set = single_set (def_insn);
1590176485.57:             ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                                           ^~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176485.57: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176485.57:                                          ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1366:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:   def_set = single_set (def_insn);
1590176485.57:             ^~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176485.57:                           ? PATTERN (I) : single_set_1 (I)) \
1590176485.57:                             ^~~~~~~~~~~
1590176485.57: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.57: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.57:                         ^           ~
1590176485.57: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.57: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.57: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1436:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             || DF_REF_BB (use)->loop_father == NULL
1590176485.57:                ^~~~~~~~~~~~~~~
1590176485.57: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176485.57:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176485.57:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1438:21: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             || loop_outer (DF_REF_BB (use)->loop_father) == NULL)
1590176485.57:                            ^~~~~~~~~~~~~~~
1590176485.57: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176485.57:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176485.57:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1479:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             && DF_REF_BB (use)->loop_father != NULL
1590176485.57:                ^~~~~~~~~~~~~~~
1590176485.57: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176485.57:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176485.57:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: fwprop.c:1481:21: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.57:             && loop_outer (DF_REF_BB (use)->loop_father) != NULL)
1590176485.57:                            ^~~~~~~~~~~~~~~
1590176485.57: ./df.h:654:52: note: expanded from macro 'DF_REF_BB'
1590176485.57:                         (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
1590176485.57:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.57: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.57: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.57:                              ^             ~
1590176485.57: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.57: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.57:                          ^                ~
1590176485.57: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.57: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.57:                                      ^            ~
1590176485.57: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.57:     rtunion fld[1];
1590176485.57:     ^
1590176485.57: 65 warnings generated.
1590176485.68: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o final.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  final.c
1590176485.68: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.68: In file included from final.c:58:
1590176485.68: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (INSN_CODE (insn) < 0)
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from final.c:58:
1590176485.68: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.68:                               ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from final.c:58:
1590176485.68: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.68:     ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from final.c:58:
1590176485.68: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   return INSN_CODE (insn);
1590176485.68:          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from final.c:58:
1590176485.68: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176485.68: #if HAVE_DESIGNATED_INITIALIZERS
1590176485.68:     ^
1590176485.68: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176485.68:    && !defined(__cplusplus))
1590176485.68:        ^
1590176485.68: final.c:404:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         body = PATTERN (insn);
1590176485.68:                ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:415:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         body = PATTERN (insn);
1590176485.68:                ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:566:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (CODE_LABEL_NUMBER (label) <= max_labelno)
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:567:12: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return LABEL_TO_ALIGNMENT (label);
1590176485.68:            ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:574:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (CODE_LABEL_NUMBER (label) <= max_labelno)
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:575:12: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return LABEL_TO_MAX_SKIP (label);
1590176485.68:            ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:625:25: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       known_align_log = LABEL_TO_ALIGNMENT (align_label);
1590176485.68:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:656:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   seq = NEXT_INSN (PREV_INSN (branch));
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:656:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   seq = NEXT_INSN (PREV_INSN (branch));
1590176485.68:                    ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:665:10: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   dest = JUMP_LABEL (branch);
1590176485.68:          ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176485.68: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176485.68:                            ^            ~
1590176485.68: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.68: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:802:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       LABEL_TO_ALIGNMENT (label) = max_log;
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:803:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       LABEL_TO_MAX_SKIP (label) = max_skip;
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:903:49: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (insn = get_insns (), i = 1; insn; insn = NEXT_INSN (insn))
1590176485.68:                                                 ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:917:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           log = LABEL_TO_ALIGNMENT (insn);
1590176485.68:                 ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:921:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               max_skip = LABEL_TO_MAX_SKIP (insn);
1590176485.68:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:948:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           LABEL_TO_ALIGNMENT (insn) = max_log;
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:949:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           LABEL_TO_MAX_SKIP (insn) = max_skip;
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:958:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                label = NEXT_INSN (label))
1590176485.68:                        ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:992:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (; seq; seq = PREV_INSN (seq))
1590176485.68:                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:996:30: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       log = (LABEL_P (seq) ? LABEL_TO_ALIGNMENT (seq) : 0);
1590176485.68:                              ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1066:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:        insn_current_address += insn_lengths[uid], insn = NEXT_INSN (insn))
1590176485.68:                                                          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1074:14: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           int log = LABEL_TO_ALIGNMENT (insn);
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1091:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       body = PATTERN (insn);
1590176485.68:              ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1124:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                   || asm_noperands (PATTERN (XVECEXP (body, 0, i))) >= 0)
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1125:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 inner_length = (asm_insn_count (PATTERN (inner_insn))
1590176485.68:                                                 ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1168:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:            insn = NEXT_INSN (insn))
1590176485.68:                   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1180:18: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               int log = LABEL_TO_ALIGNMENT (insn);
1590176485.68:                         ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1319:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                   body = PATTERN (insn);
1590176485.68:                          ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1340:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               body = PATTERN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1685:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (insn = first; insn; insn = NEXT_INSN (insn))
1590176485.68:                                   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1755:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   const char *name = LABEL_NAME (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
1590176485.68: #define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176485.68: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1784:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   x = PATTERN (insn);
1590176485.68:       ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1793:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           x = COND_EXEC_CODE (x);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
1590176485.68: #define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
1590176485.68:                             ^           ~
1590176485.68: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.68: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1799:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           x = XEXP (x, 1);
1590176485.68:               ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1834:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return NEXT_INSN (insn);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1839:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       switch (NOTE_KIND (insn))
1590176485.68:               ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1864:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      ASM_COMMENT_START, NOTE_BASIC_BLOCK (insn)->index);
1590176485.68:                                         ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176485.68: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176485.68:                                 ^              ~
1590176485.68: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176485.68: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1874:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           discriminator = NOTE_BASIC_BLOCK (insn)->discriminator;
1590176485.68:                           ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
1590176485.68: #define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
1590176485.68:                                 ^              ~
1590176485.68: ./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
1590176485.68: #define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1880:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                   NOTE_EH_HANDLER (insn));
1590176485.68:                                   ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176485.68: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176485.68:                                 ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./defaults.h:172:52: note: expanded from macro 'ASM_OUTPUT_DEBUG_LABEL'
1590176485.68:   (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM)
1590176485.68:                                                    ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1885:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                   NOTE_EH_HANDLER (insn));
1590176485.68:                                   ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
1590176485.68: #define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
1590176485.68:                                 ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./defaults.h:172:52: note: expanded from macro 'ASM_OUTPUT_DEBUG_LABEL'
1590176485.68:   (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM)
1590176485.68:                                                    ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1938:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               int n = BLOCK_NUMBER (NOTE_BLOCK (insn));
1590176485.68:                                     ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176485.68: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176485.68:                                 ^             ~
1590176485.68: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176485.68: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./tree.h:1975:42: note: expanded from macro 'BLOCK_NUMBER'
1590176485.68: #define BLOCK_NUMBER(NODE) (BLOCK_CHECK (NODE)->block.block_num)
1590176485.68:                                          ^~~~
1590176485.68: ./tree-check.h:10:36: note: expanded from macro 'BLOCK_CHECK'
1590176485.68: #define BLOCK_CHECK(t)  TREE_CHECK (t, BLOCK)
1590176485.68:                                     ^
1590176485.68: ./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
1590176485.68: #define TREE_CHECK(T, CODE)                     (T)
1590176485.68:                                                  ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1949:26: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               TREE_ASM_WRITTEN (NOTE_BLOCK (insn)) = 1;
1590176485.68:                                 ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176485.68: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176485.68:                                 ^             ~
1590176485.68: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176485.68: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./tree.h:1286:34: note: expanded from macro 'TREE_ASM_WRITTEN'
1590176485.68: #define TREE_ASM_WRITTEN(NODE) ((NODE)->base.asm_written_flag)
1590176485.68:                                  ^~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1955:35: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 = block_nonartificial_location (NOTE_BLOCK (insn));
1590176485.68:                                                 ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176485.68: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176485.68:                                 ^             ~
1590176485.68: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176485.68: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1972:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               int n = BLOCK_NUMBER (NOTE_BLOCK (insn));
1590176485.68:                                     ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176485.68: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176485.68:                                 ^             ~
1590176485.68: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176485.68: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./tree.h:1975:42: note: expanded from macro 'BLOCK_NUMBER'
1590176485.68: #define BLOCK_NUMBER(NODE) (BLOCK_CHECK (NODE)->block.block_num)
1590176485.68:                                          ^~~~
1590176485.68: ./tree-check.h:10:36: note: expanded from macro 'BLOCK_CHECK'
1590176485.68: #define BLOCK_CHECK(t)  TREE_CHECK (t, BLOCK)
1590176485.68:                                     ^
1590176485.68: ./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
1590176485.68: #define TREE_CHECK(T, CODE)                     (T)
1590176485.68:                                                  ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:1986:47: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               tree outer_block = BLOCK_SUPERCONTEXT (NOTE_BLOCK (insn));
1590176485.68:                                                      ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176485.68: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176485.68:                                 ^             ~
1590176485.68: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176485.68: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./tree.h:1965:48: note: expanded from macro 'BLOCK_SUPERCONTEXT'
1590176485.68: #define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)
1590176485.68:                                                ^~~~
1590176485.68: ./tree-check.h:10:36: note: expanded from macro 'BLOCK_CHECK'
1590176485.68: #define BLOCK_CHECK(t)  TREE_CHECK (t, BLOCK)
1590176485.68:                                     ^
1590176485.68: ./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
1590176485.68: #define TREE_CHECK(T, CODE)                     (T)
1590176485.68:                                                  ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2007:39: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           ASM_OUTPUT_DEBUG_LABEL (file, "L", CODE_LABEL_NUMBER (insn));
1590176485.68:                                              ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./defaults.h:172:52: note: expanded from macro 'ASM_OUTPUT_DEBUG_LABEL'
1590176485.68:   (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM)
1590176485.68:                                                    ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2031:11: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (CODE_LABEL_NUMBER (insn) <= max_labelno)
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2033:16: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           int align = LABEL_TO_ALIGNMENT (insn);
1590176485.68:                       ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2035:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           int max_skip = LABEL_TO_MAX_SKIP (insn);
1590176485.68:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
1590176485.68:   (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2038:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           if (align && NEXT_INSN (insn))
1590176485.68:                        ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2055:54: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (!DECL_IGNORED_P (current_function_decl) && LABEL_NAME (insn))
1590176485.68:                                                      ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
1590176485.68: #define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:738:32: note: expanded from macro 'XCSTR'
1590176485.68: #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2089:38: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           ASM_OUTPUT_CASE_LABEL (file, "L", CODE_LABEL_NUMBER (insn),
1590176485.68:                                             ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./config/elfos.h:149:51: note: expanded from macro 'ASM_OUTPUT_CASE_LABEL'
1590176485.68:         (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM);                  \
1590176485.68:                                                          ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2100:45: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         targetm.asm_out.internal_label (file, "L", CODE_LABEL_NUMBER (insn));
1590176485.68:                                                    ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2105:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         rtx body = PATTERN (insn);
1590176485.68:                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2178:16: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                       (file, CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 0, idx), 0)));
1590176485.68:                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./config/i386/i386.h:2093:38: note: expanded from macro 'ASM_OUTPUT_ADDR_VEC_ELT'
1590176485.68:   ix86_output_addr_vec_elt ((FILE), (VALUE))
1590176485.68:                                      ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2189:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                        CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 1, idx), 0)),
1590176485.68:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./config/i386/i386.h:2098:39: note: expanded from macro 'ASM_OUTPUT_ADDR_DIFF_ELT'
1590176485.68:   ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2189:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                        CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 1, idx), 0)),
1590176485.68:                                                 ^              ~
1590176485.68: ./rtl.h:712:39: note: expanded from macro 'XVECEXP'
1590176485.68: #define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
1590176485.68:                                            ^          ~
1590176485.68: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.68: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:702:35: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./config/i386/i386.h:2098:39: note: expanded from macro 'ASM_OUTPUT_ADDR_DIFF_ELT'
1590176485.68:   ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2190:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                        CODE_LABEL_NUMBER (XEXP (XEXP (body, 0), 0)));
1590176485.68:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./config/i386/i386.h:2098:48: note: expanded from macro 'ASM_OUTPUT_ADDR_DIFF_ELT'
1590176485.68:   ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))
1590176485.68:                                                ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2226:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 loc = expand_location (ASM_INPUT_SOURCE_LOCATION (body));
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1199:40: note: expanded from macro 'ASM_INPUT_SOURCE_LOCATION'
1590176485.68: #define ASM_INPUT_SOURCE_LOCATION(RTX) XCUINT (RTX, 1, ASM_INPUT)
1590176485.68:                                        ^            ~
1590176485.68: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.68: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2316:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 rtx next = NEXT_INSN (insn);
1590176485.68:                            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2342:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         body = PATTERN (insn);
1590176485.68:                ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2599:45: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           current_insn_predicate = COND_EXEC_TEST (PATTERN (insn));
1590176485.68:                                                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1341:36: note: expanded from macro 'COND_EXEC_TEST'
1590176485.68: #define COND_EXEC_TEST(RTX) XCEXP (RTX, 0, COND_EXEC)
1590176485.68:                                    ^~~
1590176485.68: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176485.68: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.68:                                             ^~~
1590176485.68: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2637:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                  prev = PREV_INSN (prev))
1590176485.68:                         ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2653:29: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             if (new_rtx == insn && PATTERN (new_rtx) == body)
1590176485.68:                                    ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2681:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 t = SYMBOL_REF_DECL (x);
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.68:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.68:                                           ^              ~
1590176485.68: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.68: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2701:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                     t = SYMBOL_REF_DECL (x);
1590176485.68:                         ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.68:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.68:                                           ^              ~
1590176485.68: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.68: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2731:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   return NEXT_INSN (insn);
1590176485.68:          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2841:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       int offset = SUBREG_BYTE (x);
1590176485.68:                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.68: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.68:                          ^            ~
1590176485.68: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.68: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2861:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                  SUBREG_BYTE (x));
1590176485.68:                                  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.68: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.68:                          ^            ~
1590176485.68: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.68: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2875:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             offset = SUBREG_BYTE (x);
1590176485.68:                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.68: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.68:                          ^            ~
1590176485.68: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.68: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:2895:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       XEXP (x, 1) = walk_alter_subreg (&XEXP (x, 1), changed);
1590176485.68:       ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3112:17: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       int num = INSN_CODE (debug_insn);
1590176485.68:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3141:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return REG_EXPR (op);
1590176485.68:            ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1293:24: note: expanded from macro 'REG_EXPR'
1590176485.68: #define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3141:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return REG_EXPR (op);
1590176485.68:            ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1293:51: note: expanded from macro 'REG_EXPR'
1590176485.68: #define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3145:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (MEM_EXPR (op) != 0)
1590176485.68:       ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3145:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (MEM_EXPR (op) != 0)
1590176485.68:       ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3146:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return MEM_EXPR (op);
1590176485.68:            ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3146:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return MEM_EXPR (op);
1590176485.68:            ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3158:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:            && (expr = get_mem_expr_from_op (XEXP (op, 1), &inner_addressp)))
1590176485.68:                                             ^         ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3195:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       else if (REG_P (op) && ORIGINAL_REGNO (op)
1590176485.68:                              ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
1590176485.68: #define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
1590176485.68:                             ^            ~
1590176485.68: ./rtl.h:719:28: note: expanded from macro 'X0UINT'
1590176485.68: #define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3196:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                && ORIGINAL_REGNO (op) != REGNO (op))
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
1590176485.68: #define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
1590176485.68:                             ^            ~
1590176485.68: ./rtl.h:719:28: note: expanded from macro 'X0UINT'
1590176485.68: #define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3197:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         fprintf (asm_out_file, " tmp%i", ORIGINAL_REGNO (op));
1590176485.68:                                          ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
1590176485.68: #define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
1590176485.68:                             ^            ~
1590176485.68: ./rtl.h:719:28: note: expanded from macro 'X0UINT'
1590176485.68: #define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3437:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           && NOTE_KIND (x) == NOTE_INSN_DELETED_LABEL))
1590176485.68:              ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3461:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       t = SYMBOL_REF_DECL (x);
1590176485.68:           ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.68:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.68:                                           ^              ~
1590176485.68: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.68: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3535:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (SYMBOL_REF_DECL (x))
1590176485.68:           ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.68:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.68:                                           ^              ~
1590176485.68: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.68: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3537:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           mark_decl_referenced (SYMBOL_REF_DECL (x));
1590176485.68:                                 ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.68:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.68:                                           ^              ~
1590176485.68: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.68: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3538:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           assemble_external (SYMBOL_REF_DECL (x));
1590176485.68:                              ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176485.68:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176485.68:                                           ^              ~
1590176485.68: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176485.68: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3573:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           if (CONST_DOUBLE_HIGH (x))
1590176485.68:               ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.68: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.68:                              ^           ~
1590176485.68: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.68: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.68:                                      ^              ~
1590176485.68: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.68:     HOST_WIDE_INT hwint[1];
1590176485.68:     ^
1590176485.68: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.68: #   define HOST_WIDE_INT long
1590176485.68:                          ^
1590176485.68: final.c:3598:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           output_addr_const (file, XEXP (x, 1));
1590176485.68:                                    ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3607:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               || INTVAL (XEXP (x, 1)) >= 0)
1590176485.68:                          ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3609:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           output_addr_const (file, XEXP (x, 1));
1590176485.68:                                    ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3622:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if ((CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) >= 0)
1590176485.68:                                                 ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3625:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         output_addr_const (file, XEXP (x, 1));
1590176485.68:                                  ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3629:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           output_addr_const (file, XEXP (x, 1));
1590176485.68:                                    ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3928:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           *second = GEN_INT (CONST_DOUBLE_HIGH (value));
1590176485.68:                              ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.68: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.68:                              ^           ~
1590176485.68: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.68: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.68:                                      ^              ~
1590176485.68: ./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
1590176485.68: #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
1590176485.68:                                                   ^
1590176485.68: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.68:     HOST_WIDE_INT hwint[1];
1590176485.68:     ^
1590176485.68: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.68: #   define HOST_WIDE_INT long
1590176485.68:                          ^
1590176485.68: final.c:3953:27: warning: shift count >= width of type [-Wshift-count-overflow]
1590176485.68:             l[0] |= ((long) (-1) << 32);
1590176485.68:                                  ^  ~~
1590176485.68: final.c:3955:27: warning: shift count >= width of type [-Wshift-count-overflow]
1590176485.68:             l[1] |= ((long) (-1) << 32);
1590176485.68:                                  ^  ~~
1590176485.68: final.c:3975:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176485.68:                                          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3983:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           && ! SIBLING_CALL_P (XVECEXP (PATTERN (insn), 0, 0)))
1590176485.68:                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:808:39: note: expanded from macro 'SIBLING_CALL_P'
1590176485.68:   (RTL_FLAG_CHECK1("SIBLING_CALL_P", (RTX), CALL_INSN)->jump)
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:692:45: note: expanded from macro 'RTL_FLAG_CHECK1'
1590176485.68: #define RTL_FLAG_CHECK1(NAME, RTX, C1)                                  (RTX)
1590176485.68:                                                                          ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3988:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:        link = XEXP (link, 1))
1590176485.68:               ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:3998:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           && ! SIBLING_CALL_P (XVECEXP (PATTERN (insn), 0, 0)))
1590176485.68:                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:808:39: note: expanded from macro 'SIBLING_CALL_P'
1590176485.68:   (RTL_FLAG_CHECK1("SIBLING_CALL_P", (RTX), CALL_INSN)->jump)
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:692:45: note: expanded from macro 'RTL_FLAG_CHECK1'
1590176485.68: #define RTL_FLAG_CHECK1(NAME, RTX, C1)                                  (RTX)
1590176485.68:                                                                          ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4396:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176485.68:                                                  ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4398:26: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               INSN_UID (insn) = CODE_LABEL_NUMBER (insn);
1590176485.68:                                 ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4410:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       next = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4411:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       NEXT_INSN (insn) = NULL;
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4412:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       PREV_INSN (insn) = NULL;
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4416:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               (NOTE_KIND (insn) != NOTE_INSN_VAR_LOCATION
1590176485.68:                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4417:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                && NOTE_KIND (insn) != NOTE_INSN_BLOCK_BEG
1590176485.68:                   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4418:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END
1590176485.68:                   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: final.c:4419:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                && NOTE_KIND (insn) != NOTE_INSN_CFA_RESTORE_STATE)))
1590176485.68:                   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: 115 warnings generated.
1590176485.68: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o emit-rtl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  emit-rtl.c
1590176485.68: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.68: In file included from emit-rtl.c:51:
1590176485.68: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (INSN_CODE (insn) < 0)
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from emit-rtl.c:51:
1590176485.68: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.68:                               ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from emit-rtl.c:51:
1590176485.68: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176485.68:     ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from emit-rtl.c:51:
1590176485.68: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   return INSN_CODE (insn);
1590176485.68:          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: In file included from emit-rtl.c:51:
1590176485.68: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176485.68: #if HAVE_DESIGNATED_INITIALIZERS
1590176485.68:     ^
1590176485.68: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176485.68:    && !defined(__cplusplus))
1590176485.68:        ^
1590176485.68: emit-rtl.c:230:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     h = CONST_DOUBLE_LOW (value) ^ CONST_DOUBLE_HIGH (value);
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.68: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.68:                              ^           ~
1590176485.68: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.68: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.68:                                      ^              ~
1590176485.68: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.68:     HOST_WIDE_INT hwint[1];
1590176485.68:     ^
1590176485.68: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.68: #   define HOST_WIDE_INT long
1590176485.68:                          ^
1590176485.68: emit-rtl.c:251:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             && CONST_DOUBLE_HIGH (a) == CONST_DOUBLE_HIGH (b));
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.68: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.68:                              ^           ~
1590176485.68: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.68: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.68:                                      ^              ~
1590176485.68: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.68:     HOST_WIDE_INT hwint[1];
1590176485.68:     ^
1590176485.68: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.68: #   define HOST_WIDE_INT long
1590176485.68:                          ^
1590176485.68: emit-rtl.c:251:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             && CONST_DOUBLE_HIGH (a) == CONST_DOUBLE_HIGH (b));
1590176485.68:                                         ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.68: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.68:                              ^           ~
1590176485.68: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.68: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.68:                                      ^              ~
1590176485.68: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.68:     HOST_WIDE_INT hwint[1];
1590176485.68:     ^
1590176485.68: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.68: #   define HOST_WIDE_INT long
1590176485.68:                          ^
1590176485.68: emit-rtl.c:426:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   ORIGINAL_REGNO (x) = regno;
1590176485.68:   ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
1590176485.68: #define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
1590176485.68:                             ^            ~
1590176485.68: ./rtl.h:719:28: note: expanded from macro 'X0UINT'
1590176485.68: #define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
1590176485.68:                             ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:564:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   CONST_DOUBLE_HIGH (value) = i1;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176485.68: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176485.68:                              ^           ~
1590176485.68: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176485.68: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176485.68:                                      ^              ~
1590176485.68: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.68:     HOST_WIDE_INT hwint[1];
1590176485.68:     ^
1590176485.68: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.68: #   define HOST_WIDE_INT long
1590176485.68:                          ^
1590176485.68: emit-rtl.c:644:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (rt) = 0;
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:925:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_ATTRS (new_rtx) = get_reg_attrs (REG_EXPR (reg),
1590176485.68:                                        ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1293:24: note: expanded from macro 'REG_EXPR'
1590176485.68: #define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:926:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    REG_OFFSET (reg) + offset);
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1297:26: note: expanded from macro 'REG_OFFSET'
1590176485.68: #define REG_OFFSET(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:926:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    REG_OFFSET (reg) + offset);
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1297:53: note: expanded from macro 'REG_OFFSET'
1590176485.68: #define REG_OFFSET(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:925:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_ATTRS (new_rtx) = get_reg_attrs (REG_EXPR (reg),
1590176485.68:                                        ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1293:51: note: expanded from macro 'REG_EXPR'
1590176485.68: #define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:925:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_ATTRS (new_rtx) = get_reg_attrs (REG_EXPR (reg),
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:981:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (MEM_OFFSET (x) && CONST_INT_P (MEM_OFFSET (x)))
1590176485.68:           ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:981:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (MEM_OFFSET (x) && CONST_INT_P (MEM_OFFSET (x)))
1590176485.68:                                          ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:376:35: note: expanded from macro 'CONST_INT_P'
1590176485.68: #define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)
1590176485.68:                                   ^
1590176485.68: ./rtl.h:349:45: note: expanded from macro 'GET_CODE'
1590176485.68: #define GET_CODE(RTX)       ((enum rtx_code) (RTX)->code)
1590176485.68:                                               ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:981:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (MEM_OFFSET (x) && CONST_INT_P (MEM_OFFSET (x)))
1590176485.68:           ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:983:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
1590176485.68:                            ^~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:983:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
1590176485.68:                                                  ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:983:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
1590176485.68:                                                  ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:983:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
1590176485.68:                            ^~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:982:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         REG_ATTRS (reg)
1590176485.68:         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:989:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (REG_ATTRS (x))
1590176485.68:           ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1025:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               = get_reg_attrs (MEM_EXPR (mem),
1590176485.68:                                ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1025:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               = get_reg_attrs (MEM_EXPR (mem),
1590176485.68:                                ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1026:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                INTVAL (XEXP (x, 1)));
1590176485.68:                                        ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1024:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             REG_ATTRS (XEXP (x, 0))
1590176485.68:             ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1043:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     REG_ATTRS (x)
1590176485.68:     ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1049:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         REG_ATTRS (XEXP (x, 0)) = get_reg_attrs (t, 0);
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1051:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         REG_ATTRS (XEXP (x, 1))
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1051:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         REG_ATTRS (XEXP (x, 1))
1590176485.68:                    ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1255:35: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                                   ^~~
1590176485.68: ./rtl.h:730:42: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                                          ^~~
1590176485.68: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1069:58: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             REG_ATTRS (XEXP (y, 0)) = get_reg_attrs (t, INTVAL (XEXP (y, 1)));
1590176485.68:                                                                 ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1069:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             REG_ATTRS (XEXP (y, 0)) = get_reg_attrs (t, INTVAL (XEXP (y, 1)));
1590176485.68:             ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
1590176485.68: #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
1590176485.68: #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1103:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       REG_USERVAR_P (XEXP (reg, 1)) = 1;
1590176485.68:                      ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1065:38: note: expanded from macro 'REG_USERVAR_P'
1590176485.68:   (RTL_FLAG_CHECK1("REG_USERVAR_P", (RTX), REG)->volatil)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:692:45: note: expanded from macro 'RTL_FLAG_CHECK1'
1590176485.68: #define RTL_FLAG_CHECK1(NAME, RTX, C1)                                  (RTX)
1590176485.68:                                                                          ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1161:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (CODE_LABEL_NUMBER (x) < first_label_num)
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1162:23: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     first_label_num = CODE_LABEL_NUMBER (x);
1590176485.68:                       ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
1590176485.68: #define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
1590176485.68:                                 ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1333:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           == SUBREG_BYTE (x));
1590176485.68:              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176485.68: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176485.68:                          ^            ~
1590176485.68: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176485.68: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1391:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                                     MEM_ADDR_SPACE (op)))
1590176485.68:                                                     ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1391:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                                     MEM_ADDR_SPACE (op)))
1590176485.68:                                                     ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1477:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   expr = MEM_EXPR (mem);
1590176485.68:          ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1477:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   expr = MEM_EXPR (mem);
1590176485.68:          ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1479:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       || MEM_OFFSET (mem) == NULL_RTX
1590176485.68:          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1479:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       || MEM_OFFSET (mem) == NULL_RTX
1590176485.68:          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1480:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       || !CONST_INT_P (MEM_OFFSET (mem)))
1590176485.68:                        ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:376:35: note: expanded from macro 'CONST_INT_P'
1590176485.68: #define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)
1590176485.68:                                   ^
1590176485.68: ./rtl.h:349:45: note: expanded from macro 'GET_CODE'
1590176485.68: #define GET_CODE(RTX)       ((enum rtx_code) (RTX)->code)
1590176485.68:                                               ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1483:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   offset = INTVAL (MEM_OFFSET (mem));
1590176485.68:                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1483:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   offset = INTVAL (MEM_OFFSET (mem));
1590176485.68:                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176485.68: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176485.68:                            ^~~
1590176485.68: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176485.68: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1544:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   alias_set_type alias = MEM_ALIAS_SET (ref);
1590176485.68:                          ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1544:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   alias_set_type alias = MEM_ALIAS_SET (ref);
1590176485.68:                          ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1545:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   tree expr = MEM_EXPR (ref);
1590176485.68:               ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1545:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   tree expr = MEM_EXPR (ref);
1590176485.68:               ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1546:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx offset = MEM_OFFSET (ref);
1590176485.68:                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1546:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx offset = MEM_OFFSET (ref);
1590176485.68:                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1547:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx size = MEM_SIZE (ref);
1590176485.68:              ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1547:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx size = MEM_SIZE (ref);
1590176485.68:              ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1548:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   unsigned int align = MEM_ALIGN (ref);
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1548:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   unsigned int align = MEM_ALIGN (ref);
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1799:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (ref)
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1831:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
1590176485.68:                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1831:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1832:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1832:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1833:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1831:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
1590176485.68:                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1831:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1832:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1832:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1833:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1831:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1841:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1841:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1842:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1842:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem),
1590176485.68:                                                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1843:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ALIGN (mem), addrspace, GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1841:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1841:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1842:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1842:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem),
1590176485.68:                                                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1843:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ALIGN (mem), addrspace, GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1841:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1851:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1851:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1852:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem), align,
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1852:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem), align,
1590176485.68:                                                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1853:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1851:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1851:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1852:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem), align,
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1852:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), MEM_SIZE (mem), align,
1590176485.68:                                                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1853:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1851:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1862:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1862:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
1590176485.68:                                                 ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1863:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1863:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1864:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1862:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1862:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
1590176485.68:                                                 ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1863:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1863:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1864:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1861:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem)
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1872:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1872:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1873:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    offset, MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                            ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1873:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    offset, MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                                            ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1874:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1872:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1872:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1873:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    offset, MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                            ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1873:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    offset, MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                                            ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1874:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1872:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1882:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1882:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1883:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), size, MEM_ALIGN (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1883:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), size, MEM_ALIGN (mem),
1590176485.68:                                                            ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1884:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1882:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1882:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:                                                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1883:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), size, MEM_ALIGN (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1883:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_OFFSET (mem), size, MEM_ALIGN (mem),
1590176485.68:                                                            ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1884:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_ADDR_SPACE (mem), GET_MODE (mem));
1590176485.68:                                    ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1882:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1900:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   as = MEM_ADDR_SPACE (memref);
1590176485.68:        ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1900:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   as = MEM_ADDR_SPACE (memref);
1590176485.68:        ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1921:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_COPY_ATTRIBUTES (new_rtx, memref);
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1308:4: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
1590176485.68:    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
1590176485.68:    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1921:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_COPY_ATTRIBUTES (new_rtx, memref);
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1308:22: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
1590176485.68:    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
1590176485.68:                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1941:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (MEM_ATTRS (memref) == 0
1590176485.68:           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1942:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           || (MEM_EXPR (memref) == NULL
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1942:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           || (MEM_EXPR (memref) == NULL
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1943:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               && MEM_OFFSET (memref) == NULL
1590176485.68:                  ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1943:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               && MEM_OFFSET (memref) == NULL
1590176485.68:                  ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1944:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               && MEM_SIZE (memref) == size
1590176485.68:                  ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1944:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               && MEM_SIZE (memref) == size
1590176485.68:                  ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1945:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               && MEM_ALIGN (memref) == align))
1590176485.68:                  ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1945:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:               && MEM_ALIGN (memref) == align))
1590176485.68:                  ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1949:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       MEM_COPY_ATTRIBUTES (new_rtx, memref);
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1308:4: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
1590176485.68:    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
1590176485.68:    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1949:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       MEM_COPY_ATTRIBUTES (new_rtx, memref);
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1308:22: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
1590176485.68:    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
1590176485.68:                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1953:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align,
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1954:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_ADDR_SPACE (memref), mmode);
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1953:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align,
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1954:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MEM_ADDR_SPACE (memref), mmode);
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1952:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx)
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1971:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx memoffset = MEM_OFFSET (memref);
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1971:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx memoffset = MEM_OFFSET (memref);
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1973:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   unsigned int memalign = MEM_ALIGN (memref);
1590176485.68:                           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1973:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   unsigned int memalign = MEM_ALIGN (memref);
1590176485.68:                           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1974:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   addr_space_t as = MEM_ADDR_SPACE (memref);
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:1974:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   addr_space_t as = MEM_ADDR_SPACE (memref);
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2007:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                plus_constant (XEXP (addr, 1), offset));
1590176485.68:                                               ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./genrtl.h:474:44: note: expanded from macro 'gen_rtx_LO_SUM'
1590176485.68:   gen_rtx_fmt_ee (LO_SUM, (MODE), (ARG0), (ARG1))
1590176485.68:                                            ^~~~
1590176485.68: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176485.68:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176485.68:                                        ^~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2035:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   else if (MEM_SIZE (memref))
1590176485.68:            ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2035:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   else if (MEM_SIZE (memref))
1590176485.68:            ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2036:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     size = plus_constant (MEM_SIZE (memref), -offset);
1590176485.68:                           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2036:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     size = plus_constant (MEM_SIZE (memref), -offset);
1590176485.68:                           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2038:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2038:64: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
1590176485.68:                                                                ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2038:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2038:64: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
1590176485.68:                                                                ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2038:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2068:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   addr_space_t as = MEM_ADDR_SPACE (memref);
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2068:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   addr_space_t as = MEM_ADDR_SPACE (memref);
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2098:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2098:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
1590176485.68:                                              ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
1590176485.68:                           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:338:20: note: expanded from macro 'MIN'
1590176485.68: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.68:                    ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
1590176485.68:                           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:338:20: note: expanded from macro 'MIN'
1590176485.68: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.68:                    ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
1590176485.68:                           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:338:32: note: expanded from macro 'MIN'
1590176485.68: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.68:                                ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2098:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2098:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
1590176485.68:                                              ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                      MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
1590176485.68:                           ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:338:32: note: expanded from macro 'MIN'
1590176485.68: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176485.68:                                ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2097:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx)
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2135:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   tree expr = MEM_EXPR (new_rtx);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2135:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   tree expr = MEM_EXPR (new_rtx);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176485.68: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176485.68:                                                   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2136:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx memoffset = MEM_OFFSET (new_rtx);
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                          ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2136:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx memoffset = MEM_OFFSET (new_rtx);
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176485.68: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2204:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                        MEM_ALIGN (new_rtx),
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2205:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                        MEM_ADDR_SPACE (new_rtx), mode);
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176485.68:                              ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2204:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                        MEM_ALIGN (new_rtx),
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2205:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                        MEM_ADDR_SPACE (new_rtx), mode);
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176485.68:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176485.68:                                                     ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2203:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (new_rtx) = get_mem_attrs (0, expr, memoffset, GEN_INT (size),
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2232:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (rd) = get_mem_attrs (new_alias_set (), d, const0_rtx,
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2253:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   alias = MEM_ALIAS_SET (DECL_RTL (expr));
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                             ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2253:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   alias = MEM_ALIAS_SET (DECL_RTL (expr));
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176485.68: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176485.68:                                                        ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2262:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     offset = XEXP (addr, 1);
1590176485.68:              ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2265:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2265:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:  ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2265:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2265:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                                    MEM_SIZE (mem), MEM_ALIGN (mem),
1590176485.68:                                                    ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176485.68: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176485.68:                         ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2264:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   MEM_ATTRS (mem) = get_mem_attrs (alias, expr, offset,
1590176485.68:   ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176485.68: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176485.68:                        ^               ~
1590176485.68: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176485.68: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176485.68:                             ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2301:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (insn = first; insn; insn = NEXT_INSN (insn))
1590176485.68:                                       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2317:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     for (insn = first; insn; insn = NEXT_INSN (insn))
1590176485.68:                                     ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2352:25: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (p = insn; p; p = NEXT_INSN (p))
1590176485.68:                         ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2355:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         reset_used_flags (PATTERN (p));
1590176485.68:                           ^~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2356:20: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         reset_used_flags (REG_NOTES (p));
1590176485.68:                           ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2515:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (p = get_insns (); p; p = NEXT_INSN (p))
1590176485.68:                                 ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2518:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         reset_used_flags (PATTERN (p));
1590176485.68:                           ^~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2519:20: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         reset_used_flags (REG_NOTES (p));
1590176485.68:                           ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2523:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             rtx q, sequence = PATTERN (p);
1590176485.68:                               ^~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2529:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 reset_used_flags (PATTERN (q));
1590176485.68:                                   ^~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2530:21: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                 reset_used_flags (REG_NOTES (q));
1590176485.68:                                   ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2535:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (p = get_insns (); p; p = NEXT_INSN (p))
1590176485.68:                                 ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2538:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         verify_rtx_sharing (PATTERN (p), p);
1590176485.68:                             ^~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2539:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         verify_rtx_sharing (REG_NOTES (p), p);
1590176485.68:                             ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2549:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (; insn; insn = NEXT_INSN (insn))
1590176485.68:                       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2552:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         PATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));
1590176485.68:                                              ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2552:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         PATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));
1590176485.68:         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2553:41: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         REG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));
1590176485.68:                                                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2553:2: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         REG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));
1590176485.68:         ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2912:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   gcc_assert (!PREV_INSN (insn));
1590176485.68:                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176485.68:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176485.68:                ^~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2929:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   gcc_assert (!NEXT_INSN (insn));
1590176485.68:                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176485.68:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176485.68:                ^~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2966:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             insn = XVECEXP (PATTERN (insn), 0, 0);
1590176485.68:                             ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176485.68: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2993:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                             XVECLEN (PATTERN (insn), 0) - 1);
1590176485.68:                                      ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176485.68: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176485.68:                                           ^~~~~
1590176485.68: ./rtl.h:712:54: note: expanded from macro 'XVECEXP'
1590176485.68: #define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
1590176485.68:                                                           ^
1590176485.68: ./rtl.h:597:48: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                                    ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:2992:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             insn = XVECEXP (PATTERN (insn), 0,
1590176485.68:                             ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176485.68: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3037:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3040:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         insn = XVECEXP (PATTERN (insn), 0, 0);
1590176485.68:                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176485.68: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3054:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3057:46: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         insn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);
1590176485.68:                                                     ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176485.68: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176485.68:                                           ^~~~~
1590176485.68: ./rtl.h:712:54: note: expanded from macro 'XVECEXP'
1590176485.68: #define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
1590176485.68:                                                           ^
1590176485.68: ./rtl.h:597:48: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                                    ^
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3057:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         insn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);
1590176485.68:                         ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176485.68: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176485.68: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176485.68:                                       ^~~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3071:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3088:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3091:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (NOTE_INSN_BASIC_BLOCK_P (insn))
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176485.68:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3106:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3123:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3126:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (NOTE_INSN_BASIC_BLOCK_P (insn))
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176485.68:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3141:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3157:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3174:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3191:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3209:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:        insn = PREV_INSN (insn))
1590176485.68:               ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3234:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3251:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3266:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3281:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3297:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (insn = label; insn != 0 && !INSN_P (insn); insn = NEXT_INSN (insn))
1590176485.68:                                                          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3407:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     LABEL_NUSES (XEXP (x, 0))++;
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176485.68: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176485.68:                          ^           ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3433:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx before = PREV_INSN (trial);
1590176485.68:                ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3434:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx after = NEXT_INSN (trial);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3459:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       after = NEXT_INSN (after);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3471:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           && rtx_equal_p (PATTERN (insn_last), pat))
1590176485.68:                           ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3473:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (!NEXT_INSN (insn_last))
1590176485.68:            ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3475:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       insn_last = NEXT_INSN (insn_last);
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3483:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (insn = insn_last; insn ; insn = PREV_INSN (insn))
1590176485.68:                                        ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3487:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           mark_jump_label (PATTERN (insn), insn, 0);
1590176485.68:                            ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3507:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (insn = insn_last; insn ; insn = PREV_INSN (insn))
1590176485.68:                                            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3510:16: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             rtx *p = &CALL_INSN_FUNCTION_USAGE (insn);
1590176485.68:                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3513:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             *p = CALL_INSN_FUNCTION_USAGE (trial);
1590176485.68:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3523:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (note = REG_NOTES (trial); note; note = XEXP (note, 1))
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3523:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (note = REG_NOTES (trial); note; note = XEXP (note, 1))
1590176485.68:                                               ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3533:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))
1590176485.68:                                                           ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3541:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))
1590176485.68:                                                           ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3574:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             mark_label_nuses (PATTERN (insn));
1590176485.68:                               ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3576:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           insn = PREV_INSN (insn);
1590176485.68:                  ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3580:45: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   tem = emit_insn_after_setloc (seq, trial, INSN_LOCATOR (trial));
1590176485.68:                                             ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3591:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (tem = NEXT_INSN (before); tem != after; tem = NEXT_INSN (tem))
1590176485.68:              ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3591:54: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (tem = NEXT_INSN (before); tem != after; tem = NEXT_INSN (tem))
1590176485.68:                                                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3593:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       tem = try_split (PATTERN (tem), tem, 1);
1590176485.68:                        ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3598:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     ? (after ? PREV_INSN (after) : last_insn)
1590176485.68:                ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3599:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     : NEXT_INSN (before);
1590176485.68:       ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3613:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PATTERN (insn) = pattern;
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3614:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_CODE (insn) = -1;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3615:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_NOTES (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3616:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_LOCATOR (insn) = curr_insn_locator ();
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3617:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3646:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PATTERN (insn) = pattern;
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3647:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_CODE (insn) = -1;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3648:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_NOTES (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3649:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_LOCATOR (insn) = curr_insn_locator ();
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3650:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3665:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PATTERN (insn) = pattern;
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3666:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_CODE (insn) = -1;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3667:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_NOTES (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3668:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   JUMP_LABEL (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176485.68: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176485.68:                            ^            ~
1590176485.68: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176485.68: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3669:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_LOCATOR (insn) = curr_insn_locator ();
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3670:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3685:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PATTERN (insn) = pattern;
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3686:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_CODE (insn) = -1;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3687:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   REG_NOTES (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3688:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   CALL_INSN_FUNCTION_USAGE (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3689:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_LOCATOR (insn) = curr_insn_locator ();
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3690:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (insn) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3701:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PREV_INSN (insn) = last_insn;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3702:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (insn) = 0;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3705:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     NEXT_INSN (last_insn) = insn;
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3721:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx next = NEXT_INSN (after);
1590176485.68:              ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3725:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (insn) = next;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3726:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PREV_INSN (insn) = after;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3730:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       PREV_INSN (next) = insn;
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3732:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3732:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;
1590176485.68:                             ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3752:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       && (bb = BLOCK_FOR_INSN (after)))
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3754:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       set_block_for_insn (insn, bb);
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176485.68: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3762:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           && !NOTE_INSN_BASIC_BLOCK_P (insn))
1590176485.68:               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176485.68:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3766:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (after) = insn;
1590176485.68:   ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3769:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       rtx sequence = PATTERN (after);
1590176485.68:                      ^~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3770:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3783:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx prev = PREV_INSN (before);
1590176485.68:              ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3787:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PREV_INSN (insn) = prev;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3788:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (insn) = before;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3792:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       NEXT_INSN (prev) = insn;
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3795:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx sequence = PATTERN (prev);
1590176485.68:                          ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3796:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3818:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     bb = BLOCK_FOR_INSN (before);
1590176485.68:          ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3822:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       set_block_for_insn (insn, bb);
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176485.68: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3830:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:                   || NOTE_INSN_BASIC_BLOCK_P (insn));
1590176485.68:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176485.68:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176485.68:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176485.68:                ^~~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3833:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PREV_INSN (before) = insn;
1590176485.68:   ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3835:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (XVECEXP (PATTERN (before), 0, 0)) = insn;
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3835:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (XVECEXP (PATTERN (before), 0, 0)) = insn;
1590176485.68:                         ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3844:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   df_insn_delete (BLOCK_FOR_INSN (insn), INSN_UID (insn));
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3846:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_KIND (insn) = NOTE_INSN_DELETED;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3855:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx next = NEXT_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3856:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx prev = PREV_INSN (insn);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3864:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       NEXT_INSN (prev) = next;
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3867:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx sequence = PATTERN (prev);
1590176485.68:                          ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3868:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3889:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       PREV_INSN (next) = prev;
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3891:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3891:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;
1590176485.68:                             ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176485.68: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3909:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       && (bb = BLOCK_FOR_INSN (insn)))
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3934:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (CALL_INSN_FUNCTION_USAGE (call_insn))
1590176485.68:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3938:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (link = CALL_INSN_FUNCTION_USAGE (call_insn); XEXP (link, 1) != 0;
1590176485.68:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3938:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (link = CALL_INSN_FUNCTION_USAGE (call_insn); XEXP (link, 1) != 0;
1590176485.68:                                                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3939:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:            link = XEXP (link, 1))
1590176485.68:                   ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3942:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       XEXP (link, 1) = call_fusage;
1590176485.68:       ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3945:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     CALL_INSN_FUNCTION_USAGE (call_insn) = call_fusage;
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3957:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     NEXT_INSN (from) = 0;
1590176485.68:     ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3975:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (PREV_INSN (from))
1590176485.68:       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3976:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3976:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);
1590176485.68:                ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3976:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);
1590176485.68:                                    ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3977:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (NEXT_INSN (to))
1590176485.68:       ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3978:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3978:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);
1590176485.68:                ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3978:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);
1590176485.68:                                  ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3980:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     last_insn = PREV_INSN (from);
1590176485.68:                 ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3982:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     first_insn = NEXT_INSN (to);
1590176485.68:                  ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3985:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   if (NEXT_INSN (after))
1590176485.68:       ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3986:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (NEXT_INSN (after)) = to;
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3986:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (NEXT_INSN (after)) = to;
1590176485.68:                ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                               ^~~~
1590176485.68: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                                      ^~~
1590176485.68: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                       ^~~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3988:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (to) = NEXT_INSN (after);
1590176485.68:   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3988:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (to) = NEXT_INSN (after);
1590176485.68:                    ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3989:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PREV_INSN (from) = after;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3990:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (after) = from;
1590176485.68:   ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:3999:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx prev = PREV_INSN (from);
1590176485.68:              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4005:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       && (bb = BLOCK_FOR_INSN (after)))
1590176485.68:                ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4011:14: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           && (bb2 = BLOCK_FOR_INSN (from)))
1590176485.68:                     ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4021:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (x = from; x != NEXT_INSN (to); x = NEXT_INSN (x))
1590176485.68:                           ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4021:47: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (x = from; x != NEXT_INSN (to); x = NEXT_INSN (x))
1590176485.68:                                               ^~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4078:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4122:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4166:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4210:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4269:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_KIND (note) = subtype;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4270:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (note) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4271:12: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
1590176485.68: #define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
1590176485.68:                                 ^                  ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4286:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     bb = BLOCK_FOR_INSN (after);
1590176485.68:          ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4291:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
1590176485.68:                          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4291:51: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
1590176485.68:                                                   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4294:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:             set_block_for_insn (last, bb);
1590176485.68:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176485.68: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4299:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           set_block_for_insn (last, bb);
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
1590176485.68: #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
1590176485.68:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4306:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
1590176485.68:                        ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4306:49: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
1590176485.68:                                                 ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4309:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   after_after = NEXT_INSN (after);
1590176485.68:                 ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4311:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (after) = first;
1590176485.68:   ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4312:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   PREV_INSN (first) = after;
1590176485.68:   ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4313:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NEXT_INSN (last) = after_after;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4315:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     PREV_INSN (after_after) = last;
1590176485.68:     ^~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4513:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_KIND (note) = subtype;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4514:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (note) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4515:12: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
1590176485.68: #define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
1590176485.68:                                 ^                  ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4529:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   after = NEXT_INSN (after);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4532:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (after) && !INSN_LOCATOR (after))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4533:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (after) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4536:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       after = NEXT_INSN (after);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4548:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     prev = PREV_INSN (prev);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4551:52: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));
1590176485.68:                                                    ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4565:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   after = NEXT_INSN (after);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4568:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (after) && !INSN_LOCATOR (after))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4569:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (after) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4572:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       after = NEXT_INSN (after);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4584:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     prev = PREV_INSN (prev);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4587:57: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_jump_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));
1590176485.68:                                                         ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4601:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   after = NEXT_INSN (after);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4604:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (after) && !INSN_LOCATOR (after))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4605:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (after) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4608:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       after = NEXT_INSN (after);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4620:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     prev = PREV_INSN (prev);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4623:57: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_call_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));
1590176485.68:                                                         ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4637:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   after = NEXT_INSN (after);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4640:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (after) && !INSN_LOCATOR (after))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4641:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (after) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4644:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       after = NEXT_INSN (after);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4654:58: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_debug_insn_after_setloc (pattern, after, INSN_LOCATOR (after));
1590176485.68:                                                          ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4663:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx first = PREV_INSN (before);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4672:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     first = NEXT_INSN (first);
1590176485.68:             ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4675:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (first) && !INSN_LOCATOR (first))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4676:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (first) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4679:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       first = NEXT_INSN (first);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4691:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     next = PREV_INSN (next);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4694:54: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_insn_before_setloc (pattern, before, INSN_LOCATOR (next));
1590176485.68:                                                      ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4703:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx first = PREV_INSN (before);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4709:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   first = NEXT_INSN (first);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4712:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (first) && !INSN_LOCATOR (first))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4713:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (first) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4716:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       first = NEXT_INSN (first);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4728:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     next = PREV_INSN (next);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4731:59: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_jump_insn_before_setloc (pattern, before, INSN_LOCATOR (next));
1590176485.68:                                                           ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4740:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx first = PREV_INSN (before);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4746:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   first = NEXT_INSN (first);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4749:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (first) && !INSN_LOCATOR (first))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4750:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (first) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4753:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       first = NEXT_INSN (first);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4766:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     next = PREV_INSN (next);
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4769:59: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_call_insn_before_setloc (pattern, before, INSN_LOCATOR (next));
1590176485.68:                                                           ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4778:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   rtx first = PREV_INSN (before);
1590176485.68:               ^~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176485.68: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4784:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   first = NEXT_INSN (first);
1590176485.68:           ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4787:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (active_insn_p (first) && !INSN_LOCATOR (first))
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4788:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         INSN_LOCATOR (first) = loc;
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4791:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       first = NEXT_INSN (first);
1590176485.68:               ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4802:60: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:     return emit_debug_insn_before_setloc (pattern, before, INSN_LOCATOR (before));
1590176485.68:                                                            ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4833:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4879:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:4921:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           rtx next = NEXT_INSN (insn);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5016:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_DATA (note) = NOTE_DATA (orig);
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
1590176485.68: #define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
1590176485.68:                                 ^                  ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5016:22: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_DATA (note) = NOTE_DATA (orig);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
1590176485.68: #define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
1590176485.68:                                 ^                  ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5017:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_KIND (note) = NOTE_KIND (orig);
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5017:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_KIND (note) = NOTE_KIND (orig);
1590176485.68:                      ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5018:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (note) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5034:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   NOTE_KIND (note) = kind;
1590176485.68:   ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176485.68: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176485.68:                         ^            ~
1590176485.68: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176485.68: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5035:12: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));
1590176485.68:            ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
1590176485.68: #define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
1590176485.68:                                 ^                  ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5036:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   BLOCK_FOR_INSN (note) = NULL;
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176485.68: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176485.68:                              ^             ~
1590176485.68: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.68: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.68: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5050:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       return emit_clobber (XEXP (x, 1));
1590176485.68:                            ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5078:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       return emit_use (XEXP (x, 1));
1590176485.68:                        ^        ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5162:10: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   return REG_NOTES (insn);
1590176485.68:          ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5279:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last));
1590176485.68:                              ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5279:55: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last));
1590176485.68:                                                       ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176485.68: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5521:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       orig_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (orig);
1590176485.68:                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1185:37: note: expanded from macro 'ASM_OPERANDS_INPUT_VEC'
1590176485.68: #define ASM_OPERANDS_INPUT_VEC(RTX) XCVEC (RTX, 3, ASM_OPERANDS)
1590176485.68:                                     ^           ~
1590176485.68: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176485.68: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5522:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       copy_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (copy);
1590176485.68:                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1185:37: note: expanded from macro 'ASM_OPERANDS_INPUT_VEC'
1590176485.68: #define ASM_OPERANDS_INPUT_VEC(RTX) XCVEC (RTX, 3, ASM_OPERANDS)
1590176485.68:                                     ^           ~
1590176485.68: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176485.68: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5523:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       orig_asm_constraints_vector = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (orig);
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1186:48: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT_VEC'
1590176485.68: #define ASM_OPERANDS_INPUT_CONSTRAINT_VEC(RTX) XCVEC (RTX, 4, ASM_OPERANDS)
1590176485.68:                                                ^           ~
1590176485.68: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176485.68: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5524:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       copy_asm_constraints_vector = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (copy);
1590176485.68:                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:1186:48: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT_VEC'
1590176485.68: #define ASM_OPERANDS_INPUT_CONSTRAINT_VEC(RTX) XCVEC (RTX, 4, ASM_OPERANDS)
1590176485.68:                                                ^           ~
1590176485.68: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176485.68: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176485.68:                                ^                 ~
1590176485.68: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176485.68: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5983:45: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       new_rtx = emit_insn_after (copy_insn (PATTERN (insn)), after);
1590176485.68:                                             ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5987:50: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       new_rtx = emit_jump_insn_after (copy_insn (PATTERN (insn)), after);
1590176485.68:                                                  ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5991:51: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       new_rtx = emit_debug_insn_after (copy_insn (PATTERN (insn)), after);
1590176485.68:                                                   ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5995:50: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       new_rtx = emit_call_insn_after (copy_insn (PATTERN (insn)), after);
1590176485.68:                                                  ^~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5996:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:       if (CALL_INSN_FUNCTION_USAGE (insn))
1590176485.68:           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5998:17: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:           = copy_insn (CALL_INSN_FUNCTION_USAGE (insn));
1590176485.68:                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:5997:2: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:         CALL_INSN_FUNCTION_USAGE (new_rtx)
1590176485.68:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176485.68: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176485.68:                                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6011:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   mark_jump_label (PATTERN (new_rtx), new_rtx, 0);
1590176485.68:                    ^~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176485.68: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6013:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_LOCATOR (new_rtx) = INSN_LOCATOR (insn);
1590176485.68:   ^~~~~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6013:28: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_LOCATOR (new_rtx) = INSN_LOCATOR (insn);
1590176485.68:                            ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176485.68: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176485.68:                            ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6023:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
1590176485.68:               ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176485.68: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176485.68:                         ^          ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6023:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
1590176485.68:                                              ^           ~
1590176485.68: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.68: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6033:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_CODE (new_rtx) = INSN_CODE (insn);
1590176485.68:   ^~~~~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: emit-rtl.c:6033:25: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.68:   INSN_CODE (new_rtx) = INSN_CODE (insn);
1590176485.68:                         ^~~~~~~~~~~~~~~~
1590176485.68: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176485.68: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176485.68:                         ^           ~
1590176485.68: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.68: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.68:                          ^                ~
1590176485.68: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.68: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.68:                                      ^            ~
1590176485.68: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.68:     rtunion fld[1];
1590176485.68:     ^
1590176485.68: 454 warnings generated.
1590176485.68: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getopt1.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getopt1.c
1590176485.68: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.68: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getpwd.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getpwd.c
1590176485.68: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.68: getpwd.c:90:27: warning: implicit declaration of function 'getcwd' is invalid in C99 [-Wimplicit-function-declaration]
1590176485.68:         for (s = GUESSPATHLEN;  !getcwd (p = XNEWVEC (char, s), s);  s *= 2)
1590176485.68:                                  ^
1590176485.68: 1 warning generated.
1590176485.76: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getruntime.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getruntime.c
1590176485.76: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.76: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o genrtl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  genrtl.c
1590176485.76: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.76: genrtl.c:33:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:48:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:95:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:96:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:97:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XBBDEF (rt, 3) = arg3;
1590176485.76:   ^           ~
1590176485.76: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.76: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:98:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 4) = arg4;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:99:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 5) = arg5;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:100:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 6) = arg6;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:101:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 7) = arg7;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:122:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:123:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:124:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XBBDEF (rt, 3) = arg3;
1590176485.76:   ^           ~
1590176485.76: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.76: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:125:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 4) = arg4;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:126:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 5) = arg5;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:127:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 6) = arg6;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:128:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 7) = arg7;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:129:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 8) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:151:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:152:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:153:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XBBDEF (rt, 3) = arg3;
1590176485.76:   ^           ~
1590176485.76: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.76: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:154:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 4) = arg4;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:155:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 5) = arg5;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:156:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 6) = arg6;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:157:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 7) = arg7;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:158:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 8) = arg8;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:174:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:175:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:176:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 3) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:177:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 4) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:178:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 5) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:179:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 6) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:180:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 7) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:199:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:200:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:201:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XBBDEF (rt, 3) = arg3;
1590176485.76:   ^           ~
1590176485.76: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176485.76: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:202:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 4) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:203:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 5) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:204:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 6) = arg4;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:205:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 7) = arg5;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:220:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:240:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:241:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:242:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 3) = arg3;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:243:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 4) = arg4;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:244:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 5) = arg5;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:245:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 6) = arg6;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:260:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:277:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:278:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:279:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 3) = arg3;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:280:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 4) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:296:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:297:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:337:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XWINT (rt, 1) = arg1;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:598:29: note: expanded from macro 'XWINT'
1590176485.76: #define XWINT(RTX, N)               ((RTX)->u.hwint[N])
1590176485.76:                                      ^              ~
1590176485.76: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.76:     HOST_WIDE_INT hwint[1];
1590176485.76:     ^
1590176485.76: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.76: #   define HOST_WIDE_INT long
1590176485.76:                          ^
1590176485.76: genrtl.c:338:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XWINT (rt, 2) = arg2;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:598:29: note: expanded from macro 'XWINT'
1590176485.76: #define XWINT(RTX, N)               ((RTX)->u.hwint[N])
1590176485.76:                                      ^              ~
1590176485.76: ./rtl.h:317:5: note: array 'hwint' declared here
1590176485.76:     HOST_WIDE_INT hwint[1];
1590176485.76:     ^
1590176485.76: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176485.76: #   define HOST_WIDE_INT long
1590176485.76:                          ^
1590176485.76: genrtl.c:365:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 1) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:366:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 2) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:381:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:395:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 1) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:422:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 1) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:423:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   X0EXP (rt, 2) = NULL_RTX;
1590176485.76:   ^          ~
1590176485.76: ./rtl.h:721:27: note: expanded from macro 'X0EXP'
1590176485.76: #define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
1590176485.76:                             ^                ~
1590176485.76: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176485.76: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:439:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:440:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:456:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:457:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:472:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:488:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:489:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:517:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:532:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:549:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:550:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:551:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 3) = arg3;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:566:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:582:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:583:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:599:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:600:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:616:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:617:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:633:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:634:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:651:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:652:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 2) = arg2;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:653:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XSTR (rt, 3) = arg3;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:703:23: note: expanded from macro 'XSTR'
1590176485.76: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:668:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XVEC (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:705:23: note: expanded from macro 'XVEC'
1590176485.76: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:683:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XINT (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176485.76: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: genrtl.c:698:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176485.76:   XEXP (rt, 1) = arg1;
1590176485.76:   ^         ~
1590176485.76: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176485.76: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176485.76:                          ^                ~
1590176485.76: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176485.76: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176485.76:                                      ^            ~
1590176485.76: ./rtl.h:316:5: note: array 'fld' declared here
1590176485.76:     rtunion fld[1];
1590176485.76:     ^
1590176485.76: 88 warnings generated.
1590176485.86: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ggc-common.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ggc-common.c
1590176485.86: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176485.86: ggc-common.c:751:17: error: variable has incomplete type 'struct rlimit'
1590176485.86:   struct rlimit rlim;
1590176485.86:                 ^
1590176485.86: ggc-common.c:751:10: note: forward declaration of 'struct rlimit'
1590176485.86:   struct rlimit rlim;
1590176485.86:          ^
1590176485.86: 1 error generated.
1590176485.86: specmake: *** [/home/ucsd/SpectreSandboxing/spec2017/benchspec/Makefile.defaults:352: ggc-common.o] Error 1
1590176485.86: specmake: *** Waiting for unfinished jobs....
1590176485.86: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getopt.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getopt.c
1590176485.86: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176486.66: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o expr.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  expr.c
1590176486.66: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176486.66: In file included from expr.c:41:
1590176486.66: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   if (INSN_CODE (insn) < 0)
1590176486.66:       ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176486.66: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176486.66: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: In file included from expr.c:41:
1590176486.66: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176486.66:                               ^~~~~~~~~~~~~~
1590176486.66: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176486.66: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: In file included from expr.c:41:
1590176486.66: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176486.66:     ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176486.66: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176486.66: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: In file included from expr.c:41:
1590176486.66: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   return INSN_CODE (insn);
1590176486.66:          ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176486.66: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176486.66: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: In file included from expr.c:41:
1590176486.66: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176486.66: #if HAVE_DESIGNATED_INITIALIZERS
1590176486.66:     ^
1590176486.66: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176486.66:    && !defined(__cplusplus))
1590176486.66:        ^
1590176486.66: expr.c:272:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   PATTERN (insn) = pat;
1590176486.66:   ^~~~~~~~~~~~~~
1590176486.66: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176486.66: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:297:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             SET_SRC (pat) = mem;
1590176486.66:             ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176486.66: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176486.66:                      ^          ~
1590176486.66: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176486.66: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:302:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             SET_SRC (pat) = mem1;
1590176486.66:             ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176486.66: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176486.66:                      ^          ~
1590176486.66: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176486.66: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:307:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             SET_SRC (pat) = reg;
1590176486.66:             ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176486.66: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176486.66:                      ^          ~
1590176486.66: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176486.66: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:312:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             SET_SRC (pat) = reg;
1590176486.66:             ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176486.66: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176486.66:                      ^          ~
1590176486.66: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176486.66: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:415:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       convert_move (XEXP (to, 1), XEXP (from, 1), unsignedp);
1590176486.66:                     ^         ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:415:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       convert_move (XEXP (to, 1), XEXP (from, 1), unsignedp);
1590176486.66:                                   ^           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:881:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (from));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:881:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (from));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                     ^~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:20: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                    ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                                             ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:26: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                          ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                     ^~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:20: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                    ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                                             ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:26: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                          ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                     ^~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:32: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                                             ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:38: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                      ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                     ^~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:32: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
1590176486.66:                                             ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:38: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                      ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:893:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       to_addr_mode = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
1590176486.66:                                                       ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:893:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       to_addr_mode = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
1590176486.66:                                                       ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:20: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                    ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                               ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:26: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                          ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:20: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                    ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                               ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:26: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                          ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:32: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                               ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:38: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                      ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:32: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
1590176486.66:                               ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:338:38: note: expanded from macro 'MIN'
1590176486.66: #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
1590176486.66:                                      ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1227:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:            && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))
1590176486.66:                                     ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176486.66: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176486.66:                                    ^~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1227:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:            && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))
1590176486.66:                                     ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176486.66: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176486.66:                                    ^~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1228:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:            && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (y)))
1590176486.66:                                     ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176486.66: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176486.66:                                    ^~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1228:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:            && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (y)))
1590176486.66:                                     ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176486.66: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176486.66:                                    ^~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1480:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (x));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1480:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (x));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1482:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (y));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1482:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (y));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1629:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       rtx offset = XEXP (XVECEXP (orig, 0, i), 1);
1590176486.66:                    ^                           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1681:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       HOST_WIDE_INT bytepos = INTVAL (XEXP (XVECEXP (dst, 0, i), 1));
1590176486.66:                                       ^                          ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176486.66: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176486.66:                            ^~~
1590176486.66: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176486.66: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176486.66:                                       ^~~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1859:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           e = alloc_EXPR_LIST (REG_NOTE_KIND (e), d, XEXP (e, 1));
1590176486.66:                                                      ^        ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1899:59: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:         e = alloc_EXPR_LIST (REG_NOTE_KIND (e), copy_to_reg (d), XEXP (e, 1));
1590176486.66:                                                                  ^        ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:1999:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           if (INTVAL (XEXP (XVECEXP (src, 0, start), 1)) == bytepos)
1590176486.66:                       ^                              ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176486.66: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176486.66:                            ^~~
1590176486.66: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176486.66: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176486.66:                                       ^~~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2018:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           if (INTVAL (XEXP (XVECEXP (src, 0, finish - 1), 1)) == bytepos)
1590176486.66:                       ^                                   ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176486.66: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176486.66:                            ^~~
1590176486.66: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176486.66: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176486.66:                                       ^~~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2039:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       HOST_WIDE_INT bytepos = INTVAL (XEXP (XVECEXP (src, 0, i), 1));
1590176486.66:                                       ^                          ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176486.66: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176486.66:                            ^~~
1590176486.66: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176486.66: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176486.66:                                       ^~~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2057:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               dest = XEXP (dst, 1);
1590176486.66:                      ^          ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2404:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2404:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2490:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (data->to));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2490:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:     = targetm.addr_space.address_mode (MEM_ADDR_SPACE (data->to));
1590176486.66:                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2660:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MEM_ALIGN (object);
1590176486.66:           ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2660:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   align = MEM_ALIGN (object);
1590176486.66:           ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2668:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   else if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (object)))
1590176486.66:                                  ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176486.66: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176486.66:                                    ^~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2668:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   else if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (object)))
1590176486.66:                                  ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
1590176486.66: #define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
1590176486.66:                                    ^~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2932:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       tree decl = SYMBOL_REF_DECL (XEXP (cplx, 0));
1590176486.66:                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176486.66:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176486.66:                                           ^              ~
1590176486.66: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176486.66: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176486.66:                             ^                ~
1590176486.66: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176486.66: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2990:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       MEM_COPY_ATTRIBUTES (ret, x);
1590176486.66:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1308:4: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
1590176486.66:    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
1590176486.66:    ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:2990:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       MEM_COPY_ATTRIBUTES (ret, x);
1590176486.66:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1308:22: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
1590176486.66:    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
1590176486.66:                      ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3070:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       rtx expr = XEXP (XEXP (x, 0), 1);
1590176486.66:                  ^                  ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3075:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       val = INTVAL (XEXP (expr, 1));
1590176486.66:                     ^           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176486.66: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176486.66:                            ^~~
1590176486.66: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176486.66: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176486.66:                                       ^~~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3267:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   offset = i * UNITS_PER_WORD + SUBREG_BYTE (op);
1590176486.66:                                 ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176486.66: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176486.66:                          ^            ~
1590176486.66: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176486.66: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3272:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   if (SUBREG_BYTE (op) == 0
1590176486.66:       ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176486.66: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176486.66:                          ^            ~
1590176486.66: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176486.66: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3461:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                          MEM_ADDR_SPACE (x))
1590176486.66:                                          ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3461:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                          MEM_ADDR_SPACE (x))
1590176486.66:                                          ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3467:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                         MEM_ADDR_SPACE (y)))
1590176486.66:                                         ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3467:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                         MEM_ADDR_SPACE (y)))
1590176486.66:                                         ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3475:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       && (set = single_set (last_insn)) != NULL_RTX
1590176486.66:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176486.66:                           ? PATTERN (I) : single_set_1 (I)) \
1590176486.66:                                           ^~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176486.66: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176486.66:                                          ^~~~~~~~~~~
1590176486.66: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176486.66: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3475:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       && (set = single_set (last_insn)) != NULL_RTX
1590176486.66:                 ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176486.66:                           ? PATTERN (I) : single_set_1 (I)) \
1590176486.66:                             ^~~~~~~~~~~
1590176486.66: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176486.66: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176486.66:                         ^           ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3477:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       && ! rtx_equal_p (y_cst, SET_SRC (set)))
1590176486.66:                                ^~~~~~~~~~~~~
1590176486.66: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176486.66: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176486.66:                      ^          ~
1590176486.66: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176486.66: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3815:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           && MEM_ALIGN (xinner) >= align
1590176486.66:              ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:3815:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           && MEM_ALIGN (xinner) >= align
1590176486.66:              ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4081:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                 MEM_ALIGN (str_rtx), str_mode, 0);
1590176486.66:                                 ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4081:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                 MEM_ALIGN (str_rtx), str_mode, 0);
1590176486.66:                                 ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4252:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
1590176486.66:                                                ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4252:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
1590176486.66:                                                ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4264:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               && MEM_ALIGN (to_rtx) == GET_MODE_ALIGNMENT (mode1))
1590176486.66:                  ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4264:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               && MEM_ALIGN (to_rtx) == GET_MODE_ALIGNMENT (mode1))
1590176486.66:                  ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4657:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                 MEM_ALIGN (target), false))
1590176486.66:                                 ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4657:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                 MEM_ALIGN (target), false))
1590176486.66:                                 ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4665:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                   MEM_ALIGN (target), false,
1590176486.66:                                   ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4665:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                   MEM_ALIGN (target), false,
1590176486.66:                                   ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4759:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 = targetm.addr_space.pointer_mode (MEM_ADDR_SPACE (target));
1590176486.66:                                                    ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4759:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 = targetm.addr_space.pointer_mode (MEM_ADDR_SPACE (target));
1590176486.66:                                                    ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4761:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 = targetm.addr_space.address_mode (MEM_ADDR_SPACE (target));
1590176486.66:                                                    ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:4761:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 = targetm.addr_space.address_mode (MEM_ADDR_SPACE (target));
1590176486.66:                                                    ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5008:48: warning: shift count >= width of type [-Wshift-count-overflow]
1590176486.66:   const HOST_WIDE_INT max = ~((HOST_WIDE_INT)1 << (HOST_BITS_PER_WIDE_INT-1));
1590176486.66:                                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: expr.c:5171:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           && MEM_ALIAS_SET (target) != 0)
1590176486.66:              ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                             ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5171:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           && MEM_ALIAS_SET (target) != 0)
1590176486.66:              ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                                                        ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5303:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                   = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
1590176486.66:                                                      ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5303:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                   = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
1590176486.66:                                                      ^~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5694:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           alias = MEM_ALIAS_SET (target);
1590176486.66:                   ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                             ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5694:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           alias = MEM_ALIAS_SET (target);
1590176486.66:                   ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                                                        ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5829:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           && ((((MEM_ALIGN (target) < GET_MODE_ALIGNMENT (mode))
1590176486.66:                  ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5829:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           && ((((MEM_ALIGN (target) < GET_MODE_ALIGNMENT (mode))
1590176486.66:                  ^~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5920:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       if (!MEM_KEEP_ALIAS_SET_P (to_rtx) && MEM_ALIAS_SET (to_rtx) != 0)
1590176486.66:                                             ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                             ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:5920:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       if (!MEM_KEEP_ALIAS_SET_P (to_rtx) && MEM_ALIAS_SET (to_rtx) != 0)
1590176486.66:                                             ^~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                                                        ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6339:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                SUBREG_BYTE (value));
1590176486.66:                                ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176486.66: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176486.66:                          ^            ~
1590176486.66: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176486.66: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6358:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:       op2 = XEXP (value, 1);
1590176486.66:             ^            ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6383:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                       force_operand (XEXP (XEXP (value,
1590176486.66:                                                      ^
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6462:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                              SUBREG_BYTE (value));
1590176486.66:                              ^~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176486.66: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176486.66:                          ^            ~
1590176486.66: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176486.66: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176486.66:                                ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6607:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               && alias_sets_conflict_p (MEM_ALIAS_SET (x),
1590176486.66:                                         ^~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                             ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6607:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               && alias_sets_conflict_p (MEM_ALIAS_SET (x),
1590176486.66:                                         ^~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
1590176486.66: #define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
1590176486.66:                                                        ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:6905:24: warning: logical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses]
1590176486.66:           if (DECL_P (exp) && !TREE_USED (exp) == 0)
1590176486.66:                               ^                ~~
1590176486.66: expr.c:6905:24: note: add parentheses after the '!' to evaluate the comparison first
1590176486.66:           if (DECL_P (exp) && !TREE_USED (exp) == 0)
1590176486.66:                               ^
1590176486.66:                                (                   )
1590176486.66: expr.c:6905:24: note: add parentheses around left hand side expression to silence this warning
1590176486.66:           if (DECL_P (exp) && !TREE_USED (exp) == 0)
1590176486.66:                               ^
1590176486.66:                               (               )
1590176486.66: expr.c:8494:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                                MEM_ADDR_SPACE (decl_rtl)))
1590176486.66:                                                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:8494:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                                MEM_ADDR_SPACE (decl_rtl)))
1590176486.66:                                                ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:8589:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           itarg = XEXP (original_target, 1);
1590176486.66:                   ^                      ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:8615:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                             MEM_ADDR_SPACE (temp)))
1590176486.66:                                             ^~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:8615:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                                             MEM_ADDR_SPACE (temp)))
1590176486.66:                                             ^~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:8993:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 op0 = XEXP (op0, 1);
1590176486.66:                       ^          ~
1590176486.66: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176486.66: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176486.66:                          ^                ~
1590176486.66: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176486.66: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9037:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               = targetm.addr_space.address_mode (MEM_ADDR_SPACE (op0));
1590176486.66:                                                  ^~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66: #define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
1590176486.66:                              ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9037:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               = targetm.addr_space.address_mode (MEM_ADDR_SPACE (op0));
1590176486.66:                                                  ^~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
1590176486.66:                                                   : MEM_ATTRS (RTX)->addrspace)
1590176486.66:                                                     ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9048:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 && MEM_ALIGN (op0) == GET_MODE_ALIGNMENT (mode1))
1590176486.66:                    ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9048:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                 && MEM_ALIGN (op0) == GET_MODE_ALIGNMENT (mode1))
1590176486.66:                    ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9092:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                           && (MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode1)
1590176486.66:                               ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9092:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                           && (MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode1)
1590176486.66:                               ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9144:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
1590176486.66:                                                ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9144:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:               mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
1590176486.66:                                                ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9211:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
1590176486.66:                                            ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9211:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:           mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
1590176486.66:                                            ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9317:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                   mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
1590176486.66:                                                    ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9317:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:                   mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
1590176486.66:                                                    ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
1590176486.66:                                      ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:339:20: note: expanded from macro 'MAX'
1590176486.66: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176486.66:                    ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
1590176486.66:                                      ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:339:20: note: expanded from macro 'MAX'
1590176486.66: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176486.66:                    ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
1590176486.66:                                      ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:  ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:339:32: note: expanded from macro 'MAX'
1590176486.66: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176486.66:                                ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:             set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
1590176486.66:                                      ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176486.66: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176486.66:                         ^~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176486.66: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176486.66:                        ^               ~
1590176486.66: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176486.66: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176486.66:                             ^                 ~
1590176486.66: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176486.66: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./system.h:339:32: note: expanded from macro 'MAX'
1590176486.66: #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
1590176486.66:                                ^
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: expr.c:10304:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176486.66:   SET_SYMBOL_REF_DECL (XEXP (DECL_RTL (decl), 0), NULL);
1590176486.66:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176486.66: ./rtl.h:1375:49: note: expanded from macro 'SET_SYMBOL_REF_DECL'
1590176486.66:   (gcc_assert (!CONSTANT_POOL_ADDRESS_P (RTX)), X0TREE ((RTX), 2) = (DECL))
1590176486.66:                                                 ^              ~
1590176486.66: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176486.66: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176486.66:                             ^                ~
1590176486.66: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176486.66: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176486.66:                                      ^            ~
1590176486.66: ./rtl.h:316:5: note: array 'fld' declared here
1590176486.66:     rtunion fld[1];
1590176486.66:     ^
1590176486.66: 127 warnings generated.
1590176486.89: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ggc-page.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ggc-page.c
1590176486.89: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176487.09: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gcse.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gcse.c
1590176487.09: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176487.09: In file included from gcse.c:156:
1590176487.09: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   if (INSN_CODE (insn) < 0)
1590176487.09:       ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.09: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.09: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: In file included from gcse.c:156:
1590176487.09: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176487.09:                               ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: In file included from gcse.c:156:
1590176487.09: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176487.09:     ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.09: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.09: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: In file included from gcse.c:156:
1590176487.09: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   return INSN_CODE (insn);
1590176487.09:          ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.09: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.09: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: In file included from gcse.c:156:
1590176487.09: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176487.09: #if HAVE_DESIGNATED_INITIALIZERS
1590176487.09:     ^
1590176487.09: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176487.09:    && !defined(__cplusplus))
1590176487.09:        ^
1590176487.09: gcse.c:821:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       NEXT_INSN (test_insn) = PREV_INSN (test_insn) = 0;
1590176487.09:                               ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176487.09: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:821:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       NEXT_INSN (test_insn) = PREV_INSN (test_insn) = 0;
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:826:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   PUT_MODE (SET_DEST (PATTERN (test_insn)), GET_MODE (x));
1590176487.09:                       ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176487.09: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176487.09: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176487.09:                                                   ^~~
1590176487.09: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176487.09: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:353:31: note: expanded from macro 'PUT_MODE'
1590176487.09: #define PUT_MODE(RTX, MODE) ((RTX)->mode = (MODE))
1590176487.09:                               ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:827:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   SET_SRC (PATTERN (test_insn)) = x;
1590176487.09:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:827:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   SET_SRC (PATTERN (test_insn)) = x;
1590176487.09:            ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                            ^~~
1590176487.09: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                             ^~~
1590176487.09: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:829:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   icode = recog (PATTERN (test_insn), test_insn, &num_clobbers);
1590176487.09:                  ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:996:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           list_entry = XEXP (list_entry, 1);
1590176487.09:                        ^                 ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1015:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       note_stores (PATTERN (setter), mems_conflict_for_gcse_p, NULL);
1590176487.09:                    ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1018:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       list_entry = XEXP (list_entry, 1);
1590176487.09:                    ^                 ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1148:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           && BLOCK_FOR_INSN (antic_occr->insn) != BLOCK_FOR_INSN (insn))
1590176487.09:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1148:44: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           && BLOCK_FOR_INSN (antic_occr->insn) != BLOCK_FOR_INSN (insn))
1590176487.09:                                                   ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1173:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           && BLOCK_FOR_INSN (avail_occr->insn) == BLOCK_FOR_INSN (insn))
1590176487.09:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1173:44: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           && BLOCK_FOR_INSN (avail_occr->insn) == BLOCK_FOR_INSN (insn))
1590176487.09:                                                   ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1247:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       && BLOCK_FOR_INSN (cur_occr->insn) == BLOCK_FOR_INSN (insn))
1590176487.09:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1247:45: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       && BLOCK_FOR_INSN (cur_occr->insn) == BLOCK_FOR_INSN (insn))
1590176487.09:                                             ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1283:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       && REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 1))
1590176487.09:                                        ^        ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176487.09: #define REGNO(RTX) (rhs_regno(RTX))
1590176487.09:                               ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1299:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx src = SET_SRC (pat);
1590176487.09:             ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1385:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                && (insn == BB_END (BLOCK_FOR_INSN (insn))
1590176487.09:                                    ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./basic-block.h:492:26: note: expanded from macro 'BB_END'
1590176487.09: #define BB_END(B)       (B)->il.rtl->end_
1590176487.09:                          ^
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1387:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                    || BLOCK_FOR_INSN (tmp) != BLOCK_FOR_INSN (insn)
1590176487.09:                       ^~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1387:33: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                    || BLOCK_FOR_INSN (tmp) != BLOCK_FOR_INSN (insn)
1590176487.09:                                               ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1463:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx pat = PATTERN (insn);
1590176487.09:             ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1580:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   bb = BLOCK_FOR_INSN (insn)->index;
1590176487.09:        ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1595:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   int bb = BLOCK_FOR_INSN (insn)->index;
1590176487.09:            ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1612:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:     note_stores (PATTERN (insn), canon_list_insert, (void*) insn);
1590176487.09:                  ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1671:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (current_bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.09:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1671:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (current_bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) = NEXT_INSN (INSN))
1590176487.09:                 ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1685:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           note_stores (PATTERN (insn), record_last_set_info, insn);
1590176487.09:                        ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1695:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (current_bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.09:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1695:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (current_bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) = NEXT_INSN (INSN))
1590176487.09:                 ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1791:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       next = XEXP (list, 1);
1590176487.09:              ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1875:35: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       if (load_killed_in_block_p (BLOCK_FOR_INSN (insn),
1590176487.09:                                   ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:1962:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx pat = PATTERN (insn);
1590176487.09:             ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2096:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                     list_entry = XEXP (list_entry, 1);
1590176487.09:                                  ^                 ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2108:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                     list_entry = XEXP (list_entry, 1);
1590176487.09:                                  ^                 ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2240:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx set = single_set (insn);
1590176487.09:             ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2240:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx set = single_set (insn);
1590176487.09:             ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2254:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       src = simplify_rtx (SET_SRC (set));
1590176487.09:                           ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2265:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   if (!success && set && reg_mentioned_p (from, SET_SRC (set)))
1590176487.09:                                                 ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2270:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       src = simplify_replace_rtx (SET_SRC (set), from, to);
1590176487.09:                                   ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2272:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       if (!rtx_equal_p (src, SET_SRC (set))
1590176487.09:                              ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2336:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       src = SET_SRC (set->expr);
1590176487.09:             ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2386:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   set_src = note_src ? note_src : SET_SRC (set);
1590176487.09:                                   ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2395:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       rtx setcc_set = single_set (setcc);
1590176487.09:                       ^~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2395:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       rtx setcc_set = single_set (setcc);
1590176487.09:                       ^~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2398:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                 ? XEXP (setcc_note, 0) : SET_SRC (setcc_set);
1590176487.09:                                          ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2408:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   if (rtx_equal_p (new_rtx, SET_SRC (set)))
1590176487.09:                             ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2468:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:             && BB_HEAD (e->dest) == JUMP_LABEL (jump))
1590176487.09:                                     ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176487.09: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176487.09:                            ^            ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2486:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   if ((sset = single_set (insn)) != NULL
1590176487.09:               ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2486:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   if ((sset = single_set (insn)) != NULL
1590176487.09:               ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2487:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       && NEXT_INSN (insn)
1590176487.09:          ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2488:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       && any_condjump_p (NEXT_INSN (insn)) && onlyjump_p (NEXT_INSN (insn)))
1590176487.09:                          ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2488:59: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       && any_condjump_p (NEXT_INSN (insn)) && onlyjump_p (NEXT_INSN (insn)))
1590176487.09:                                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2492:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           && cprop_jump (BLOCK_FOR_INSN (insn), insn, NEXT_INSN (insn), from, to))
1590176487.09:                          ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2492:48: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           && cprop_jump (BLOCK_FOR_INSN (insn), insn, NEXT_INSN (insn), from, to))
1590176487.09:                                                       ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2508:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:     return cprop_jump (BLOCK_FOR_INSN (insn), NULL, insn, from, to);
1590176487.09:                        ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2526:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   note_uses (&PATTERN (insn), find_used_regs, NULL);
1590176487.09:               ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2556:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       src = SET_SRC (pat);
1590176487.09:             ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2663:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:               && asm_noperands (PATTERN (insn)) < 0)))
1590176487.09:                                 ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2730:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.09:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2730:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) = NEXT_INSN (INSN))
1590176487.09:                 ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2738:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                   note_uses (&PATTERN (insn), local_cprop_find_used_regs,
1590176487.09:                               ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2792:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   const_rtx cst = XEXP (cond, 1);
1590176487.09:                   ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2858:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                                              XEXP (cond, 1));
1590176487.09:                                              ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./genrtl.h:280:41: note: expanded from macro 'gen_rtx_SET'
1590176487.09:   gen_rtx_fmt_ee (SET, (MODE), (ARG0), (ARG1))
1590176487.09:                                         ^~~~
1590176487.09: ./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
1590176487.09:         gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
1590176487.09:                                        ^~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2910:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       src = SET_SRC (set->expr);
1590176487.09:             ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2934:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   for (insn = e->insns.r; insn; insn = NEXT_INSN (insn))
1590176487.09:                                        ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:2965:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   note_uses (&PATTERN (insn), find_used_regs, NULL);
1590176487.09:               ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3023:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           src = SET_SRC (pc_set (jump));
1590176487.09:                 ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3027:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                                         SET_DEST (PATTERN (setcc)),
1590176487.09:                                                   ^~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176487.09: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176487.09:                              ^~~
1590176487.09: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176487.09: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176487.09:                                                   ^~~
1590176487.09: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176487.09: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3028:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                                         SET_SRC (PATTERN (setcc)));
1590176487.09:                                         ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3028:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                                         SET_SRC (PATTERN (setcc)));
1590176487.09:                                                  ^~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                            ^~~
1590176487.09: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                             ^~~
1590176487.09: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3031:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                                           SET_SRC (set->expr));
1590176487.09:                                           ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3045:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:               dest = BLOCK_FOR_INSN (XEXP (new_rtx, 0));
1590176487.09:                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3073:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                   rtx pat = PATTERN (setcc);
1590176487.09:                             ^~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3083:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                   print_rtl (dump_file, SET_SRC (set->expr));
1590176487.09:                                         ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3129:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           FOR_BB_INSNS (bb, insn)
1590176487.09:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.09:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3129:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           FOR_BB_INSNS (bb, insn)
1590176487.09:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) = NEXT_INSN (INSN))
1590176487.09:                 ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3139:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                 dest = SET_DEST (PATTERN (insn));
1590176487.09:                                  ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176487.09: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176487.09:                              ^~~
1590176487.09: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176487.09: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176487.09:                                                   ^~~
1590176487.09: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176487.09: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3428:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   while (NEXT_INSN (pat_end) != NULL_RTX)
1590176487.09:          ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3429:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:     pat_end = NEXT_INSN (pat_end);
1590176487.09:               ^~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3509:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:              || NOTE_INSN_BASIC_BLOCK_P (insn))
1590176487.09:                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
1590176487.09:    && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
1590176487.09:       ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.09: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.09:                         ^            ~
1590176487.09: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.09: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3510:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:         insn = NEXT_INSN (insn);
1590176487.09:                ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3520:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:         add_label_notes (PATTERN (pat), new_insn);
1590176487.09:                          ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3523:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       pat = NEXT_INSN (pat);
1590176487.09:             ^~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3641:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx pat = PATTERN (insn);
1590176487.09:             ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3668:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:               if (expr_equiv_p (SET_SRC (x), expr->expr))
1590176487.09:                                 ^~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3702:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       old_reg = SET_SRC (set);
1590176487.09:                 ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3717:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:               BLOCK_FOR_INSN (insn)->index, INSN_UID (new_insn), indx,
1590176487.09:               ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3770:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                 if (! pre_expr_reaches_here_p (BLOCK_FOR_INSN (avail->insn),
1590176487.09:                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3772:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                                                BLOCK_FOR_INSN (occr->insn)))
1590176487.09:                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3794:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx set = single_set (insn), set2;
1590176487.09:             ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3794:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   rtx set = single_set (insn), set2;
1590176487.09:             ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3804:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   set2 = single_set (new_rtx);
1590176487.09:          ^~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3804:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:   set2 = single_set (new_rtx);
1590176487.09:          ^~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3810:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:     eqv = SET_SRC (set);
1590176487.09:           ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3847:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:             basic_block bb = BLOCK_FOR_INSN (insn);
1590176487.09:                              ^~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3851:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                 && (set = single_set (insn)) != 0
1590176487.09:                           ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:3851:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                 && (set = single_set (insn)) != 0
1590176487.09:                           ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4034:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:         LABEL_NUSES (XEXP (x, 0))++;
1590176487.09:         ^~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
1590176487.09: #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
1590176487.09:                          ^           ~
1590176487.09: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.09: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4381:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                       while (BLOCK_FOR_INSN (occr->insn) != dominated && occr)
1590176487.09:                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
1590176487.09: #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
1590176487.09:                              ^             ~
1590176487.09: ./rtl.h:709:25: note: expanded from macro 'XBBDEF'
1590176487.09: #define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176487.09: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4386:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                       set = single_set (insn);
1590176487.09:                             ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                                           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.09: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.09:                                          ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4386:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                       set = single_set (insn);
1590176487.09:                             ^~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.09:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.09:                             ^~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4745:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.09:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4745:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       FOR_BB_INSNS (bb, insn)
1590176487.09:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) = NEXT_INSN (INSN))
1590176487.09:                 ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4751:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                   rtx src = SET_SRC (PATTERN (insn));
1590176487.09:                             ^~~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4751:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                   rtx src = SET_SRC (PATTERN (insn));
1590176487.09:                                      ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                            ^~~
1590176487.09: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                             ^~~
1590176487.09: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4752:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                   rtx dest = SET_DEST (PATTERN (insn));
1590176487.09:                                        ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
1590176487.09: #define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
1590176487.09:                              ^~~
1590176487.09: ./rtl.h:750:51: note: expanded from macro 'XC2EXP'
1590176487.09: #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
1590176487.09:                                                   ^~~
1590176487.09: ./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
1590176487.09: #define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
1590176487.09:                                       ^~~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4788:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:                 invalidate_any_buried_refs (PATTERN (insn));
1590176487.09:                                             ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4867:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:       for ( ; list != NULL_RTX; list = XEXP (list, 1))
1590176487.09:                                        ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4870:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           rtx pat = PATTERN (insn);
1590176487.09:                     ^~~~~~~~~~~~~~
1590176487.09: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.09: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4871:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           rtx src = SET_SRC (pat);
1590176487.09:                     ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4888:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           copy = gen_move_insn (reg, copy_rtx (SET_SRC (pat)));
1590176487.09:                                                ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4890:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           SET_SRC (pat) = reg;
1590176487.09:           ^~~~~~~~~~~~~
1590176487.09: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.09: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.09:                      ^          ~
1590176487.09: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.09: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.09:                                ^                 ~
1590176487.09: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.09: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:4894:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           INSN_CODE (insn) = -1;
1590176487.09:           ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.09: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.09: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:5006:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           FOR_BB_INSNS (bb, insn)
1590176487.09:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.09:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: gcse.c:5006:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.09:           FOR_BB_INSNS (bb, insn)
1590176487.09:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.09: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.09:        (INSN) = NEXT_INSN (INSN))
1590176487.09:                 ^~~~~~~~~~~~~~~~
1590176487.09: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.09: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.09:                         ^           ~
1590176487.09: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.09: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.09:                          ^                ~
1590176487.09: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.09: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.09:                                      ^            ~
1590176487.09: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.09:     rtunion fld[1];
1590176487.09:     ^
1590176487.09: 120 warnings generated.
1590176487.31: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o function.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  function.c
1590176487.31: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176487.31: In file included from function.c:51:
1590176487.31: ./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   if (INSN_CODE (insn) < 0)
1590176487.31:       ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.31: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: In file included from function.c:51:
1590176487.31: ./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176487.31:                               ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: In file included from function.c:51:
1590176487.31: ./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:     INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
1590176487.31:     ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.31: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: In file included from function.c:51:
1590176487.31: ./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   return INSN_CODE (insn);
1590176487.31:          ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.31: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: In file included from function.c:51:
1590176487.31: ./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
1590176487.31: #if HAVE_DESIGNATED_INITIALIZERS
1590176487.31:     ^
1590176487.31: ./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
1590176487.31:    && !defined(__cplusplus))
1590176487.31:        ^
1590176487.31: function.c:656:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:            && (p = find_temp_slot_from_address (XEXP (x, 1))) != 0)
1590176487.31:                                                 ^        ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:668:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:             if (INTVAL (XEXP (x, 1)) >= p->base_offset
1590176487.31:                         ^        ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176487.31: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176487.31:                            ^~~
1590176487.31: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176487.31: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176487.31:                                       ^~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:669:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                 && INTVAL (XEXP (x, 1)) < p->base_offset + p->full_size)
1590176487.31:                            ^        ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176487.31: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176487.31:                            ^~~
1590176487.31: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176487.31: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176487.31:                                       ^~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1029:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           update_temp_slot_address (XEXP (old_rtx, 1), new_rtx);
1590176487.31:                                     ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1036:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         update_temp_slot_address (XEXP (old_rtx, 1), XEXP (new_rtx, 1));
1590176487.31:                                   ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1036:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         update_temp_slot_address (XEXP (old_rtx, 1), XEXP (new_rtx, 1));
1590176487.31:                                                      ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1037:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       else if (rtx_equal_p (XEXP (old_rtx, 1), XEXP (new_rtx, 0)))
1590176487.31:                             ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1038:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         update_temp_slot_address (XEXP (old_rtx, 0), XEXP (new_rtx, 1));
1590176487.31:                                                      ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1039:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       else if (rtx_equal_p (XEXP (old_rtx, 0), XEXP (new_rtx, 1)))
1590176487.31:                                                ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1040:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         update_temp_slot_address (XEXP (old_rtx, 1), XEXP (new_rtx, 0));
1590176487.31:                                   ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1041:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       else if (rtx_equal_p (XEXP (old_rtx, 1), XEXP (new_rtx, 1)))
1590176487.31:                             ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1041:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       else if (rtx_equal_p (XEXP (old_rtx, 1), XEXP (new_rtx, 1)))
1590176487.31:                                                ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1367:61: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           *loc = simplify_gen_binary (PLUS, GET_MODE (x), new_rtx, XEXP (x, 1));
1590176487.31:                                                                    ^        ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1416:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   set = single_set (insn);
1590176487.31:         ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.31:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.31:                                           ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.31: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.31:                                          ^~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1416:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   set = single_set (insn);
1590176487.31:         ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.31:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.31:                             ^~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1429:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           x = simplify_gen_binary (PLUS, GET_MODE (new_rtx), SET_SRC (set),
1590176487.31:                                                              ^~~~~~~~~~~~~
1590176487.31: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.31: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.31:                      ^          ~
1590176487.31: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.31: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1447:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       new_rtx = instantiate_new_reg (SET_SRC (set), &offset);
1590176487.31:                                      ^~~~~~~~~~~~~
1590176487.31: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.31: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.31:                      ^          ~
1590176487.31: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.31: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1469:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       insn_code = INSN_CODE (insn);
1590176487.31:                   ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.31: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1517:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       insn_code = INSN_CODE (insn);
1590176487.31:                   ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.31: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1599:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                                    GET_MODE (new_rtx), SUBREG_BYTE (x));
1590176487.31:                                                        ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
1590176487.31: #define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
1590176487.31:                          ^            ~
1590176487.31: ./rtl.h:737:32: note: expanded from macro 'XCUINT'
1590176487.31: #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1638:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       INSN_CODE (insn) = -1;
1590176487.31:       ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
1590176487.31: #define INSN_CODE(INSN) XINT (INSN, 6)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1641:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   if (asm_noperands (PATTERN (insn)) >= 0)
1590176487.31:                      ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1643:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       if (!check_asm_operands (PATTERN (insn)))
1590176487.31:                                ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1671:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       instantiate_decl_rtl (XEXP (x, 1));
1590176487.31:                             ^        ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1789:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176487.31:                                          ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1801:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           for_each_rtx (&INSN_VAR_LOCATION (insn),
1590176487.31:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
1590176487.31: #define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
1590176487.31:                                 ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1809:17: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         for_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);
1590176487.31:                        ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176487.31: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176487.31:                         ^          ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:1813:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           for_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),
1590176487.31:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
1590176487.31: #define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
1590176487.31:                                         ^          ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2472:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
1590176487.31:               ^~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176487.31: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176487.31:                        ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2472:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
1590176487.31:                                        ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                          ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2472:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
1590176487.31:               ^~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176487.31: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176487.31:                                                   ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2472:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
1590176487.31:                                        ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                                                     ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2478:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                                 plus_constant (MEM_OFFSET (stack_parm),
1590176487.31:                                                ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                          ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2478:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                                 plus_constant (MEM_OFFSET (stack_parm),
1590176487.31:                                                ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                                                     ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2557:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:             && INTVAL (XEXP (XVECEXP (entry_parm, 0, i), 1)) == 0)
1590176487.31:                        ^                                 ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176487.31: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176487.31:                            ^~~
1590176487.31: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176487.31: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176487.31:                                       ^~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2605:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               && TYPE_ALIGN (data->nominal_type) > MEM_ALIGN (stack_parm)
1590176487.31:                                                    ^~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176487.31: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176487.31:  ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2605:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               && TYPE_ALIGN (data->nominal_type) > MEM_ALIGN (stack_parm)
1590176487.31:                                                    ^~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176487.31: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176487.31:                         ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2606:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               && MEM_ALIGN (stack_parm) < PREFERRED_STACK_BOUNDARY)))
1590176487.31:                  ^~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
1590176487.31: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176487.31:  ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2606:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               && MEM_ALIGN (stack_parm) < PREFERRED_STACK_BOUNDARY)))
1590176487.31:                  ^~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
1590176487.31: (MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
1590176487.31:                         ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2952:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           int regnoi = REGNO (XEXP (parmreg, 1));
1590176487.31:                               ^              ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176487.31: #define REGNO(RTX) (rhs_regno(RTX))
1590176487.31:                               ^~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2962:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               set = single_set (sinsn);
1590176487.31:                     ^~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.31:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.31:                                           ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.31: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.31:                                          ^~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2962:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               set = single_set (sinsn);
1590176487.31:                     ^~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.31:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.31:                             ^~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2972:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       else if ((set = single_set (linsn)) != 0
1590176487.31:                       ^~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176487.31:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.31:                                           ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176487.31: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176487.31:                                          ^~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:2972:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       else if ((set = single_set (linsn)) != 0
1590176487.31:                       ^~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176487.31:                           ? PATTERN (I) : single_set_1 (I)) \
1590176487.31:                             ^~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3016:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (offset && MEM_OFFSET (data->stack_parm))
1590176487.31:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                          ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3016:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (offset && MEM_OFFSET (data->stack_parm))
1590176487.31:                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                                                     ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3018:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                             plus_constant (MEM_OFFSET (data->stack_parm),
1590176487.31:                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                          ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3018:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                             plus_constant (MEM_OFFSET (data->stack_parm),
1590176487.31:                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176487.31: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176487.31:                                                     ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176487.31: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176487.31:                        ^               ~
1590176487.31: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176487.31: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176487.31:                             ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3860:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   for (insn = insns; insn; insn = NEXT_INSN (insn))
1590176487.31:                                   ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3864:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           if (NOTE_KIND (insn) == NOTE_INSN_BLOCK_BEG)
1590176487.31:               ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.31: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.31:                         ^            ~
1590176487.31: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.31: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3866:21: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               tree block = NOTE_BLOCK (insn);
1590176487.31:                            ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176487.31: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176487.31:                                 ^             ~
1590176487.31: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176487.31: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3884:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                   NOTE_BLOCK (insn) = new_block;
1590176487.31:                   ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176487.31: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176487.31:                                 ^             ~
1590176487.31: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176487.31: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3905:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           else if (NOTE_KIND (insn) == NOTE_INSN_BLOCK_END)
1590176487.31:                    ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.31: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.31:                         ^            ~
1590176487.31: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.31: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:3907:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               NOTE_BLOCK (insn) = VEC_pop (tree, *p_block_stack);
1590176487.31:               ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
1590176487.31: #define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
1590176487.31:                                 ^             ~
1590176487.31: ./rtl.h:743:32: note: expanded from macro 'XCTREE'
1590176487.31: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:4331:3: warning: switch condition has boolean value [-Wswitch-bool]
1590176487.31:   switch (HAVE_stack_protect_test != 0)
1590176487.31:   ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: function.c:4654:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176487.31:                                              ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:4924:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   for (tmp = insns; tmp != end; tmp = NEXT_INSN (tmp))
1590176487.31:                                       ^~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:4956:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         INSN_LOCATOR (insn) = loc;
1590176487.31:         ^~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
1590176487.31: #define INSN_LOCATOR(INSN) XINT (INSN, 4)
1590176487.31:                            ^           ~
1590176487.31: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176487.31: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:4957:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       insn = NEXT_INSN (insn);
1590176487.31:              ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:4973:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
1590176487.31:                         ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176487.31: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176487.31: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176487.31:                                      ^~~
1590176487.31: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                       ^~~
1590176487.31: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176487.31: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176487.31:                                           ^~~~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:4974:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:         if (htab_find (hash, XVECEXP (PATTERN (insn), 0, i)))
1590176487.31:                                       ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176487.31: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176487.31: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176487.31:                                      ^~~
1590176487.31: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                       ^~~
1590176487.31: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176487.31: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176487.31:                                       ^~~~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5093:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           label = PREV_INSN (label);
1590176487.31:                   ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176487.31: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5112:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               if (!JUMP_P (jump) || JUMP_LABEL (jump) != label)
1590176487.31:                                     ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176487.31: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176487.31:                            ^            ~
1590176487.31: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.31: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5188:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       prev = PREV_INSN (last);
1590176487.31:              ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176487.31: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5189:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       trial = try_split (PATTERN (last), last, 1);
1590176487.31:                          ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5193:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       record_insns (NEXT_INSN (prev), NEXT_INSN (trial), &epilogue_insn_hash);
1590176487.31:                     ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5193:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       record_insns (NEXT_INSN (prev), NEXT_INSN (trial), &epilogue_insn_hash);
1590176487.31:                                       ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5308:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           next = NEXT_INSN (insn);
1590176487.31:                  ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5310:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               && (NOTE_KIND (insn) == NOTE_INSN_FUNCTION_BEG))
1590176487.31:                   ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.31: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.31:                         ^            ~
1590176487.31: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.31: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5311:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:             reorder_insns (insn, insn, PREV_INSN (epilogue_end));
1590176487.31:                                        ^~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176487.31: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5342:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
1590176487.31:                                              ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5346:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               if (NOTE_KIND (insn) == NOTE_INSN_PROLOGUE_END)
1590176487.31:                   ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.31: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.31:                         ^            ~
1590176487.31: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.31: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5364:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               for (note = NEXT_INSN (last); ; note = NEXT_INSN (note))
1590176487.31:                           ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5364:47: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               for (note = NEXT_INSN (last); ; note = NEXT_INSN (note))
1590176487.31:                                                      ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5367:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                       && NOTE_KIND (note) == NOTE_INSN_PROLOGUE_END)
1590176487.31:                          ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.31: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.31:                         ^            ~
1590176487.31: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.31: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5374:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:             last = NEXT_INSN (last);
1590176487.31:                    ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5390:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           FOR_BB_INSNS (bb, insn)
1590176487.31:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.31:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.31:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5390:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           FOR_BB_INSNS (bb, insn)
1590176487.31:           ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.31:        (INSN) = NEXT_INSN (INSN))
1590176487.31:                 ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5394:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                   if (NOTE_KIND (insn) == NOTE_INSN_EPILOGUE_BEG)
1590176487.31:                       ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176487.31: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176487.31:                         ^            ~
1590176487.31: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176487.31: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5421:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:               if (PREV_INSN (first) != note)
1590176487.31:                   ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176487.31: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5422:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:                 reorder_insns (note, note, PREV_INSN (first));
1590176487.31:                                            ^~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176487.31: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5660:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   rtx op = SET_SRC (p_sets[0]);
1590176487.31:            ^~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176487.31: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176487.31:                      ^          ~
1590176487.31: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176487.31: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5661:17: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   int ninputs = ASM_OPERANDS_INPUT_LENGTH (op);
1590176487.31:                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
1590176487.31: #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
1590176487.31:                                        ^              ~
1590176487.31: ./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
1590176487.31: #define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
1590176487.31:                                               ^           ~
1590176487.31: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176487.31: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176487.31: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176487.31:                                           ^~~~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5662:18: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:   rtvec inputs = ASM_OPERANDS_INPUT_VEC (op);
1590176487.31:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1185:37: note: expanded from macro 'ASM_OPERANDS_INPUT_VEC'
1590176487.31: #define ASM_OPERANDS_INPUT_VEC(RTX) XCVEC (RTX, 3, ASM_OPERANDS)
1590176487.31:                                     ^           ~
1590176487.31: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176487.31: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176487.31:                                ^                 ~
1590176487.31: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176487.31: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5669:32: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       const char *constraint = ASM_OPERANDS_INPUT_CONSTRAINT (op, i);
1590176487.31:                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
1590176487.31:   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
1590176487.31:         ^              ~
1590176487.31: ./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
1590176487.31: #define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
1590176487.31:                                            ^           ~
1590176487.31: ./rtl.h:740:32: note: expanded from macro 'XCVEC'
1590176487.31: #define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
1590176487.31:                                ^                 ~
1590176487.31: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176487.31: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176487.31: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176487.31:                                       ^~~~~
1590176487.31: ./rtl.h:703:35: note: expanded from macro 'XSTR'
1590176487.31: #define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
1590176487.31:                                      ^~~
1590176487.31: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                       ^~~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5770:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       FOR_BB_INSNS (bb, insn)
1590176487.31:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
1590176487.31:        (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
1590176487.31:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5770:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:       FOR_BB_INSNS (bb, insn)
1590176487.31:       ^~~~~~~~~~~~~~~~~~~~~~~
1590176487.31: ./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
1590176487.31:        (INSN) = NEXT_INSN (INSN))
1590176487.31:                 ^~~~~~~~~~~~~~~~
1590176487.31: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176487.31: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5775:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:           pat = PATTERN (insn);
1590176487.31:                 ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: function.c:5779:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176487.31:             p_sets = &PATTERN (insn), noutputs = 1;
1590176487.31:                       ^~~~~~~~~~~~~~
1590176487.31: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176487.31: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176487.31:                         ^           ~
1590176487.31: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176487.31: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176487.31:                          ^                ~
1590176487.31: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176487.31: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176487.31:                                      ^            ~
1590176487.31: ./rtl.h:316:5: note: array 'fld' declared here
1590176487.31:     rtunion fld[1];
1590176487.31:     ^
1590176487.31: 94 warnings generated.
1590176490.33: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dwarf2out.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dwarf2out.c
1590176490.33: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176490.33: dwarf2out.c:1215:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           offset = INTVAL (XEXP (rtl, 1));
1590176490.33:                            ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1220:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           offset = -INTVAL (XEXP (rtl, 1));
1590176490.33:                             ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1253:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   const_rtx src = SET_SRC (pattern);
1590176490.33:                   ^~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176490.33: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176490.33:                      ^          ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1279:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       offset = INTVAL (XEXP (src, 1));
1590176490.33:                        ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1299:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               rtx val = XEXP (XEXP (src, 1), 1);
1590176490.33:                         ^                    ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1299:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               rtx val = XEXP (XEXP (src, 1), 1);
1590176490.33:                               ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                                      ^~~
1590176490.33: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1355:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:         offset = stack_adjust_offset (PATTERN (insn), cur_args_size, 0);
1590176490.33:                                       ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1361:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
1590176490.33:                             ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176490.33: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176490.33:                                      ^~~
1590176490.33: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176490.33: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176490.33:                                           ^~~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1363:48: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i),
1590176490.33:                                                       ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176490.33: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176490.33:                                      ^~~
1590176490.33: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176490.33: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176490.33:                                       ^~~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1396:18: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       rtx dest = JUMP_LABEL (insn);
1590176490.33:                  ^~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
1590176490.33: #define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
1590176490.33:                            ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1442:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           for (; insn; insn = NEXT_INSN (insn))
1590176490.33:                               ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176490.33: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1466:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               body = PATTERN (insn);
1590176490.33:                      ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1588:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           insn = PATTERN (insn);
1590176490.33:                  ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1592:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:             insn = SET_SRC (insn);
1590176490.33:                    ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176490.33: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176490.33:                      ^          ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1594:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           dwarf2out_args_size ("", INTVAL (XEXP (insn, 1)));
1590176490.33:                                            ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1626:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:     offset = stack_adjust_offset (PATTERN (insn), args_size, 0);
1590176490.33:                                   ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1632:37: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       for (offset = 0, i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
1590176490.33:                                     ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176490.33: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176490.33:                                      ^~~
1590176490.33: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
1590176490.33: #define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
1590176490.33:                                           ^~~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1634:44: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i),
1590176490.33:                                                   ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:705:35: note: expanded from macro 'XVEC'
1590176490.33: #define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
1590176490.33:                                      ^~~
1590176490.33: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
1590176490.33: #define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
1590176490.33:                                       ^~~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1831:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       cfa.offset = INTVAL (XEXP (pat, 1));
1590176490.33:                            ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1855:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   src = XEXP (pat, 1);
1590176490.33:         ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1861:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       cfa.offset -= INTVAL (XEXP (src, 1));
1590176490.33:                             ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1885:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   src = XEXP (set, 1);
1590176490.33:         ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1899:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       offset = INTVAL (XEXP (addr, 1)) - cfa.offset;
1590176490.33:                        ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:1941:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   src = XEXP (set, 1);
1590176490.33:         ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2222:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   src = SET_SRC (expr);
1590176490.33:         ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
1590176490.33: #define SET_SRC(RTX) XCEXP(RTX, 1, SET)
1590176490.33:                      ^          ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2288:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                   offset = INTVAL (XEXP (src, 1));
1590176490.33:                                    ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2291:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                   gcc_assert ((unsigned) REGNO (XEXP (src, 1))
1590176490.33:                                                 ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1041:31: note: expanded from macro 'REGNO'
1590176490.33: #define REGNO(RTX) (rhs_regno(RTX))
1590176490.33:                               ^~~
1590176490.33: ./system.h:625:16: note: expanded from macro 'gcc_assert'
1590176490.33:      ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
1590176490.33:                ^~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2328:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               offset = INTVAL (XEXP (src, 1));
1590176490.33:                                ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2345:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                   offset = - INTVAL (XEXP (src, 1));
1590176490.33:                                      ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2356:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                        && XEXP (src, 1) == stack_pointer_rtx)
1590176490.33:                           ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2370:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                   cfa_temp.offset = INTVAL (XEXP (src, 1));
1590176490.33:                                             ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2391:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           cfa_temp.offset |= INTVAL (XEXP (src, 1));
1590176490.33:                                      ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2404:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           targetm.dwarf_handle_frame_unspec (label, expr, XINT (src, 1));
1590176490.33:                                                           ^          ~
1590176490.33: ./rtl.h:702:23: note: expanded from macro 'XINT'
1590176490.33: #define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2416:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               fde->stack_realignment = INTVAL (XEXP (src, 1));
1590176490.33:                                                ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2444:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           offset = -INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1));
1590176490.33:                             ^                               ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2444:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           offset = -INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1));
1590176490.33:                                   ^                     ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:704:35: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                                      ^~~
1590176490.33: ./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2496:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:             offset = INTVAL (XEXP (XEXP (dest, 0), 1));
1590176490.33:                              ^                     ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2701:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))
1590176490.33:               ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
1590176490.33: #define REG_NOTES(INSN) XEXP(INSN, 7)
1590176490.33:                         ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2701:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))
1590176490.33:                                              ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2717:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:             n = PATTERN (insn);
1590176490.33:                 ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2728:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           n = single_set (insn);
1590176490.33:               ^~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1801:22: note: expanded from macro 'single_set'
1590176490.33:                           ? PATTERN (I) : single_set_1 (I)) \
1590176490.33:                                           ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1803:42: note: expanded from macro 'single_set_1'
1590176490.33: #define single_set_1(I) single_set_2 (I, PATTERN (I))
1590176490.33:                                          ^~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2728:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           n = single_set (insn);
1590176490.33:               ^~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1801:8: note: expanded from macro 'single_set'
1590176490.33:                           ? PATTERN (I) : single_set_1 (I)) \
1590176490.33:                             ^~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2737:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:             n = PATTERN (insn);
1590176490.33:                 ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2749:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:             n = PATTERN (insn);
1590176490.33:                 ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2779:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   insn = PATTERN (insn);
1590176490.33:          ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2797:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   for (i = NEXT_INSN (insn); i ; i = NEXT_INSN (i))
1590176490.33:            ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176490.33: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2797:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   for (i = NEXT_INSN (insn); i ; i = NEXT_INSN (i))
1590176490.33:                                      ^~~~~~~~~~~~~
1590176490.33: ./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
1590176490.33: #define NEXT_INSN(INSN) XEXP (INSN, 2)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2811:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           rtx seq = PATTERN (i);
1590176490.33:                     ^~~~~~~~~~~
1590176490.33: ./rtl.h:771:23: note: expanded from macro 'PATTERN'
1590176490.33: #define PATTERN(INSN)   XEXP (INSN, 5)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2846:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       rtx p = PREV_INSN (i);
1590176490.33:               ^~~~~~~~~~~~~
1590176490.33: ./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
1590176490.33: #define PREV_INSN(INSN) XEXP (INSN, 1)
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:2849:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       if (NOTE_KIND (p) == NOTE_INSN_BASIC_BLOCK)
1590176490.33:           ^~~~~~~~~~~~~
1590176490.33: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176490.33: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176490.33:                         ^            ~
1590176490.33: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176490.33: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:3501:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       SYMBOL_REF_FLAGS (sym_ref) |= SYMBOL_FLAG_LOCAL;
1590176490.33:       ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176490.33: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176490.33:                                 ^             ~
1590176490.33: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176490.33: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:3882:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       SYMBOL_REF_FLAGS (ref) = SYMBOL_FLAG_LOCAL;
1590176490.33:       ^~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176490.33: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176490.33:                                 ^             ~
1590176490.33: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176490.33: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:4668:32: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
1590176490.33:       && ((offset > 0 && *p <= INTTYPE_MAXIMUM (HOST_WIDE_INT) - offset)
1590176490.33:                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./system.h:281:44: note: expanded from macro 'INTTYPE_MAXIMUM'
1590176490.33: #define INTTYPE_MAXIMUM(t) ((t) (~ (t) 0 - INTTYPE_MINIMUM (t)))
1590176490.33:                                            ^~~~~~~~~~~~~~~~~~~
1590176490.33: ./system.h:280:40: note: expanded from macro 'INTTYPE_MINIMUM'
1590176490.33:                              ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
1590176490.33:                                ~~~~~~~ ^
1590176490.33: dwarf2out.c:4669:28: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
1590176490.33:           || (offset < 0 && *p >= INTTYPE_MINIMUM (HOST_WIDE_INT) - offset)))
1590176490.33:                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./system.h:280:40: note: expanded from macro 'INTTYPE_MINIMUM'
1590176490.33:                              ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
1590176490.33:                                ~~~~~~~ ^
1590176490.33: dwarf2out.c:7773:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       if ((!rtx_equal_p (NOTE_VAR_LOCATION_LOC (temp->last->var_loc_note),
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:7773:26: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       if ((!rtx_equal_p (NOTE_VAR_LOCATION_LOC (temp->last->var_loc_note),
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                            ^~~
1590176490.33: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:7774:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                          NOTE_VAR_LOCATION_LOC (loc_note)))
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:7774:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                          NOTE_VAR_LOCATION_LOC (loc_note)))
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                            ^~~
1590176490.33: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12739:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:               offset += INTVAL (XEXP (elim, 1));
1590176490.33:                                 ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12814:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
1590176490.33:       ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176490.33: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176490.33:                        ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12814:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
1590176490.33:       ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176490.33: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176490.33:                                                   ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12814:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
1590176490.33:                                      ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176490.33: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176490.33:                          ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12814:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
1590176490.33:                                      ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176490.33: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176490.33:                                                     ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12817:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   base = get_base_address (MEM_EXPR (mem));
1590176490.33:                            ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176490.33: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176490.33:                        ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12817:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   base = get_base_address (MEM_EXPR (mem));
1590176490.33:                            ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176490.33: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176490.33:                                                   ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12823:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   loc_result = loc_descriptor_from_tree (MEM_EXPR (mem), 1);
1590176490.33:                                          ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
1590176490.33: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176490.33:                        ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12823:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   loc_result = loc_descriptor_from_tree (MEM_EXPR (mem), 1);
1590176490.33:                                          ^~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
1590176490.33: #define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
1590176490.33:                                                   ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12827:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (INTVAL (MEM_OFFSET (mem)))
1590176490.33:               ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176490.33: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176490.33:                          ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12827:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (INTVAL (MEM_OFFSET (mem)))
1590176490.33:               ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176490.33: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176490.33:                                                     ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12828:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:     loc_descr_plus_const (&loc_result, INTVAL (MEM_OFFSET (mem)));
1590176490.33:                                                ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
1590176490.33: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176490.33:                          ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12828:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:     loc_descr_plus_const (&loc_result, INTVAL (MEM_OFFSET (mem)));
1590176490.33:                                                ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
1590176490.33: #define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
1590176490.33:                                                     ^~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
1590176490.33: #define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
1590176490.33:                        ^               ~
1590176490.33: ./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
1590176490.33: #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
1590176490.33:                             ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12894:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)
1590176490.33:       ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
1590176490.33:   ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
1590176490.33:                       ^~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176490.33: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176490.33:                                 ^             ~
1590176490.33: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176490.33: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12902:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (SYMBOL_REF_EXTERNAL_P (rtl))
1590176490.33:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1421:5: note: expanded from macro 'SYMBOL_REF_EXTERNAL_P'
1590176490.33:   ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_EXTERNAL) != 0)
1590176490.33:     ^~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176490.33: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176490.33:                                 ^             ~
1590176490.33: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176490.33: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:12904:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       tree decl = SYMBOL_REF_DECL (rtl);
1590176490.33:                   ^~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176490.33:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176490.33:                                           ^              ~
1590176490.33: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176490.33: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13068:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:          rtl = XEXP (rtl, 1);
1590176490.33:                ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13079:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)
1590176490.33:              ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
1590176490.33:   ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
1590176490.33:                       ^~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
1590176490.33: #define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
1590176490.33:                                 ^             ~
1590176490.33: ./rtl.h:718:27: note: expanded from macro 'X0INT'
1590176490.33: #define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13118:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       rtl = XEXP (rtl, 1);
1590176490.33:             ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13136:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                                           INTVAL (XEXP (rtl, 1)),
1590176490.33:                                                   ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13146:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:             loc_descr_plus_const (&mem_loc_result, INTVAL (XEXP (rtl, 1)));
1590176490.33:                                                            ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13150:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                 = mem_loc_descriptor (XEXP (rtl, 1), mode,
1590176490.33:                                       ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13206:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
1590176490.33:                                 ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13220:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
1590176490.33:                                 ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13301:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
1590176490.33:                                     ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13340:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                                  == (INTVAL (XEXP (rtl, 1))
1590176490.33:                                              ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13347:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                 op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) << shift);
1590176490.33:                                                   ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13399:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
1590176490.33:                                     ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13429:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                 op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) & mask);
1590176490.33:                                                   ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13446:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                                           + INTVAL (XEXP (rtl, 1)));
1590176490.33:                                                     ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13465:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
1590176490.33:                                 ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13543:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           size = INTVAL (XEXP (rtl, 1));
1590176490.33:                          ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13544:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           shift = INTVAL (XEXP (rtl, 2));
1590176490.33:                           ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13752:58: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       loc_result = concat_loc_descriptor (XEXP (rtl, 0), XEXP (rtl, 1),
1590176490.33:                                                          ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13764:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           rtx loc = PAT_VAR_LOCATION_LOC (rtl);
1590176490.33:                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13771:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       rtl = XEXP (rtl, 1);
1590176490.33:             ^          ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:13838:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                 = CONST_DOUBLE_HIGH (rtl);
1590176490.33:                   ^~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176490.33: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176490.33:                              ^           ~
1590176490.33: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176490.33: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176490.33:                                      ^              ~
1590176490.33: ./rtl.h:317:5: note: array 'hwint' declared here
1590176490.33:     HOST_WIDE_INT hwint[1];
1590176490.33:     ^
1590176490.33: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176490.33: #   define HOST_WIDE_INT long
1590176490.33:                          ^
1590176490.33: dwarf2out.c:13875:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                       hi = CONST_DOUBLE_HIGH (elt);
1590176490.33:                            ^~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176490.33: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176490.33:                              ^           ~
1590176490.33: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176490.33: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176490.33:                                      ^              ~
1590176490.33: ./rtl.h:317:5: note: array 'hwint' declared here
1590176490.33:     HOST_WIDE_INT hwint[1];
1590176490.33:     ^
1590176490.33: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176490.33: #   define HOST_WIDE_INT long
1590176490.33:                          ^
1590176490.33: dwarf2out.c:14021:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           varloc = PAT_VAR_LOCATION_LOC (varloc);
1590176490.33:                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14126:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:     if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
1590176490.33:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14126:9: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:     if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
1590176490.33:         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                            ^~~
1590176490.33: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14131:11: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:         varloc = NOTE_VAR_LOCATION (node->var_loc_note);
1590176490.33:                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14143:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
1590176490.33:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14143:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
1590176490.33:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                            ^~~
1590176490.33: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14146:16: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       varloc = NOTE_VAR_LOCATION (node->var_loc_note);
1590176490.33:                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:14269:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   if (!TREE_ASM_WRITTEN (SYMBOL_REF_DECL (XEXP (rtl, 0))))
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176490.33:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176490.33:                                           ^              ~
1590176490.33: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176490.33: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./tree.h:1286:34: note: expanded from macro 'TREE_ASM_WRITTEN'
1590176490.33: #define TREE_ASM_WRITTEN(NODE) ((NODE)->base.asm_written_flag)
1590176490.33:                                  ^~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:15344:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                          CONST_DOUBLE_HIGH (rtl), CONST_DOUBLE_LOW (rtl));
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176490.33: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176490.33:                              ^           ~
1590176490.33: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176490.33: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176490.33:                                      ^              ~
1590176490.33: ./rtl.h:317:5: note: array 'hwint' declared here
1590176490.33:     HOST_WIDE_INT hwint[1];
1590176490.33:     ^
1590176490.33: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176490.33: #   define HOST_WIDE_INT long
1590176490.33:                          ^
1590176490.33: dwarf2out.c:15374:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                     hi = CONST_DOUBLE_HIGH (elt);
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
1590176490.33: #define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
1590176490.33:                              ^           ~
1590176490.33: ./rtl.h:600:36: note: expanded from macro 'XCMWINT'
1590176490.33: #define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
1590176490.33:                                      ^              ~
1590176490.33: ./rtl.h:317:5: note: array 'hwint' declared here
1590176490.33:     HOST_WIDE_INT hwint[1];
1590176490.33:     ^
1590176490.33: ./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
1590176490.33: #   define HOST_WIDE_INT long
1590176490.33:                          ^
1590176490.33: dwarf2out.c:15823:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:           || SYMBOL_REF_DECL (XEXP (rtl, 0)) != decl)
1590176490.33:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176490.33:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176490.33:                                           ^              ~
1590176490.33: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176490.33: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:15919:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       && NOTE_VAR_LOCATION (loc_list->first->var_loc_note)
1590176490.33:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:15920:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       && NOTE_VAR_LOCATION_LOC (loc_list->first->var_loc_note))
1590176490.33:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:15920:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       && NOTE_VAR_LOCATION_LOC (loc_list->first->var_loc_note))
1590176490.33:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                            ^~~
1590176490.33: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:15925:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       rtl = NOTE_VAR_LOCATION_LOC (node->var_loc_note);
1590176490.33:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                    ^             ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:15925:13: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       rtl = NOTE_VAR_LOCATION_LOC (node->var_loc_note);
1590176490.33:             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
1590176490.33:   PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                         ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
1590176490.33: #define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
1590176490.33:                                            ^~~
1590176490.33: ./rtl.h:739:45: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:16270:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       offset += INTVAL (XEXP (elim, 1));
1590176490.33:                         ^           ~
1590176490.33: ./rtl.h:704:23: note: expanded from macro 'XEXP'
1590176490.33: #define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
1590176490.33:                          ^                ~
1590176490.33: ./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
1590176490.33: #define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:1082:28: note: expanded from macro 'INTVAL'
1590176490.33: #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
1590176490.33:                            ^~~
1590176490.33: ./rtl.h:599:33: note: expanded from macro 'XCWINT'
1590176490.33: #define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:18456:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:                    && NOTE_KIND (insn) == NOTE_INSN_DELETED_LABEL))))
1590176490.33:                       ^~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
1590176490.33: #define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
1590176490.33:                         ^            ~
1590176490.33: ./rtl.h:736:32: note: expanded from macro 'XCINT'
1590176490.33: #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
1590176490.33:                                ^                 ~
1590176490.33: ./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:20367:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:   decl = NOTE_VAR_LOCATION_DECL (loc_note);
1590176490.33:          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:904:26: note: expanded from macro 'NOTE_VAR_LOCATION_DECL'
1590176490.33:   PAT_VAR_LOCATION_DECL (NOTE_VAR_LOCATION (NOTE))
1590176490.33:                          ^~~~~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
1590176490.33: #define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
1590176490.33:                                 ^            ~
1590176490.33: ./rtl.h:739:32: note: expanded from macro 'XCEXP'
1590176490.33: #define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
1590176490.33:                                ^                 ~
1590176490.33: note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
1590176490.33: ./rtl.h:893:46: note: expanded from macro 'PAT_VAR_LOCATION_DECL'
1590176490.33: #define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))
1590176490.33:                                              ^~~
1590176490.33: ./rtl.h:743:45: note: expanded from macro 'XCTREE'
1590176490.33: #define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
1590176490.33:                                             ^~~
1590176490.33: ./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
1590176490.33: #define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
1590176490.33:                                       ^~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:21188:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       && SYMBOL_REF_DECL (rtl)
1590176490.33:          ^~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176490.33:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176490.33:                                           ^              ~
1590176490.33: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176490.33: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: dwarf2out.c:21190:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
1590176490.33:       && !TREE_ASM_WRITTEN (SYMBOL_REF_DECL (rtl)))
1590176490.33:                             ^~~~~~~~~~~~~~~~~~~~~
1590176490.33: ./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
1590176490.33:   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
1590176490.33:                                           ^              ~
1590176490.33: ./rtl.h:725:28: note: expanded from macro 'X0TREE'
1590176490.33: #define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
1590176490.33:                             ^                ~
1590176490.33: ./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
1590176490.33: #define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
1590176490.33:                                      ^            ~
1590176490.33: ./tree.h:1286:34: note: expanded from macro 'TREE_ASM_WRITTEN'
1590176490.33: #define TREE_ASM_WRITTEN(NODE) ((NODE)->base.asm_written_flag)
1590176490.33:                                  ^~~~
1590176490.33: ./rtl.h:316:5: note: array 'fld' declared here
1590176490.33:     rtunion fld[1];
1590176490.33:     ^
1590176490.33: In file included from dwarf2out.c:21656:
1590176490.33: ./gt-dwarf2out.h:484:7: warning: switch condition has boolean value [-Wswitch-bool]
1590176490.33:       switch (dwarf_version >= 4)
1590176490.33:       ^       ~~~~~~~~~~~~~~~~~~
1590176490.33: ./gt-dwarf2out.h:1047:7: warning: switch condition has boolean value [-Wswitch-bool]
1590176490.33:       switch (dwarf_version >= 4)
1590176490.33:       ^       ~~~~~~~~~~~~~~~~~~
1590176490.33: ./gt-dwarf2out.h:1673:3: warning: switch condition has boolean value [-Wswitch-bool]
1590176490.33:   switch (dwarf_version >= 4)
1590176490.33:   ^       ~~~~~~~~~~~~~~~~~~
1590176490.33: 120 warnings generated.
1590176492.25: /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fold-const.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fold-const.c
1590176492.25: clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
1590176492.25: fold-const.c:180:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   words[0] = LOWPART (low);
1590176492.25:              ^~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:181:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   words[1] = HIGHPART (low);
1590176492.25:              ^~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:182:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   words[2] = LOWPART (hi);
1590176492.25:              ^~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:183:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   words[3] = HIGHPART (hi);
1590176492.25:              ^~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:194:32: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   *low = words[0] + words[1] * BASE;
1590176492.25:                                ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:195:31: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   *hi = words[2] + words[3] * BASE;
1590176492.25:                               ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:402:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:           prod[k] = LOWPART (carry);
1590176492.25:                     ^~~~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:403:12: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:           carry = HIGHPART (carry);
1590176492.25:                   ^~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:507:40: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               ? -((unsigned HOST_WIDE_INT) h1 >> (HOST_BITS_PER_WIDE_INT - 1))
1590176492.25:                                               ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:677:52: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:   if (hden == 0 && lden < (unsigned HOST_WIDE_INT) BASE)
1590176492.25:                                                    ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:682:28: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:           work = num[i] + carry * BASE;
1590176492.25:                                   ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:705:15: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:       scale = BASE / (den[den_hi_sig] + 1);
1590176492.25:               ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:712:17: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               num[i] = LOWPART (work);
1590176492.25:                        ^~~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:713:16: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               carry = HIGHPART (work);
1590176492.25:                       ^~~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:721:17: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               den[i] = LOWPART (work);
1590176492.25:                        ^~~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:722:16: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               carry = HIGHPART (work);
1590176492.25:                       ^~~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:738:29: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:           work = num[num_hi_sig] * BASE + num[num_hi_sig - 1];
1590176492.25:                                    ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:742:16: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:             quo_est = BASE - 1;
1590176492.25:                       ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:746:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:           if (tmp < BASE
1590176492.25:                     ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:748:14: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:                   > (tmp * BASE + num[num_hi_sig - 2])))
1590176492.25:                            ^~~~
1590176492.25: fold-const.c:171:42: note: expanded from macro 'BASE'
1590176492.25: #define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                          ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:759:16: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               carry = HIGHPART (work);
1590176492.25:                       ^~~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:760:28: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               work = num[i + j] - LOWPART (work);
1590176492.25:                                   ^~~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:761:21: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               num[i + j] = LOWPART (work);
1590176492.25:                            ^~~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:762:17: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:               carry += HIGHPART (work) != 0;
1590176492.25:                        ^~~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:774:13: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:                   carry = HIGHPART (work);
1590176492.25:                           ^~~~~~~~~~~~~~~
1590176492.25: fold-const.c:170:33: note: expanded from macro 'HIGHPART'
1590176492.25:   ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
1590176492.25:                                 ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: fold-const.c:775:18: warning: shift count >= width of type [-Wshift-count-overflow]
1590176492.25:                   num[i + j] = LOWPART (work);
1590176492.25:                                ^~~~~~~~~~~~~~
1590176492.25: fold-const.c:168:39: note: expanded from macro 'LOWPART'
1590176492.25:   ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
1590176492.25:                                       ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1590176492.25: 26 warnings generated.
1590176492.38: Stop make command: 2020-05-22 12:41:32 (1590176492.38261)
1590176492.38: Elapsed time for make command: 00:00:20 (20.1759791374207)
1590176492.38: Error with make 'specmake --output-sync -j8 build':
1590176492.38:   ----------------------------------------------------------------------------
1590176492.38:   Please review this file:
1590176492.38:     "/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000/make.out"
1590176492.38:   ----------------------------------------------------------------------------
1590176492.38:   Command returned exit code 2
1590176492.39:   Error with make!
1590176492.39:   Compile for '602.gcc_s' ended at: 2020-05-22 12:41:32 (1590176492)
1590176492.39:   Elapsed compile for '602.gcc_s': 00:00:20 (20)
1590176492.39: *** Error building 602.gcc_s base
1590176492.39: If you wish to ignore this error, please use '-I' or ignore errors.
1590176492.39: update_config_exehash(Spec::Config=HASH(0x57483a8), wasm_lucet) called
1590176492.39: runcpu finished at 2020-05-22 12:41:32; 21 total seconds elapsed
1590176492.58: The log for this run is in /home/ucsd/SpectreSandboxing/spec2017/result/CPU2017.087.log
1590176492.58: The debug log for this run is in /home/ucsd/SpectreSandboxing/spec2017/result/CPU2017.087.log.debug
1590176492.58: *
1590176492.58: * Temporary files were NOT deleted; keeping temporaries such as
1590176492.58: * /home/ucsd/SpectreSandboxing/spec2017/result/CPU2017.087.log.debug and
1590176492.58: * /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.087
1590176492.58: * (These may be large!)
1590176492.58: *
1590176492.58: runcpu finished at 2020-05-22 12:41:32; 21 total seconds elapsed
