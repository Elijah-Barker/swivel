runcpu v5825 started at 2020-05-22 22:07:57 on "tigerlake1-ravi"
runcpu is: /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu
runcpu: runcpu --config=wasm_lucet --action=build --define cores=1 602
toolset: linux-x86_64

Locating benchmarks...found 47 benchmarks in 55 benchsets.
Reading config file '/home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg'

1 configuration selected:

Action   Benchmarks
------   ----------------------------------------------------------------------
build    602.gcc_s                                                             
-------------------------------------------------------------------------------

Setting up environment for running 602.gcc_s...
Starting runcpu for 602.gcc_s...
Running "specperl /home/ucsd/SpectreSandboxing/spec2017/bin/sysinfo" to gather system information.
sysinfo: r5797 of 2017-06-14 (96c45e4568ad54c135fd618bcc091c0f)
sysinfo: Getting system information for Linux...
sysinfo: ...getting CPU info
sysinfo: ...getting info from numactl
sysinfo: ...getting memory info
sysinfo: ...getting OS info
sysinfo: ...getting disk info
sysinfo: ...trying to get DIMM info from dmidecode
Read 122 info lines from the sysinfo program.
sd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet), no checksums were
  found in the config file.  They will be installed after build.
When checking executables (/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet), no checksums were
  found in the config file.  They will be installed after build.
Compiling Binaries
------------------------------------------------------------------------
When checking options for /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet, no checksums were
  found in the config file.  They will be installed after build.
When checking executables (/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/exe/sgcc_base.wasm_lucet), no checksums were
  found in the config file.  They will be installed after build.
Notice: Unusable path detected in build directory list file at
        /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/list
        The list file references one or more paths which will be
        ignored because they are not subdirectories of the directory
        where the list file resides.  This condition may be a result of
        having moved your SPEC CPU2017 benchmark tree.  If that's what
        happened, and if you don't need the old build directories, you
        can just remove them, along with the list file.  (Usually it's
        safe to delete old build directories, as they are automatically
        re-created when needed.)
  Building 602.gcc_s base wasm_lucet: (build_base_wasm_lucet.0000) [2020-05-22 22:07:58]
Wrote to makefile '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000/Makefile.deps':
# End dependencies
# These are the build dependencies
$(addsuffix $(OBJ), $(basename alias.c)): alias.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h df.h double-int.h emit-rtl.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-alias.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-type-escape.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h s
bitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename alloc-pool.c)): alloc-pool.c alloc-pool.h auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h system.h
$(addsuffix $(OBJ), $(basename alloca.c)): alloca.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename argv.c)): argv.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/safe-ctype.h
$(addsuffix $(OBJ), $(basename attribs.c)): attribs.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h fixed-value.h flags.h gcc-plugin.h genrtl.h ggc.h gtype-desc.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h plugin.def plugin.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename auto-inc-dec.c)): auto-inc-dec.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.
h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename bb-reorder.c)): bb-reorder.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-pr
eds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename bid2dpd_dpd2bid.c)): bid2dpd_dpd2bid.c bid-dpd.h bid2dpd_dpd2bid.h
$(addsuffix $(OBJ), $(basename bitmap.c)): bitmap.c alias.h auto-host.h bitmap.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gt-bitmap.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h vec.h
$(addsuffix $(OBJ), $(basename bt-load.c)): bt-load.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm
-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename builtins.c)): builtins.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h r
ecog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-mudflap.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def typeclass.h value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-aux-info.c)): c-aux-info.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-common.c)): c-common.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtin-attrs.def builtin-types.def builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-c-common.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def
 options.h opts.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-inline.h tree-iterator.h tree-mudflap.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-convert.c)): c-convert.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-cppbuiltin.c)): c-cppbuiltin.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h double-int.h except.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h version.h
$(addsuffix $(OBJ), $(basename c-decl.c)): c-decl.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-lang.h c-pragma.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-c-decl.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks-def.h langhooks.h libfuncs.h line-map.h machmode.h mini-gm
p.h mode-classes.def omp-builtins.def options.h opts.h output.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-inline.h tree-iterator.h tree-mudflap.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-dump.c)): c-dump.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-pass.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-errors.c)): c-errors.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-format.c)): c-format.c alias.h all-tree.def alloc-pool.h auto-host.h builtins.def bversion.h c-common.def c-common.h c-format.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-gimplify.c)): c-gimplify.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-pretty-print.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def r
tl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-lang.c)): c-lang.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-objc-common.h c-pragma.h c-tree.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-c.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-inl
ine.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-lex.c)): c-lex.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pretty-print.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-objc-common.c)): c-objc-common.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-objc-common.h c-pretty-print.h c-tree.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def 
rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-inline.h tree-mudflap.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-omp.c)): c-omp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-opts.c)): c-opts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cppdefault.h cpplib.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h incpath.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mkdeps.h mode-classes.def omp-builtins.def options.h opts.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system
.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-inline.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-parser.c)): c-parser.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-pragma.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gt-c-parser.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h plugin.def plugin.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def r
tl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-pch.c)): c-pch.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h debug.h defaults.h double-int.h filenames.h flags.h ggc.h gtype-desc.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h version.h
$(addsuffix $(OBJ), $(basename c-ppoutput.c)): c-ppoutput.c alias.h all-tree.def auto-host.h builtins.def c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpp-id-data.h cpplib.h defaults.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h internal.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-pragma.c)): c-pragma.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gt-c-pragma.h gtype-desc.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h plugin.def plugin.h pretty-print.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tr
ee.def tree.h treestruct.def vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-pretty-print.c)): c-pretty-print.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def c-common.h c-pretty-print.h c-tree.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h real.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-iterator.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename c-semantics.c)): c-semantics.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tre
e-check.h tree-inline.h tree-iterator.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename c-typeck.c)): c-typeck.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def c-common.h c-lang.h c-tree.h cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h
 pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename caller-save.c)): caller-save.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-caller-save.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar
.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename calls.c)): calls.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h debug.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h r
tl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cc1-checksum.c)): cc1-checksum.c auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h system.h
$(addsuffix $(OBJ), $(basename cfg.c)): cfg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.d
ef timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfganal.c)): cfganal.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgbuild.c)): cfgbuild.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgcleanup.c)): cfgcleanup.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h dce.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h t
arget.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgexpand.c)): cfgexpand.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h
 real.h reg-notes.def rtl.def rtl.h sbitmap.h ssaexpand.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfghooks.c)): cfghooks.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flo
w.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfglayout.c)): cfglayout.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-cfglayout.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def va
rray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgloop.c)): cfgloop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tre
e-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgloopanal.c)): cfgloopanal.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h graphds.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgloopmanip.c)): cfgloopmanip.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-
alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cfgrtl.c)): cfgrtl.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def
 timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cgraph.c)): cgraph.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-cgraph.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics
.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cgraphbuild.c)): cgraphbuild.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruc
t.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cgraphunit.c)): cgraphunit.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-cgraphunit.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-prop.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h param
s.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename combine-stack-adj.c)): combine-stack-adj.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h t
oplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename combine.c)): combine.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h statistics.h symtab.h sync-bui
ltins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename concat.c)): concat.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename convert.c)): convert.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename coverage.c)): coverage.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.c gcov-io.h gcov-iov.h genrtl.h ggc.h gt-coverage.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h
 timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-iterator.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cp-demangle.c)): cp-demangle.c auto-host.h config.h cp-demangle.h include/ansidecl.h include/demangle.h include/libiberty.h
$(addsuffix $(OBJ), $(basename cp-demint.c)): cp-demint.c auto-host.h config.h cp-demangle.h include/ansidecl.h include/demangle.h include/libiberty.h
$(addsuffix $(OBJ), $(basename cplus-dem.c)): cplus-dem.c auto-host.h config.h include/ansidecl.h include/demangle.h include/libiberty.h include/safe-ctype.h
$(addsuffix $(OBJ), $(basename cpp_charset.c)): cpp_charset.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h ucnid.h
$(addsuffix $(OBJ), $(basename cpp_directives-only.c)): cpp_directives-only.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_directives.c)): cpp_directives.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h mkdeps.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_errors.c)): cpp_errors.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_expr.c)): cpp_expr.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_files.c)): cpp_files.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h md5.h mkdeps.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_identifiers.c)): cpp_identifiers.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_init.c)): cpp_init.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h localedir.h mkdeps.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_lex.c)): cpp_lex.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_line-map.c)): cpp_line-map.c cpp_config.h cpp_system.h filenames.h include/ansidecl.h include/libiberty.h include/safe-ctype.h line-map.h
$(addsuffix $(OBJ), $(basename cpp_macro.c)): cpp_macro.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_mkdeps.c)): cpp_mkdeps.c cpp_config.h cpp_system.h filenames.h include/ansidecl.h include/libiberty.h include/safe-ctype.h mkdeps.h
$(addsuffix $(OBJ), $(basename cpp_pch.c)): cpp_pch.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h mkdeps.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_symtab.c)): cpp_symtab.c cpp_config.h cpp_system.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h symtab.h
$(addsuffix $(OBJ), $(basename cpp_traditional.c)): cpp_traditional.c cpp-id-data.h cpp_config.h cpp_system.h cpplib.h filenames.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h internal.h line-map.h symtab.h
$(addsuffix $(OBJ), $(basename cppdefault.c)): cppdefault.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cppdefault.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
$(addsuffix $(OBJ), $(basename crc32.c)): crc32.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename cse.c)): cse.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h 
timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename cselib.c)): cselib.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h double-int.h emit-rtl.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-cselib.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-pred
s.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename dbgcnt.c)): dbgcnt.c alias.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h double-int.h errors.h filenames.h fixed-value.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h output.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h vec.h
$(addsuffix $(OBJ), $(basename dbxout.c)): dbxout.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbxout.h debug.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gstab.h gt-dbxout.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h stab.def statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h t
m_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename dce.c)): dce.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h dce.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.
h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ddg.c)): ddg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h ddg.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar
.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename debug.c)): debug.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
$(addsuffix $(OBJ), $(basename decContext.c)): decContext.c auto-host.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumberLocal.h gstdint.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename decNumber.c)): decNumber.c auto-host.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h gstdint.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename decimal128.c)): decimal128.c auto-host.h bid-dpd.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h decimal128.h decimal128Local.h decimal128Symbols.h gstdint.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename decimal32.c)): decimal32.c auto-host.h bid-dpd.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h decimal32.h decimal32Symbols.h gstdint.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename decimal64.c)): decimal64.c auto-host.h bid-dpd.h config.h dconfig.h decCommonSymbols.h decContext.h decContextSymbols.h decDPD.h decDPDSymbols.h decNumber.h decNumberLocal.h decNumberSymbols.h decimal64.h decimal64Symbols.h gstdint.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename df-byte-scan.c)): df-byte-scan.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h filenames.h fixed-value.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename df-core.c)): df-core.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestr
uct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename df-problems.c)): df-problems.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dce.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def v
array.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename df-scan.c)): df-scan.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h t
ree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename dfp.c)): dfp.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h decContext.h decContextSymbols.h decNumber.h decNumberSymbols.h decimal128.h decimal128Local.h decimal128Symbols.h decimal32.h decimal32Symbols.h decimal64.h decimal64Symbols.h defaults.h dfp.h double-int.h filenames.h gstdint.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename diagnostic.c)): diagnostic.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h gcc-plugin.h highlev-plugin-common.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h plugin.def plugin.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h version.h
$(addsuffix $(OBJ), $(basename dojump.c)): dojump.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-dojump.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vec
prim.h
$(addsuffix $(OBJ), $(basename dominance.c)): dominance.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h et-forest.h filenames.h fixed-value.h function.h genrtl.h graphds.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename domwalk.c)): domwalk.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h domwalk.h double-int.h filenames.h function.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename double-int.c)): double-int.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename dse.c)): dse.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h dse.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h t
ree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename dwarf2asm.c)): dwarf2asm.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h dwarf2asm.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gt-dwarf2asm.h gtype-desc.h hwint.h include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename dwarf2out.c)): dwarf2out.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-dwarf2out.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h libfuncs.h line-map.h machmode.h md5.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def
 predict.h pretty-print.h real.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h version.h
$(addsuffix $(OBJ), $(basename dyn-string.c)): dyn-string.c auto-host.h config.h include/ansidecl.h include/dyn-string.h include/libiberty.h
$(addsuffix $(OBJ), $(basename ebitmap.c)): ebitmap.c alias.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h ebitmap.h filenames.h fixed-value.h flags.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h system.h tm.h vec.h
$(addsuffix $(OBJ), $(basename emit-rtl.c)): emit-rtl.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-emit-rtl.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.d
ef timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename et-forest.c)): et-forest.c alloc-pool.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h et-forest.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
$(addsuffix $(OBJ), $(basename except.c)): except.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-except.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h
 predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename explow.c)): explow.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-explow.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h
$(addsuffix $(OBJ), $(basename expmed.c)): expmed.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-
check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename expr.c)): expr.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-expr.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-
set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h ssaexpand.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def typeclass.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename fdmatch.c)): fdmatch.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename fibheap.c)): fibheap.c auto-host.h config.h include/ansidecl.h include/fibheap.h include/libiberty.h
$(addsuffix $(OBJ), $(basename filename_cmp.c)): filename_cmp.c auto-host.h config.h filenames.h include/ansidecl.h include/safe-ctype.h
$(addsuffix $(OBJ), $(basename final.c)): final.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h dbxout.h debug.h defaults.h df.h double-int.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h ou
tput.h params.def params.h pointer-set.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename fixed-value.c)): fixed-value.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename floatformat.c)): floatformat.c auto-host.h config.h include/ansidecl.h include/floatformat.h include/libiberty.h
$(addsuffix $(OBJ), $(basename fold-const.c)): fold-const.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks.h line-map.h machmode.h md5.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p
.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename fopen_unlocked.c)): fopen_unlocked.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename function.c)): function.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-function.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h real.h recog.h reg-notes.def regs
.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename fwprop.c)): fwprop.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h domwalk.h double-int.h emit-rtl.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree
-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gcse.c)): gcse.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-gcse.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def syste
m.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename genrtl.c)): genrtl.c alias.h auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h vec.h
$(addsuffix $(OBJ), $(basename getopt.c)): getopt.c auto-host.h config.h include/ansidecl.h include/getopt.h
$(addsuffix $(OBJ), $(basename getopt1.c)): getopt1.c auto-host.h config.h include/ansidecl.h include/getopt.h
$(addsuffix $(OBJ), $(basename getpwd.c)): getpwd.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename getruntime.c)): getruntime.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename ggc-common.c)): ggc-common.c auto-host.h bversion.h config.h coretypes.h filenames.h gcc-plugin.h ggc.h gtype-desc.h highlev-plugin-common.h hooks.h hosthooks-def.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h input.h insn-modes.h line-map.h machmode.h mode-classes.def params.def params.h plugin.def plugin.h statistics.h system.h toplev.h vec.h
$(addsuffix $(OBJ), $(basename ggc-page.c)): ggc-page.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h s
ymtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gimple-iterator.c)): gimple-iterator.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gimple-low.c)): gimple-low.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sta
tistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gimple-pretty-print.c)): gimple-pretty-print.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.
h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gimple.c)): gimple.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-gimple.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/demangle.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias
.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gimplify.c)): gimplify.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-gimplify.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h p
retty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graph.c)): graph.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h graph.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphds.c)): graphds.c auto-host.h bitmap.h config.h coretypes.h filenames.h graphds.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h statistics.h system.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-blocking.c)): graphite-blocking.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def r
tl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-clast-to-gimple.c)): graphite-clast-to-gimple.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.
def rtl.def rtl.h sbitmap.h sese.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-dependences.c)): graphite-dependences.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.
def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-interchange.c)): graphite-interchange.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes
.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-poly.c)): graphite-poly.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def r
tl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-ppl.c)): graphite-ppl.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h statistics.h system.h tm.h
$(addsuffix $(OBJ), $(basename graphite-scop-detection.c)): graphite-scop-detection.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.de
f rtl.def rtl.h sbitmap.h sese.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite-sese-to-poly.c)): graphite-sese-to-poly.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rt
l.def rtl.h sbitmap.h sese.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename graphite.c)): graphite.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sese.h statist
ics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename gtype-desc.c)): gtype-desc.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpp-id-data.h cpplib.h cselib.h debug.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-addr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-prop.h ipa-reference.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def 
predict.h real.h reg-notes.def reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h tree-check.h tree-chrec.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename haifa-sched.c)): haifa-sched.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def sy
stem.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename hashtab.c)): hashtab.c auto-host.h config.h include/ansidecl.h include/hashtab.h include/libiberty.h
$(addsuffix $(OBJ), $(basename hex.c)): hex.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/safe-ctype.h
$(addsuffix $(OBJ), $(basename hooks.c)): hooks.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hooks.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h insn-modes.h machmode.h mode-classes.def options.h system.h tm.h
$(addsuffix $(OBJ), $(basename host-ieee128.c)): host-ieee128.c auto-host.h bid-dpd.h config.h dconfig.h decimal128.h decimal128Local.h decimal128Symbols.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename host-ieee32.c)): host-ieee32.c bid-dpd.h decimal32.h decimal32Symbols.h
$(addsuffix $(OBJ), $(basename host-ieee64.c)): host-ieee64.c bid-dpd.h decimal64.h decimal64Symbols.h
$(addsuffix $(OBJ), $(basename host-linux.c)): host-linux.c auto-host.h config.h coretypes.h filenames.h hooks.h hosthooks-def.h hosthooks.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-modes.h machmode.h mode-classes.def system.h
$(addsuffix $(OBJ), $(basename i386-c.c)): i386-c.c alias.h all-tree.def auto-host.h builtins.def c-common.def c-common.h c-pragma.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gtype-desc.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename i386.c)): i386.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h debug.h defaults.h df.h double-int.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-i386.h gtype-desc.h hard-reg-set.h hooks.h hwint.h i386-builtin-types.inc include/ansidecl.h include/dwarf2.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h
 options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h timevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ifcvt.c)): ifcvt.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timeva
r.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename incpath.c)): incpath.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cppdefault.h cpplib.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h incpath.h insn-constants.h insn-flags.h insn-modes.h intl.h line-map.h machmode.h mode-classes.def options.h prefix.h symtab.h system.h target.h tm.h
$(addsuffix $(OBJ), $(basename init-regs.c)): init-regs.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-attrtab.c)): insn-attrtab.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h v
ec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-automata.c)): insn-automata.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h
 vec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-emit.c)): insn-emit.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h dfp.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h t
imevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-extract.c)): insn-extract.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h recog.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h
$(addsuffix $(OBJ), $(basename insn-modes.c)): insn-modes.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h insn-modes.h machmode.h mode-classes.def options.h real.h system.h tm.h
$(addsuffix $(OBJ), $(basename insn-opinit.c)): insn-opinit.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h real.h recog.h reg-notes.def reload.h rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-output.c)): insn-output.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-constrs.h tm-
preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-peep.c)): insn-peep.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vec
prim.h
$(addsuffix $(OBJ), $(basename insn-preds.c)): insn-preds.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-chec
k.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename insn-recog.c)): insn-recog.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-constrs.h tm-preds.h tm.h tm_p.h toplev.h tree-chec
k.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename integrate.c)): integrate.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-integrate.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-
builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename intl.c)): intl.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h intl.h options.h system.h tm.h
$(addsuffix $(OBJ), $(basename ipa-cp.c)): ipa-cp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-prop.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree
-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-inline.c)): ipa-inline.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-ipa-inline.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-prop.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-
notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-prop.c)): ipa-prop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-prop.h ipa-reference.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-i
nline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-pure-const.c)): ipa-pure-const.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-utils.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h stat
istics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-reference.c)): ipa-reference.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-ipa-reference.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h ipa-utils.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h 
target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-struct-reorg.c)): ipa-struct-reorg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h ipa-struct-reorg.h ipa-type-escape.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h params.def params.h pointer-set.h predict.def predict.
h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-type-escape.c)): ipa-type-escape.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h ipa-type-escape.h ipa-utils.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-c
heck.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa-utils.c)): ipa-utils.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h ipa-utils.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree
-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ipa.c)): ipa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira-build.c)): ira-build.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h sparseset.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h 
tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira-color.c)): ira-color.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def 
timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira-conflicts.c)): ira-conflicts.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sparseset.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.
h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira-costs.c)): ira-costs.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h topl
ev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira-emit.c)): ira-emit.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h errors.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.
h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira-lives.c)): ira-lives.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sparseset.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.
h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename ira.c)): ira.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h errors.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h ira-int.h ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h
 target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename jump.c)): jump.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h t
m-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lambda-code.c)): lambda-code.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h re
al.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lambda-mat.c)): lambda-mat.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lambda-trans.c)): lambda-trans.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename langhooks.c)): langhooks.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.
h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-inline.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lbasename.c)): lbasename.c auto-host.h config.h filenames.h include/ansidecl.h include/libiberty.h include/safe-ctype.h
$(addsuffix $(OBJ), $(basename lcm.c)): lcm.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lists.c)): lists.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h ggc.h gt-lists.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h
$(addsuffix $(OBJ), $(basename loop-doloop.c)): loop-doloop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruc
t.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename loop-init.c)): loop-init.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename loop-invariant.c)): loop-invariant.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.
h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename loop-iv.c)): loop-iv.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename loop-unroll.c)): loop-unroll.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename loop-unswitch.c)): loop-unswitch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lower-subreg.c)): lower-subreg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.def tree.h
 treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lrealpath.c)): lrealpath.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename lto-cgraph.c)): lto-cgraph.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h p
retty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-opts.c)): lto-opts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-section-in.c)): lto-section-in.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h lto-compress.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-prin
t.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-section-out.c)): lto-section-out.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h lto-compress.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h
 sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-streamer-in.c)): lto-streamer-in.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-utils.h libfuncs.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def pre
dict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-streamer-out.c)): lto-streamer-out.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/lto-symtab.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-pri
nt.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-streamer.c)): lto-streamer.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow
.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename lto-symtab.c)): lto-symtab.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-lto-symtab.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h lambda.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.
h
$(addsuffix $(OBJ), $(basename lto-wpa-fixup.c)): lto-wpa-fixup.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statis
tics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename main.c)): main.c auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h line-map.h options.h system.h tm.h toplev.h
$(addsuffix $(OBJ), $(basename make-relative-prefix.c)): make-relative-prefix.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename make-temp-file.c)): make-temp-file.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename matrix-reorg.c)): matrix-reorg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h opts.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-n
otes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-sccvn.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename mcf.c)): mcf.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h gcov-io.h gcov-iov.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h profile.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename md5.c)): md5.c auto-host.h config.h include/ansidecl.h md5.h
$(addsuffix $(OBJ), $(basename mkstemps.c)): mkstemps.c auto-host.h config.h include/ansidecl.h
$(addsuffix $(OBJ), $(basename mode-switching.c)): mode-switching.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-pass.h tree.
def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename modulo-sched.c)): modulo-sched.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h ddg.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.
h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename objalloc.c)): objalloc.c auto-host.h config.h include/ansidecl.h include/objalloc.h
$(addsuffix $(OBJ), $(basename obstack.c)): obstack.c auto-host.h config.h include/ansidecl.h include/obstack.h
$(addsuffix $(OBJ), $(basename omega.c)): omega.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h
$(addsuffix $(OBJ), $(basename omp-low.c)): omp-low.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-omp-low.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-n
otes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename optabs.c)): optabs.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-optabs.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h predict.def predict.h real.h recog.h reg-notes.def reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev
.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename options.c)): options.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h flags.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h insn-modes.h intl.h options.h opts.h system.h target.h tm.h
$(addsuffix $(OBJ), $(basename opts-common.c)): opts-common.c auto-host.h config.h coretypes.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h intl.h opts.h system.h
$(addsuffix $(OBJ), $(basename opts.c)): opts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def opt
ions.h opts.h output.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename params.c)): params.c auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h line-map.h options.h params.def params.h system.h tm.h toplev.h
$(addsuffix $(OBJ), $(basename partition.c)): partition.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/partition.h
$(addsuffix $(OBJ), $(basename passes.c)): passes.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h dbxout.h debug.h defaults.h df.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h graph.h gsstruct.def gt-passes.h gtype-desc.h hard-reg-set.h highlev-plugin-common.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/plugin-api.h include/safe-ctype.h include/splay-tree.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h ins
n-flags.h insn-modes.h insn-notes.def integrate.h intl.h ipa-reference.h langhooks.h line-map.h lto-streamer.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename physmem.c)): physmem.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename plugin.c)): plugin.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h coretypes.h double-int.h filenames.h gcc-plugin.h ggc.h gtype-desc.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-modes.h intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h plugin.def plugin.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename pointer-set.c)): pointer-set.c auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h pointer-set.h system.h
$(addsuffix $(OBJ), $(basename postreload-gcse.c)): postreload-gcse.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h
 tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename postreload.c)): postreload.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.d
ef timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename predict.c)): predict.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h recog.h 
reg-notes.def regs.h rtl.def rtl.h sbitmap.h sreal.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename prefix.c)): prefix.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h prefix.h system.h tm.h
$(addsuffix $(OBJ), $(basename pretty-print.c)): pretty-print.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h coretypes.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-modes.h intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h statistics.h symtab.h sync-builtins.def system.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename print-rtl.c)): print-rtl.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename print-tree.c)): print-tree.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tre
e-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename profile.c)): profile.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h profile.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-bu
iltins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename real.c)): real.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h dfp.h double-int.h filenames.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h statistics.h symtab.h sync-builtins.def system.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename recog.c)): recog.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h t
m.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename reg-stack.c)): reg-stack.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h topl
ev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename regcprop.c)): regcprop.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h 
tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename regex.c)): regex.c auto-host.h config.h include/ansidecl.h include/xregex.h include/xregex2.h
$(addsuffix $(OBJ), $(basename reginfo.c)): reginfo.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-reginfo.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def time
var.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename regmove.c)): regmove.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-c
heck.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename regrename.c)): regrename.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.
h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename regstat.c)): regstat.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename reload.c)): reload.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.
def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename reload1.c)): reload1.c addresses.h alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timev
ar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename reorg.c)): reorg.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h conditions.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h ti
mevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename resource.c)): resource.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h resource.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree
-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename rtl-error.c)): rtl-error.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def options.h pretty-print.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename rtl.c)): rtl.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h tm.h toplev.h vec.h
$(addsuffix $(OBJ), $(basename rtlanal.c)): rtlanal.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct
.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename rtlhooks.c)): rtlhooks.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h real.h recog.h reg-notes.def rtl.def rtl.h rtlhooks-def.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h vecprim.h
$(addsuffix $(OBJ), $(basename safe-ctype.c)): safe-ctype.c include/ansidecl.h include/safe-ctype.h
$(addsuffix $(OBJ), $(basename sbitmap.c)): sbitmap.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sched-deps.c)): sched-deps.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ira.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def time
var.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sched-ebb.c)): sched-ebb.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def 
timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sched-rgn.c)): sched-rgn.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h sel-sched.h statistics.h symtab.h sync-builtins.def system.
h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sched-vis.c)): sched-vis.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sched-int.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sdbout.c)): sdbout.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h double-int.h filenames.h ggc.h gt-sdbout.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h
$(addsuffix $(OBJ), $(basename sel-sched-dump.c)): sel-sched-dump.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h sched-int.h sel-sched-dump.h sel-sched-ir.h statistics.h symtab
.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sel-sched-ir.c)): sel-sched-ir.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h sched-int.h sel-sched-dump.h sel-sched-ir
.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sel-sched.c)): sel-sched.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h rtlhooks-def.h sbitmap.h sched-int.h sel-sc
hed-dump.h sel-sched-ir.h sel-sched.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sese.c)): sese.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h sese.h stati
stics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sha1.c)): sha1.c auto-host.h config.h include/ansidecl.h include/sha1.h
$(addsuffix $(OBJ), $(basename simplify-rtx.c)): simplify-rtx.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h tre
estruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename sort.c)): sort.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/sort.h
$(addsuffix $(OBJ), $(basename spaces.c)): spaces.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename sparseset.c)): sparseset.c auto-host.h config.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h sparseset.h system.h
$(addsuffix $(OBJ), $(basename spec_qsort/spec_qsort.c)): spec_qsort/spec_qsort.c spec_qsort/spec_qsort.h
$(addsuffix $(OBJ), $(basename splay-tree.c)): splay-tree.c auto-host.h config.h include/ansidecl.h include/libiberty.h include/splay-tree.h
$(addsuffix $(OBJ), $(basename sreal.c)): sreal.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h sreal.h system.h tm.h
$(addsuffix $(OBJ), $(basename stack-ptr-mod.c)): stack-ptr-mod.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename statistics.c)): statistics.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-pass.h tree.def tree.h treestruct.def vec.h vecprim.h
$(addsuffix $(OBJ), $(basename stmt.c)): stmt.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h libfuncs.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistic
s.h symtab.h sync-builtins.def system.h target.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename stor-layout.c)): stor-layout.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-stor-layout.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbi
tmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-inline.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename store-motion.c)): store-motion.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h df.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h recog.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar
.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename strerror.c)): strerror.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename stringpool.c)): stringpool.c alias.h all-tree.def auto-host.h builtins.def c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cpplib.h defaults.h double-int.h filenames.h ggc.h gt-stringpool.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename strsignal.c)): strsignal.c include/ansidecl.h include/libiberty.h libib_config.h
$(addsuffix $(OBJ), $(basename stub-objc.c)): stub-objc.c alias.h all-tree.def auto-host.h builtins.def c-common.def c-common.h config.h coretypes.h cpplib.h double-int.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h statistics.h symtab.h sync-builtins.def system.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename targhooks.c)): targhooks.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-targhooks.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h real.h recog.h reg-notes.def reload.h rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target-def.h target.h targhooks.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h ve
cprim.h
$(addsuffix $(OBJ), $(basename timevar.c)): timevar.c alias.h auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h line-map.h machmode.h mini-gmp.h mode-classes.def options.h real.h reg-notes.def rtl.def rtl.h statistics.h system.h timevar.def timevar.h tm.h toplev.h vec.h
$(addsuffix $(OBJ), $(basename toplev.c)): toplev.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h dbxout.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h dwarf2asm.h dwarf2out.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h graph.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hosthooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-addr.h insn-attr.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h ir
a.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h opts.h output.h params.def params.h plugin.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h version.h
$(addsuffix $(OBJ), $(basename tracer.c)): tracer.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h ti
mevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-affine.c)): tree-affine.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h 
tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-dump.h tree-pass.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-call-cdce.c)): tree-call-cdce.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.
def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-cfg.c)): tree-cfg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.
h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-cfgcleanup.c)): tree-cfgcleanup.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h
 pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-chrec.c)): tree-chrec.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def 
timevar.h tm.h tree-check.h tree-chrec.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-complex.c)): tree-complex.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.
h tree-flow-inline.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-data-ref.c)): tree-data-ref.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitm
ap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-dfa.c)): tree-dfa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg
-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-dump.c)): tree-dump.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pretty-print.h real.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-iterator.h tree-pass.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename tree-eh.c)): tree-eh.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h tim
evar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-if-conv.c)): tree-if-conv.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistic
s.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-inline.c)): tree-inline.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def integrate.h intl.h ipa-prop.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-n
otes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-into-ssa.c)): tree-into-ssa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h prett
y-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-iterator.c)): tree-iterator.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-iterator.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h tree-check.h tree-iterator.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-loop-distribution.c)): tree-loop-distribution.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predi
ct.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-loop-linear.c)): tree-loop-linear.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def predict.h pretty-
print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-mudflap.c)): tree-mudflap.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-mudflap.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/demangle.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.
def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-nested.c)): tree-nested.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-nested.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sy
nc-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-nrv.c)): tree-nrv.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-bui
ltins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-object-size.c)): tree-object-size.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa
-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-optimize.c)): tree-optimize.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h except.h expr.h filenames.h fixed-value.h flags.h function.h gcc-plugin.h genrtl.h ggc.h gimple.def gimple.h graph.h gsstruct.def gtype-desc.h hard-reg-set.h highlev-plugin-common.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h plugin
.def plugin.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-mudflap.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-outof-ssa.c)): tree-outof-ssa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h ssaexpand.h statist
ics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-parloops.c)): tree-parloops.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gt-tree-parloops.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h stati
stics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-phinodes.c)): tree-phinodes.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-phinodes.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h
 tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-predcom.c)): tree-predcom.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h
 symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-chrec.h tree-data-ref.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-pretty-print.c)): tree-pretty-print.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-flow-inli
ne.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-profile.c)): tree-profile.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-profile.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h 
statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-scalar-evolution.c)): tree-scalar-evolution.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-scalar-evolution.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h s
bitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-sra.c)): tree-sra.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-prop.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.
h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-address.c)): tree-ssa-address.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-ssa-address.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h
 reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-alias.c)): tree-ssa-alias.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h convert.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h ipa-type-escape.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def p
redict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-ccp.c)): tree-ssa-ccp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h r
eal.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-coalesce.c)): tree-ssa-coalesce.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flo
w-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-copy.c)): tree-ssa-copy.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def
 rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-copyrename.c)): tree-ssa-copyrename.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-in
line.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-dce.c)): tree-ssa-dce.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-bui
ltins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-dom.c)): tree-ssa-dom.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-
print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-dse.c)): tree-ssa-dse.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symta
b.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-forwprop.c)): tree-ssa-forwprop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symta
b.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-ifcombine.c)): tree-ssa-ifcombine.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tre
e-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-live.c)): tree-ssa-live.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-dump.h tree-flo
w-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-ch.c)): tree-ssa-loop-ch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h 
symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-im.c)): tree-ssa-loop-im.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def
 rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-ivcanon.c)): tree-ssa-loop-ivcanon.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def
 rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-ivopts.c)): tree-ssa-loop-ivopts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h p
retty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-affine.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-manip.c)): tree-ssa-loop-manip.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes
.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-niter.c)): tree-ssa-loop-niter.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pr
etty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-prefetch.c)): tree-ssa-loop-prefetch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h ou
tput.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop-unswitch.c)): tree-ssa-loop-unswitch.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h
 sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-loop.c)): tree-ssa-loop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h
 reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-math-opts.c)): tree-ssa-math-opts.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statisti
cs.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-operands.c)): tree-ssa-operands.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.
h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-phiopt.c)): tree-ssa-phiopt.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h
 symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-phiprop.c)): tree-ssa-phiprop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.
h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-pre.c)): tree-ssa-pre.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.d
ef rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-sccvn.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-propagate.c)): tree-ssa-propagate.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-ssa-propagate.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-prin
t.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-reassoc.c)): tree-ssa-reassoc.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h s
ync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-sccvn.c)): tree-ssa-sccvn.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h
 sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree-ssa-sccvn.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-sink.c)): tree-ssa-sink.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.
h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-structalias.c)): tree-ssa-structalias.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-ssa-structalias.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h prett
y-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-ter.c)): tree-ssa-ter.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pa
ss.h tree-ssa-alias.h tree-ssa-live.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-threadedge.c)): tree-ssa-threadedge.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pre
tty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-threadupdate.c)): tree-ssa-threadupdate.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes
.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa-uncprop.c)): tree-ssa-uncprop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h domwalk.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-not
es.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssa.c)): tree-ssa.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def 
rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-inline.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-ssanames.c)): tree-ssanames.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h 
vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-stdarg.c)): tree-stdarg.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h 
tree-ssa-operands.h tree-stdarg.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-switch-conversion.c)): tree-switch-conversion.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h t
ree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-tailcall.c)): tree-tailcall.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h dbgcnt.def dbgcnt.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap
.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm-preds.h tm.h tm_p.h tree-check.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-data-refs.c)): tree-vect-data-refs.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def 
predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-generic.c)): tree-vect-generic.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gt-tree-vect-generic.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.
h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-loop-manip.c)): tree-vect-loop-manip.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.
def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-loop.c)): tree-vect-loop.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.de
f predict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-patterns.c)): tree-vect-patterns.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def pr
edict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-slp.c)): tree-vect-slp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-set.h predict.def predict.h p
retty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vect-stmts.c)): tree-vect-stmts.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def optabs.h options.h params.def params.h pointer-se
t.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vectorizer.c)): tree-vectorizer.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cfglayout.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h function.h genrtl.h ggc.h gimple.def gimple.h graphds.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h lambda.h line-map.h machmode.h mini-gmp.h mode-classes.def omega.h omp-builtins.def options.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h
 statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h tree-check.h tree-chrec.h tree-data-ref.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree-vectorizer.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree-vrp.c)): tree-vrp.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfgloop.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h include/splay-tree.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def intl.h ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h pointer-set.h predict.def predict.h pretty-print.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system
.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-chrec.h tree-dump.h tree-flow-inline.h tree-flow.h tree-pass.h tree-scalar-evolution.h tree-ssa-alias.h tree-ssa-operands.h tree-ssa-propagate.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename tree.c)): tree.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h except.h filenames.h fixed-value.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-tree.h gtype-desc.h hard-reg-set.h hooks.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h intl.h ipa-reference.h langhooks-def.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h sbitmap.h statistics.h symtab
.h sync-builtins.def system.h target.h timevar.def timevar.h tm-preds.h tm.h tm_p.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-inline.h tree-iterator.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename unlink-if-ordinary.c)): unlink-if-ordinary.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename value-prof.c)): value-prof.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h coverage.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h gcov-io.h gcov-iov.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-codes.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def optabs.h options.h output.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-notes.def r
egs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def value-prof.h varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename var-tracking.c)): var-tracking.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h cselib.h defaults.h diagnostic.def diagnostic.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gimple.def gimple.h gsstruct.def gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/fibheap.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def ipa-reference.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h params.def params.h pointer-set.h predict.def predict.h pretty-print.h real.h recog.h reg-n
otes.def regs.h reload.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-flow-inline.h tree-flow.h tree-pass.h tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename varasm.c)): varasm.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h cfglayout.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386-protos.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h double-int.h emit-rtl.h expr.h filenames.h fixed-value.h flags.h function.h genrtl.h ggc.h gt-varasm.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-config.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def regs.h rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h targhooks.h tm-pre
ds.h tm.h tm_p.h toplev.h tree-check.h tree-iterator.h tree-mudflap.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename varpool.c)): varpool.c alias.h all-tree.def auto-host.h basic-block.h bitmap.h builtins.def c-common.def cfghooks.h cgraph.h cif-code.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h diagnostic.def diagnostic.h double-int.h filenames.h flags.h function.h ggc.h gimple.def gimple.h gsstruct.def gt-varpool.h gtype-desc.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h ipa-reference.h langhooks.h line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h pointer-set.h predict.def predict.h pretty-print.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h target.h timevar.def timevar.h tm.h tree-check.h tree-flow-inline.h tree-flow.h
 tree-ssa-alias.h tree-ssa-operands.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename varray.c)): varray.c auto-host.h bversion.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h input.h insn-constants.h insn-flags.h line-map.h options.h statistics.h system.h tm.h toplev.h varray.h
$(addsuffix $(OBJ), $(basename vec.c)): vec.c auto-host.h bversion.h config.h coretypes.h filenames.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/safe-ctype.h input.h line-map.h statistics.h system.h toplev.h vec.h
$(addsuffix $(OBJ), $(basename version.c)): version.c version.h
$(addsuffix $(OBJ), $(basename vmsdbgout.c)): vmsdbgout.c auto-host.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h filenames.h hwint.h include/ansidecl.h include/libiberty.h include/safe-ctype.h insn-constants.h insn-flags.h options.h system.h tm.h
$(addsuffix $(OBJ), $(basename web.c)): web.c alias.h all-tree.def alloc-pool.h auto-host.h basic-block.h bitmap.h builtins.def bversion.h c-common.def cfghooks.h config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h defaults.h df.h double-int.h filenames.h fixed-value.h flags.h function.h genrtl.h hard-reg-set.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/partition.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h predict.def predict.h real.h reg-notes.def rtl.def rtl.h sbitmap.h statistics.h symtab.h sync-builtins.def system.h timevar.def timevar.h tm.h toplev.h tree-check.h tree-pass.h tree.def tree.h treestruct.def varray.h vec.h vecprim.h
$(addsuffix $(OBJ), $(basename xatexit.c)): xatexit.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename xcoffout.c)): xcoffout.c alias.h all-tree.def auto-host.h builtins.def bversion.h c-common.def config.h config/dbxelf.h config/elfos.h config/glibc-stdint.h config/i386/att.h config/i386/i386.h config/i386/linux.h config/i386/unix.h config/linux.h config/svr4.h config/vxworks-dummy.h coretypes.h debug.h defaults.h double-int.h filenames.h fixed-value.h flags.h genrtl.h ggc.h gtype-desc.h hwint.h include/ansidecl.h include/hashtab.h include/libiberty.h include/obstack.h include/safe-ctype.h input.h insn-constants.h insn-flags.h insn-modes.h insn-notes.def line-map.h machmode.h mini-gmp.h mode-classes.def omp-builtins.def options.h output.h real.h reg-notes.def rtl.def rtl.h statistics.h symtab.h sync-builtins.def system.h target.h tm.h toplev.h tree-check.h tree.def tree.h treestruct.def vec.h
$(addsuffix $(OBJ), $(basename xexit.c)): xexit.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename xmalloc.c)): xmalloc.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename xmemdup.c)): xmemdup.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename xstrdup.c)): xstrdup.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename xstrerror.c)): xstrerror.c auto-host.h config.h include/ansidecl.h include/libiberty.h
$(addsuffix $(OBJ), $(basename xstrndup.c)): xstrndup.c auto-host.h config.h include/ansidecl.h include/libiberty.h
Wrote to makefile '/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000/Makefile.spec':
TUNE=base
LABEL=wasm_lucet
NUMBER=602
NAME=gcc_s
SOURCES= main.c cc1-checksum.c alias.c alloca.c alloc-pool.c argv.c \
	 attribs.c auto-inc-dec.c bb-reorder.c bid2dpd_dpd2bid.c bitmap.c \
	 bt-load.c c-lang.c c-errors.c c-lex.c c-pragma.c c-decl.c c-typeck.c \
	 c-convert.c c-aux-info.c c-common.c c-opts.c c-format.c c-semantics.c \
	 c-ppoutput.c c-objc-common.c c-dump.c c-parser.c c-gimplify.c \
	 c-pretty-print.c c-omp.c caller-save.c calls.c cfg.c cfganal.c \
	 cfgbuild.c cfgcleanup.c cfgexpand.c cfghooks.c cfglayout.c cfgloop.c \
	 cfgloopanal.c cfgloopmanip.c cfgrtl.c cgraph.c cgraphbuild.c \
	 cgraphunit.c combine.c combine-stack-adj.c concat.c convert.c coverage.c \
	 cp-demangle.c cp-demint.c cplus-dem.c cpp_directives.c cpp_lex.c \
	 cpp_errors.c cpp_expr.c cpp_charset.c cpp_macro.c cpp_traditional.c \
	 cpp_line-map.c cpp_symtab.c cpp_identifiers.c cpp_mkdeps.c cpp_pch.c \
	 cpp_directives-only.c crc32.c cse.c cselib.c dbxout.c dbgcnt.c dce.c \
	 ddg.c debug.c decContext.c decimal128.c decimal32.c decimal64.c \
	 decNumber.c df-byte-scan.c df-core.c df-problems.c df-scan.c dfp.c \
	 diagnostic.c dojump.c dominance.c domwalk.c double-int.c dse.c \
	 dwarf2asm.c dwarf2out.c dyn-string.c ebitmap.c emit-rtl.c et-forest.c \
	 except.c explow.c expmed.c expr.c fdmatch.c fibheap.c filename_cmp.c \
	 final.c fixed-value.c floatformat.c fold-const.c fopen_unlocked.c \
	 function.c fwprop.c gcse.c genrtl.c getopt1.c getopt.c getpwd.c \
	 getruntime.c ggc-common.c ggc-page.c gimple.c gimple-iterator.c \
	 gimple-low.c gimple-pretty-print.c gimplify.c graph.c graphds.c \
	 graphite.c graphite-blocking.c graphite-clast-to-gimple.c \
	 graphite-dependences.c graphite-interchange.c graphite-poly.c \
	 graphite-ppl.c graphite-scop-detection.c graphite-sese-to-poly.c \
	 gtype-desc.c haifa-sched.c hashtab.c hex.c hooks.c host-ieee128.c \
	 host-ieee32.c host-ieee64.c host-linux.c i386.c i386-c.c ifcvt.c \
	 incpath.c init-regs.c insn-attrtab.c insn-automata.c insn-emit.c \
	 insn-extract.c insn-modes.c insn-opinit.c insn-output.c insn-peep.c \
	 insn-preds.c insn-recog.c integrate.c ipa-cp.c ipa-inline.c ipa-prop.c \
	 ipa-pure-const.c ipa-reference.c ipa-struct-reorg.c ipa-type-escape.c \
	 ipa-utils.c ipa.c ira.c ira-build.c ira-costs.c ira-conflicts.c \
	 ira-color.c ira-emit.c ira-lives.c jump.c lambda-code.c lambda-mat.c \
	 lambda-trans.c langhooks.c lbasename.c lcm.c lists.c loop-doloop.c \
	 loop-init.c loop-invariant.c loop-iv.c loop-unroll.c loop-unswitch.c \
	 lower-subreg.c lrealpath.c lto-cgraph.c lto-streamer-in.c \
	 lto-streamer-out.c lto-section-in.c lto-section-out.c lto-symtab.c \
	 lto-opts.c lto-streamer.c lto-wpa-fixup.c make-relative-prefix.c \
	 make-temp-file.c partition.c matrix-reorg.c mcf.c md5.c mkstemps.c \
	 mode-switching.c modulo-sched.c objalloc.c obstack.c omega.c omp-low.c \
	 optabs.c options.c opts-common.c opts.c params.c passes.c physmem.c \
	 plugin.c pointer-set.c postreload-gcse.c postreload.c predict.c \
	 pretty-print.c print-rtl.c print-tree.c profile.c recog.c reg-stack.c \
	 regcprop.c regex.c reginfo.c regmove.c regrename.c regstat.c reload.c \
	 reload1.c reorg.c resource.c rtl-error.c rtl.c rtlanal.c rtlhooks.c \
	 safe-ctype.c sbitmap.c sched-deps.c sched-ebb.c sched-rgn.c sched-vis.c \
	 sdbout.c sel-sched-ir.c sel-sched-dump.c sel-sched.c sese.c sha1.c \
	 simplify-rtx.c sort.c spaces.c sparseset.c splay-tree.c sreal.c \
	 stack-ptr-mod.c statistics.c stmt.c stor-layout.c store-motion.c \
	 stringpool.c strsignal.c stub-objc.c targhooks.c timevar.c tracer.c \
	 tree-affine.c tree-call-cdce.c tree-cfg.c tree-cfgcleanup.c tree-chrec.c \
	 tree-complex.c tree-data-ref.c tree-dfa.c tree-dump.c tree-eh.c \
	 tree-if-conv.c tree-inline.c tree-into-ssa.c tree-iterator.c \
	 tree-loop-distribution.c tree-loop-linear.c tree-mudflap.c tree-nested.c \
	 tree-nrv.c tree-object-size.c tree-optimize.c tree-outof-ssa.c \
	 tree-parloops.c tree-phinodes.c tree-predcom.c tree-pretty-print.c \
	 tree-profile.c tree-scalar-evolution.c tree-sra.c \
	 tree-switch-conversion.c tree-ssa-address.c tree-ssa-alias.c \
	 tree-ssa-ccp.c tree-ssa-coalesce.c tree-ssa-copy.c tree-ssa-copyrename.c \
	 tree-ssa-dce.c tree-ssa-dom.c tree-ssa-dse.c tree-ssa-forwprop.c \
	 tree-ssa-ifcombine.c tree-ssa-live.c tree-ssa-loop-ch.c \
	 tree-ssa-loop-im.c tree-ssa-loop-ivcanon.c tree-ssa-loop-ivopts.c \
	 tree-ssa-loop-manip.c tree-ssa-loop-niter.c tree-ssa-loop-prefetch.c \
	 tree-ssa-loop-unswitch.c tree-ssa-loop.c tree-ssa-math-opts.c \
	 tree-ssa-operands.c tree-ssa-phiopt.c tree-ssa-phiprop.c tree-ssa-pre.c \
	 tree-ssa-propagate.c tree-ssa-reassoc.c tree-ssa-sccvn.c tree-ssa-sink.c \
	 tree-ssa-structalias.c tree-ssa-ter.c tree-ssa-threadedge.c \
	 tree-ssa-threadupdate.c tree-ssa-uncprop.c tree-ssa.c tree-ssanames.c \
	 tree-stdarg.c tree-tailcall.c tree-vect-generic.c tree-vect-patterns.c \
	 tree-vect-data-refs.c tree-vect-stmts.c tree-vect-loop.c \
	 tree-vect-loop-manip.c tree-vect-slp.c tree-vectorizer.c tree-vrp.c \
	 tree.c unlink-if-ordinary.c value-prof.c var-tracking.c varpool.c \
	 varasm.c varray.c vec.c vmsdbgout.c web.c xatexit.c xcoffout.c xexit.c \
	 xmalloc.c xmemdup.c xstrdup.c xstrerror.c xstrndup.c c-cppbuiltin.c \
	 c-pch.c cpp_files.c cpp_init.c cppdefault.c intl.c prefix.c strerror.c \
	 toplev.c vasprintf.c version.c builtins.c real.c mini-gmp.c \
	 spec_qsort/spec_qsort.c
EXEBASE=sgcc
NEED_MATH=yes
BENCHLANG=C
BENCH_FLAGS      = -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H
CC               = /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/
CC_VERSION_OPTION = --version
COPTIMIZE        = $(FAST_NO_STATIC)  -DSPEC_SUPPRESS_OPENMP
CXX              = /opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -lstdc++ -I/opt/wasi-sdk/lib/clang/10.0.0/include/
CXXOPTIMIZE      = $(FAST_NO_STATIC) -DSPEC_SUPPRESS_OPENMP
CXX_VERSION_OPTION = --version
EXTRA_LDFLAGS    = -Wl,-z,muldefs
EXTRA_PORTABILITY = -DSPEC_LP64
FAST             = $(SSE) $(OPT_ROOT) -static
FAST_NO_STATIC   = $(SSE) $(OPT_ROOT)
FC               = /bin/gfortran -m64 -I/include -I/usr/include
FC_VERSION_OPTION = --version
FOPTIMIZE        = $(FORT_FAST_NO_STATIC)
FORT_FAST        = $(SSE) $(OPT_ROOT) -static
FORT_FAST_NO_STATIC = $(SSE) $(OPT_ROOT)
LUCET_TYPE       = lucet
OPT_ROOT         = -O2 -fno-strict-aliasing
OS               = unix
SSE              = 
absolutely_no_locking = 0
abstol           = 
action           = build
allow_label_override = 0
backup_config    = 1
baseexe          = sgcc
basepeak         = 0
bench_post_setup = sync
benchdir         = benchspec
benchmark        = 602.gcc_s
binary           = 
bindir           = exe
builddir         = build
bundleaction     = 
bundlename       = 
calctol          = 0
changedhash      = 0
check_version    = 0
clean_between_builds = no
command_add_redirect = 1
commanderrfile   = speccmds.err
commandexe       = sgcc_base.wasm_lucet
commandfile      = speccmds.cmd
commandoutfile   = speccmds.out
commandstdoutfile = speccmds.stdout
comparedir       = compare
compareerrfile   = compare.err
comparefile      = compare.cmd
compareoutfile   = compare.out
comparestdoutfile = compare.stdout
compile_error    = 0
compwhite        = 
configdir        = config
configfile       = wasm_lucet
configpath       = /home/ucsd/SpectreSandboxing/spec2017/config/wasm_lucet.cfg
copies           = 1
current_range    = 
datadir          = data
default_size     = ref
default_submit   = $command
delay            = 0
deletebinaries   = 0
deletework       = 0
dependent_workloads = 0
device           = 
difflines        = 10
dirprot          = 511
discard_power_samples = 0
enable_monitor   = 1
endian           = 12345678
env_vars         = 0
expand_notes     = 0
expid            = 
exthash_bits     = 256
fail_build       = 0
failflags        = 0
fake             = 0
feedback         = 1
flag_url_base    = https://www.spec.org/auto/cpu2017/Docs/benchmarks/flags/
floatcompare     = 1
force_monitor    = 0
from_runcpu      = 2
hostname         = tigerlake1-ravi
http_proxy       = 
http_timeout     = 30
hw_avail         = 
hw_cpu_max_mhz   = 
hw_cpu_name      = Genuine Intel 0000
hw_cpu_nominal_mhz = 
hw_disk          = 391 GB  add more disk info here
hw_memory001     = 15.428 GB fixme: If using DDR3, format is:
hw_memory002     = 'N GB (M x N GB nRxn PCn-nnnnnR-n, ECC)'
hw_model         = 
hw_nchips        = 1
hw_ncores        = 
hw_ncpuorder     = 
hw_nthreadspercore = 
hw_ocache        = 
hw_other         = 
hw_pcache        = 
hw_scache        = 
hw_tcache        = 
hw_vendor        = My Corporation
idle_current_range = 
idledelay        = 10
idleduration     = 60
ignore_errors    = 0
ignore_sigint    = 0
ignorecase       = 
info_wrap_columns = 50
inputdir         = input
inputgenerrfile  = inputgen.err
inputgenfile     = inputgen.cmd
inputgenoutfile  = inputgen.out
inputgenstdoutfile = inputgen.stdout
iteration        = -1
iterations       = 3
keeptmp          = 0
label            = wasm_lucet
license_num      = 13
line_width       = 1020
link_input_files = 1
locking          = 1
log              = CPU2017
log_line_width   = 1020
log_timestamp    = 0
logfile          = /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.109/templogs/preenv.intspeed.109.0
logname          = /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.109/templogs/preenv.intspeed.109.0
lognum           = 109.0
mail_reports     = all
mailcompress     = 0
mailmethod       = smtp
mailport         = 25
mailserver       = 127.0.0.1
mailto           = 
make             = specmake
make_no_clobber  = 0
makefile_template = Makefile.YYYtArGeTYYYspec
makeflags        = -j8
max_average_uncertainty = 1
max_hum_limit    = 0
max_report_runs  = 3
max_unknown_uncertainty = 1
mean_anyway      = 1
meter_connect_timeout = 30
meter_errors_default = 5
meter_errors_percentage = 5
min_report_runs  = 2
min_temp_limit   = 20
minimize_builddirs = 0
minimize_rundirs = 0
name             = gcc_s
nansupport       = no
need_math        = yes
no_input_handler = close
no_monitor       = 
noratios         = 0
note_preenv      = 1
notes_001        =  Binaries compiled on a system with Intel(R) Core(TM) i9-7900X CPU + 32GB RAM
notes_002        =  memory using Redhat Enterprise Linux 7.5
notes_200        =  Transparent Huge Pages enabled by default
notes_os_010     =  Stack size set to unlimited using "ulimit -s unlimited"
notes_plat_sysinfo_000 =  Sysinfo program /home/ucsd/SpectreSandboxing/spec2017/bin/sysinfo
notes_plat_sysinfo_005 =  Rev: r5797 of 2017-06-14 96c45e4568ad54c135fd618bcc091c0f
notes_plat_sysinfo_010 =  running on tigerlake1-ravi Fri May 22 22:07:58 2020
notes_plat_sysinfo_015 = 
notes_plat_sysinfo_020 =  SUT (System Under Test) info as seen by some common utilities.
notes_plat_sysinfo_025 =  For more information on this section, see
notes_plat_sysinfo_030 =     https://www.spec.org/cpu2017/Docs/config.html\#sysinfo
notes_plat_sysinfo_035 = 
notes_plat_sysinfo_040 =  From /proc/cpuinfo
notes_plat_sysinfo_045 =     model name : Genuine Intel(R) CPU 0000 @ 2.30GHz
notes_plat_sysinfo_050 =        1  "physical id"s (chips)
notes_plat_sysinfo_055 =        8 "processors"
notes_plat_sysinfo_060 =     cores, siblings (Caution: counting these is hw and system dependent. The following
notes_plat_sysinfo_065 =     excerpts from /proc/cpuinfo might not be reliable.  Use with caution.)
notes_plat_sysinfo_070 =        cpu cores : 4
notes_plat_sysinfo_075 =        siblings  : 8
notes_plat_sysinfo_080 =        physical 0: cores 0 1 2 3
notes_plat_sysinfo_085 = 
notes_plat_sysinfo_090 =  From lscpu:
notes_plat_sysinfo_095 =       Architecture:                    x86_64
notes_plat_sysinfo_100 =       CPU op-mode(s):                  32-bit, 64-bit
notes_plat_sysinfo_105 =       Byte Order:                      Little Endian
notes_plat_sysinfo_110 =       Address sizes:                   39 bits physical, 48 bits virtual
notes_plat_sysinfo_115 =       CPU(s):                          8
notes_plat_sysinfo_120 =       On-line CPU(s) list:             0-7
notes_plat_sysinfo_125 =       Thread(s) per core:              2
notes_plat_sysinfo_130 =       Core(s) per socket:              4
notes_plat_sysinfo_135 =       Socket(s):                       1
notes_plat_sysinfo_140 =       NUMA node(s):                    1
notes_plat_sysinfo_145 =       Vendor ID:                       GenuineIntel
notes_plat_sysinfo_150 =       CPU family:                      6
notes_plat_sysinfo_155 =       Model:                           140
notes_plat_sysinfo_160 =       Model name:                      Genuine Intel(R) CPU 0000 @ 2.30GHz
notes_plat_sysinfo_165 =       Stepping:                        0
notes_plat_sysinfo_170 =       CPU MHz:                         1785.448
notes_plat_sysinfo_175 =       CPU max MHz:                     4200.0000
notes_plat_sysinfo_180 =       CPU min MHz:                     400.0000
notes_plat_sysinfo_185 =       BogoMIPS:                        4608.00
notes_plat_sysinfo_190 =       Virtualization:                  VT-x
notes_plat_sysinfo_195 =       L1d cache:                       192 KiB
notes_plat_sysinfo_200 =       L1i cache:                       128 KiB
notes_plat_sysinfo_205 =       L2 cache:                        5 MiB
notes_plat_sysinfo_210 =       L3 cache:                        12 MiB
notes_plat_sysinfo_215 =       NUMA node0 CPU(s):               0-7
notes_plat_sysinfo_220 =       Vulnerability Itlb multihit:     KVM: Mitigation: Split huge pages
notes_plat_sysinfo_225 =       Vulnerability L1tf:              Not affected
notes_plat_sysinfo_230 =       Vulnerability Mds:               Vulnerable: Clear CPU buffers attempted, no
notes_plat_sysinfo_235 =       microcode; SMT vulnerable
notes_plat_sysinfo_240 =       Vulnerability Meltdown:          Not affected
notes_plat_sysinfo_245 =       Vulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via
notes_plat_sysinfo_250 =       prctl and seccomp
notes_plat_sysinfo_255 =       Vulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user
notes_plat_sysinfo_260 =       pointer sanitization
notes_plat_sysinfo_265 =       Vulnerability Spectre v2:        Mitigation; Enhanced IBRS, IBPB conditional, RSB
notes_plat_sysinfo_270 =       filling
notes_plat_sysinfo_275 =       Vulnerability Tsx async abort:   Not affected
notes_plat_sysinfo_280 =       Flags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr
notes_plat_sysinfo_285 =       pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx
notes_plat_sysinfo_290 =       pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology
notes_plat_sysinfo_295 =       nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx
notes_plat_sysinfo_300 =       smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt
notes_plat_sysinfo_305 =       tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault
notes_plat_sysinfo_310 =       epb invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority
notes_plat_sysinfo_315 =       ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f
notes_plat_sysinfo_320 =       avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni
notes_plat_sysinfo_325 =       avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp
notes_plat_sysinfo_330 =       hwp_notify hwp_act_window hwp_epp hwp_pkg_req avx512vbmi umip pku ospke avx512_vbmi2
notes_plat_sysinfo_335 =       shstk gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq rdpid
notes_plat_sysinfo_340 =       movdiri movdir64b fsrm avx512_vp2intersect ibt flush_l1d arch_capabilities
notes_plat_sysinfo_345 = 
notes_plat_sysinfo_350 =  /proc/cpuinfo cache data
notes_plat_sysinfo_355 =     cache size : 12288 KB
notes_plat_sysinfo_360 = 
notes_plat_sysinfo_365 =  From numactl --hardware  WARNING: a numactl 'node' might or might not correspond to a
notes_plat_sysinfo_370 =  physical chip.
notes_plat_sysinfo_375 = 
notes_plat_sysinfo_380 =  From /proc/meminfo
notes_plat_sysinfo_385 =     MemTotal:       16177588 kB
notes_plat_sysinfo_390 =     HugePages_Total:       0
notes_plat_sysinfo_395 =     Hugepagesize:       2048 kB
notes_plat_sysinfo_400 = 
notes_plat_sysinfo_405 =  From /etc/*release* /etc/*version*
notes_plat_sysinfo_410 =     fedora-release: Fedora release 32 (Thirty Two)
notes_plat_sysinfo_415 =     os-release:
notes_plat_sysinfo_420 =        NAME=Fedora
notes_plat_sysinfo_425 =        VERSION="32 (Workstation Edition)"
notes_plat_sysinfo_430 =        ID=fedora
notes_plat_sysinfo_435 =        VERSION_ID=32
notes_plat_sysinfo_440 =        VERSION_CODENAME=""
notes_plat_sysinfo_445 =        PLATFORM_ID="platform:f32"
notes_plat_sysinfo_450 =        PRETTY_NAME="Fedora 32 (Workstation Edition)"
notes_plat_sysinfo_455 =        ANSI_COLOR="0;34"
notes_plat_sysinfo_460 =     redhat-release: Fedora release 32 (Thirty Two)
notes_plat_sysinfo_465 =     system-release: Fedora release 32 (Thirty Two)
notes_plat_sysinfo_470 =     system-release-cpe: cpe:/o:fedoraproject:fedora:32
notes_plat_sysinfo_475 = 
notes_plat_sysinfo_480 =  uname -a:
notes_plat_sysinfo_485 =     Linux tigerlake1-ravi 5.7.0-0.rc6.1.1.cet.fc32.x86_64 \#1 SMP Mon May 18 17:21:34 PDT
notes_plat_sysinfo_490 =     2020 x86_64 x86_64 x86_64 GNU/Linux
notes_plat_sysinfo_495 = 
notes_plat_sysinfo_500 =  run-level 3 May 21 18:49
notes_plat_sysinfo_505 = 
notes_plat_sysinfo_510 =  SPEC is set to: /home/ucsd/SpectreSandboxing/spec2017
notes_plat_sysinfo_515 =     Filesystem                              Type  Size  Used Avail Use% Mounted on
notes_plat_sysinfo_520 =     /dev/mapper/fedora_localhost--live-home ext4  391G  124G  247G  34% /home
notes_plat_sysinfo_525 = 
notes_plat_sysinfo_530 =  Additional information from dmidecode follows.  WARNING: Use caution when you interpret
notes_plat_sysinfo_535 =  this section. The 'dmidecode' program reads system data which is "intended to allow
notes_plat_sysinfo_540 =  hardware to be accurately determined", but the intent may not be met, as there are
notes_plat_sysinfo_545 =  frequent changes to hardware, firmware, and the "DMTF SMBIOS" standard.
notes_plat_sysinfo_550 = 
notes_plat_sysinfo_555 =  (End of data from sysinfo program)
notes_wrap_columns = 0
notes_wrap_indent =   
num              = 602
obiwan           = 
os_exe_ext       = 
output_format    = txt,cfg,pdf,csv
output_root      = 
outputdir        = output
parallel_test    = 1
parallel_test_submit = 0
parallel_test_workloads = 
path             = /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s
plain_train      = 1
platform         = 
power            = 0
preENV_KMP_AFFINITY = granularity=fine,compact
preENV_LD_LIBRARY_PATH = /home/ucsd/SpectreSandboxing/spec2017/lib/ia32:/home/ucsd/SpectreSandboxing/spec2017/lib/intel64
preENV_OMP_STACKSIZE = 192M
preenv           = 0
prefix           = 
prepared_by      = Intel Corporation
ranks            = 1
rawhash_bits     = 256
rebuild          = 0
reftime          = reftime
reltol           = 
reportable       = 0
resultdir        = result
review           = 0
run              = all
runcpu           = /home/ucsd/SpectreSandboxing/spec2017/bin/harness/runcpu --configfile wasm_lucet --action build --define cores=1 --noreportable --nopower --runmode speed --tune base --size refspeed 602.gcc_s --nopreenv --note-preenv --logfile /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.109/templogs/preenv.intspeed.109.0 --lognum 109.0 --from_runcpu 2
rundir           = run
runmode          = speed
safe_eval        = 1
save_build_files = 
section_specifier_fatal = 1
setprocgroup     = 1
setup_error      = 0
sigint           = 2
size             = refspeed
size_class       = ref
skipabstol       = 
skipobiwan       = 
skipreltol       = 
skiptol          = 
smarttune        = base
specdiff         = specdiff
specrun          = specinvoke
srcalt           = 
srcdir           = src
srcsource        = /home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/502.gcc_r/src
stagger          = 10
strict_rundir_verify = 0
sw_avail         = Sep-2017
sw_base_ptrsize  = 64-bit
sw_compiler001   = C/C++: Version 8.1.0 of GNU C/C++
sw_compiler002   = Compiler for Linux;
sw_compiler003   = Fortran: Version 8.1.0 of GNU Fortran
sw_compiler004   = Compiler for Linux
sw_file          = ext4
sw_os001         = Fedora release 32 (Thirty Two)
sw_os002         = 5.7.0-0.rc6.1.1.cet.fc32.x86_64
sw_state         = Run level 3 (add definition here)
sysinfo_hash_bits = 256
sysinfo_program  = specperl /home/ucsd/SpectreSandboxing/spec2017/bin/sysinfo
sysinfo_program_hash = sysinfo:SHA:ecd2bef08f316af97f5a7768b641e2a3307c1b4b68efb5a57fa76367d790d233
table            = 1
teeout           = 0
test_date        = May-2020
test_sponsor     = Intel Corporation
tester           = Intel Corporation
threads          = 1
top              = /home/ucsd/SpectreSandboxing/spec2017
train_single_thread = 0
train_with       = train
tune             = base
uid              = 1004
unbuffer         = 1
uncertainty_exception = 5
update           = 0
update_url       = http://www.spec.org/auto/cpu2017/updates/
use_submit_for_compare = 0
use_submit_for_speed = 0
username         = ucsd
verbose          = 5
verify_binaries  = 1
version          = 0.905000
version_url      = http://www.spec.org/auto/cpu2017/current_version
voltage_range    = 
worklist         = list
OUTPUT_RMFILES   = 200.opts-O3_-finline-limit_50000.s scilab.opts-O3_-finline-limit_50000.s train01.opts-O3_-finline-limit_50000.s
  Compile for '602.gcc_s' started at: 2020-05-22 22:07:58 (1590210478)
Issuing make.clean command 'specmake --output-sync -j8 clean'
Start make.clean command: 2020-05-22 22:07:58 (1590210478.7008)
rm -rf *.o  200.opts-O3_-finline-limit_50000.s scilab.opts-O3_-finline-limit_50000.s train01.opts-O3_-finline-limit_50000.s
find . \( -name \*.o -o -name '*.fppized.f*' -o -name '*.i' -o -name '*.mod' \) -print | xargs rm -rf
rm -rf sgcc
rm -rf sgcc.exe
rm -rf core
Stop make.clean command: 2020-05-22 22:07:58 (1590210478.87522)
Elapsed time for make.clean command: 00:00:00 (0.174417018890381)
Issuing make command 'specmake --output-sync -j8 build'
Start make command: 2020-05-22 22:07:58 (1590210478.87692)
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cc1-checksum.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cc1-checksum.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o alloca.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  alloca.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o alloc-pool.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  alloc-pool.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o main.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  main.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o argv.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  argv.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bid2dpd_dpd2bid.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bid2dpd_dpd2bid.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o auto-inc-dec.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  auto-inc-dec.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from auto-inc-dec.c:37:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from auto-inc-dec.c:37:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from auto-inc-dec.c:37:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from auto-inc-dec.c:37:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from auto-inc-dec.c:37:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
5 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o attribs.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  attribs.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-errors.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-errors.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-lang.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-lang.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-lex.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-lex.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-convert.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-convert.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-pragma.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-pragma.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bitmap.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bitmap.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
bitmap.c:792:10: warning: shift count >= width of type [-Wshift-count-overflow]
    word >>= 32, bit_no += 32;
         ^   ~~
bitmap.c:845:10: warning: shift count >= width of type [-Wshift-count-overflow]
    word >>= 32, bit_no += 32;
         ^   ~~
2 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-aux-info.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-aux-info.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o alias.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  alias.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
alias.c:262:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree expr = MEM_EXPR (mem);
              ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:262:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree expr = MEM_EXPR (mem);
              ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:269:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!MEM_OFFSET (mem)
       ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:269:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!MEM_OFFSET (mem)
       ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:270:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || !MEM_SIZE (mem))
          ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:270:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || !MEM_SIZE (mem))
          ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:308:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ref->ref_alias_set = MEM_ALIAS_SET (mem);
                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:308:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ref->ref_alias_set = MEM_ALIAS_SET (mem);
                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:313:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INTVAL (MEM_OFFSET (mem)) < 0
              ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:313:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INTVAL (MEM_OFFSET (mem)) < 0
              ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:314:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
                   ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:314:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
                                             ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:314:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
                   ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:314:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))
                                             ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:318:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ref->offset += INTVAL (MEM_OFFSET (mem)) * BITS_PER_UNIT;
                         ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:318:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ref->offset += INTVAL (MEM_OFFSET (mem)) * BITS_PER_UNIT;
                         ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:319:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ref->size = INTVAL (MEM_SIZE (mem)) * BITS_PER_UNIT;
                      ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:319:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ref->size = INTVAL (MEM_SIZE (mem)) * BITS_PER_UNIT;
                      ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:329:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (mem) != get_spill_slot_decl (false)
      ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:329:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (mem) != get_spill_slot_decl (false)
      ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:379:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:379:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:379:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
                                            ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:379:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || (!MEM_ALIAS_SET (mem1) && !MEM_ALIAS_SET (mem2)));
                                            ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:381:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
                                  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:381:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
                                                        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:381:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
                                  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:381:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return ! alias_sets_conflict_p (MEM_ALIAS_SET (mem1), MEM_ALIAS_SET (mem2));
                                                        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:453:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
                                 ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:453:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
                                                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:453:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
                                 ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:453:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))
                                                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:481:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return  for_each_rtx (&PATTERN (insn1), (rtx_function) walk_mems_1,
                         ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:482:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         &PATTERN (insn2));
                          ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:685:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        return MEM_ALIAS_SET (DECL_RTL (t));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:685:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        return MEM_ALIAS_SET (DECL_RTL (t));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1002:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        rtx temp, src_0 = XEXP (src, 0), src_1 = XEXP (src, 1);
                                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1058:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      return find_base_value (XEXP (src, 1));
                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1063:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (CONST_INT_P (XEXP (src, 1)) && INTVAL (XEXP (src, 1)) != 0)
                                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1159:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (set);
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (XEXP (src, 0) != dest && XEXP (src, 1) != dest)
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1207:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            other = XEXP (src, 1);
                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1208:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (XEXP (src, 1) == dest)
                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1305:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx x1 = canon_rtx (XEXP (x, 1));
                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1307:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (x0 != XEXP (x, 0) || x1 != XEXP (x, 1))
                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1388:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
             && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)))
                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1388:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
             && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)))
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1389:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            || (rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 1))
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1390:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 0))));
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1397:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx yop1 = canon_rtx (XEXP (y, 1));
                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1400:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)), yop1))
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1402:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)), yop0)));
                                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1408:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)),
                                                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1409:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         canon_rtx (XEXP (y, 1))));
                                                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1531:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      return find_base_term (XEXP (x, 1));
                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1542:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        rtx tmp2 = XEXP (x, 1);
                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1604:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) != 0)
                                               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1668:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (int) GET_MODE_UNIT_SIZE (y_mode) < -INTVAL (XEXP (x, 1))))
                                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1672:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (int) GET_MODE_UNIT_SIZE (x_mode) < -INTVAL (XEXP (y, 1))))
                                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1798:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    x = XEXP (x, 1);
        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1804:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    y = XEXP (y, 1);
        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1827:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx x1 = XEXP (x, 1);
               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1834:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx y1 = XEXP (y, 1);
                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1862:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx y1 = XEXP (y, 1);
               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1879:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx x1 = canon_rtx (XEXP (x, 1));
                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1880:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx y1 = canon_rtx (XEXP (y, 1));
                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1908:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (GET_CODE (y) == AND || ysize < -INTVAL (XEXP (x, 1)))
                                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:1918:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (GET_CODE (x) == AND || xsize < -INTVAL (XEXP (y, 1)))
                                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2000:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (mem2)
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2000:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (mem2)
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2007:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (mem1)
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2007:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (mem1)
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2140:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
               ^~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2140:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
               ^~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2140:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
                                     ^~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2140:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree exprx = MEM_EXPR (x), expry = MEM_EXPR (y);
                                     ^~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2152:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       && ! MEM_OFFSET (x))
            ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2152:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       && ! MEM_OFFSET (x))
            ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2154:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! MEM_OFFSET (y)))
               ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2154:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! MEM_OFFSET (y)))
               ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2165:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  moffsetx = MEM_OFFSET (x);
             ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2165:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  moffsetx = MEM_OFFSET (x);
             ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2193:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  moffsety = MEM_OFFSET (y);
             ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2193:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  moffsety = MEM_OFFSET (y);
             ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2245:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2245:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2245:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2245:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && MEM_ADDR_SPACE (rtlx) != MEM_ADDR_SPACE (rtly))
                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2254:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    offsetx = INTVAL (XEXP (basex, 1)), basex = XEXP (basex, 0);
                      ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2258:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    offsety = INTVAL (XEXP (basey, 1)), basey = XEXP (basey, 0);
                      ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2272:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))
             ^~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2272:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))
                                       ^~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2272:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))
                                       ^~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2275:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :
             ^~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2275:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :
                                       ^~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2275:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :
                                       ^~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2288:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_SIZE (x) && moffsetx)
      ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2288:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_SIZE (x) && moffsetx)
      ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2289:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    sizex = INTVAL (MEM_SIZE (x));
                    ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2289:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    sizex = INTVAL (MEM_SIZE (x));
                    ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2290:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_SIZE (y) && moffsety)
      ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2290:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_SIZE (y) && moffsety)
      ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2291:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    sizey = INTVAL (MEM_SIZE (y));
                    ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2291:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    sizey = INTVAL (MEM_SIZE (y));
                    ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2324:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
      ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2324:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
      ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2325:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2325:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2337:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2337:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2337:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2337:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2409:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
      ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2409:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
      ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2410:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2410:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2422:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2422:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2422:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2422:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2481:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
      ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2481:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER
      ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2482:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2482:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2492:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2492:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2492:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2492:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2599:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note_stores (PATTERN (insn), memory_modified_1, CONST_CAST_RTX(mem));
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2684:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2705:8: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && REG_NOTES (insn) != 0
                     ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2707:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                record_set (SET_DEST (PATTERN (insn)), NULL_RTX, NULL);
                                      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2709:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                note_stores (PATTERN (insn), record_set, NULL);
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2711:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              set = single_set (insn);
                    ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2711:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              set = single_set (insn);
                    ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2718:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx src = SET_SRC (set);
                            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2742:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      t = plus_constant (t, INTVAL (XEXP (src, 1)));
                                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
alias.c:2755:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && NOTE_KIND (insn) == NOTE_INSN_FUNCTION_BEG)
                      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
138 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bb-reorder.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bb-reorder.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
bb-reorder.c:1176:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1176:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1307:9: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      JUMP_LABEL (new_jump) = label;
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1308:9: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      LABEL_NUSES (label) += 1;
                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1514:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
               !INSN_P (insn) && insn != NEXT_INSN (BB_END (src));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1515:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
               insn = NEXT_INSN (insn))
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1593:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                set_src = SET_SRC (PATTERN (old_jump));
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1593:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                set_src = SET_SRC (PATTERN (old_jump));
                                   ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1596:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  set_src = XVECEXP (PATTERN (old_jump), 0,0);
                                     ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1598:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    set_src = SET_SRC (set_src);
                              ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1607:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                old_label = XEXP (set_src, 2);
                            ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1609:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                old_label = XEXP (set_src, 1);
                            ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1636:21: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      old_label = JUMP_LABEL (old_jump);
                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1650:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  JUMP_LABEL (new_jump) = old_label;
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1729:16: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              label = JUMP_LABEL (last_insn);
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1731:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              LABEL_NUSES (label) += 1;
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1749:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   cur_insn = NEXT_INSN (cur_insn))
                              ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1752:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    BLOCK_FOR_INSN (cur_insn) = cur_bb;
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:1967:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          BLOCK_FOR_INSN (new_note) = NULL;
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:2036:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bb-reorder.c:2036:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
21 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o bt-load.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  bt-load.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from bt-load.c:39:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from bt-load.c:39:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from bt-load.c:39:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from bt-load.c:39:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from bt-load.c:39:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
bt-load.c:230:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (set = single_set (insn)))
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:230:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (set = single_set (insn)))
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:233:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx src = SET_SRC (set);
                ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:270:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx def_src = SET_SRC (single_set (def->insn));
                             ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:270:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx def_src = SET_SRC (single_set (def->insn));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:270:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx def_src = SET_SRC (single_set (def->insn));
                             ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:339:29: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx *usep = find_btr_use (PATTERN (insn));
                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:350:51: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      unambiguous_single_use = !btr_referenced_p (PATTERN (insn), usep);
                                                  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:481:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb));
                                       ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:483:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = NEXT_INSN (insn), insn_luid++)
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:526:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (btr_referenced_p (PATTERN (insn), NULL))
                                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:546:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          note_stores (PATTERN (insn), note_btr_set, &info);
                                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:555:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      rtx pat = PATTERN (insn);
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:583:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = PREV_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:678:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb));
                                       ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:680:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = NEXT_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1179:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insp = NEXT_INSN (insp);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1188:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insp = BB_END (b); ! INSN_P (insp); insp = PREV_INSN (insp))
                                                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1192:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insp = PREV_INSN (insp);
               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1195:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (old_insn);
        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1195:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (old_insn);
        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1196:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = SET_SRC (set);
        ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
bt-load.c:1240:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
28 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-ppoutput.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-ppoutput.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from c-ppoutput.c:28:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-opts.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-opts.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-semantics.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-semantics.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-dump.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-dump.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-objc-common.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-objc-common.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-gimplify.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-gimplify.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-omp.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-omp.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-format.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-format.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-pretty-print.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-pretty-print.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o caller-save.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  caller-save.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from caller-save.c:31:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from caller-save.c:31:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from caller-save.c:31:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from caller-save.c:31:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from caller-save.c:31:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
caller-save.c:158:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (saveinsn) = -1;
  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:159:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (restinsn) = -1;
  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:488:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          freq = REG_FREQ_FROM_BB (BLOCK_FOR_INSN (insn));
                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./regs.h:147:14: note: expanded from macro 'REG_FREQ_FROM_BB'
                              : ((bb)->frequency * REG_FREQ_MAX / BB_FREQ_MAX)\
                                  ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:488:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          freq = REG_FREQ_FROM_BB (BLOCK_FOR_INSN (insn));
                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./regs.h:148:14: note: expanded from macro 'REG_FREQ_FROM_BB'
                              ? ((bb)->frequency * REG_FREQ_MAX / BB_FREQ_MAX)\
                                  ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:499:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);
                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:558:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);
                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:804:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  mark_referenced_regs (&PATTERN (insn),
                                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:859:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);
                           ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:880:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        mark_referenced_regs (&PATTERN (insn),
                               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:894:25: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              basic_block bb = BLOCK_FOR_INSN (insn);
                               ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:900:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (ins = PREV_INSN (insn); ins != last->insn; ins = prev)
                         ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:902:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  prev = PREV_INSN (ins);
                         ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:905:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      NEXT_INSN (prev) = NEXT_INSN (ins);
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:905:28: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      NEXT_INSN (prev) = NEXT_INSN (ins);
                                         ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:906:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      PREV_INSN (NEXT_INSN (ins)) = prev;
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:906:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      PREV_INSN (NEXT_INSN (ins)) = prev;
                                 ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:907:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      PREV_INSN (ins) = insn;
                      ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:908:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      NEXT_INSN (ins) = NEXT_INSN (insn);
                      ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:908:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      NEXT_INSN (ins) = NEXT_INSN (insn);
                                        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:909:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      NEXT_INSN (insn) = ins;
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:910:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      if (NEXT_INSN (ins))
                          ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:911:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        PREV_INSN (NEXT_INSN (ins)) = ins;
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:911:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        PREV_INSN (NEXT_INSN (ins)) = ins;
                                   ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:982:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    SUBREG_BYTE (reg),
                                    ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1227:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1227:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1308:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1308:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1398:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      note_uses (&PATTERN (chain->insn), add_used_regs,
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1403:14: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (link = CALL_INSN_FUNCTION_USAGE (chain->insn);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1405:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
             link = XEXP (link, 1))
                    ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1427:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      note_stores (PATTERN (chain->insn), add_stored_regs,
                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
caller-save.c:1436:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (new_chain->insn) = code;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
38 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfg.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfg.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfganal.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfganal.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cfganal.c:32:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfganal.c:32:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfganal.c:32:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfganal.c:32:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfganal.c:32:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
cfganal.c:77:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REG_FUNCTION_VALUE_P (XEXP (PATTERN (insn), 0)))
                                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1061:45: note: expanded from macro 'REG_FUNCTION_VALUE_P'
  (RTL_FLAG_CHECK2("REG_FUNCTION_VALUE_P", (RTX), REG, PARALLEL)->return_val)
                                            ^~~
./rtl.h:693:48: note: expanded from macro 'RTL_FLAG_CHECK2'
#define RTL_FLAG_CHECK2(NAME, RTX, C1, C2)                              (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfganal.c:95:57: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = NEXT_INSN (insn))
                                                        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfganal.c:268:38: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!invert_jump (BB_END (bb), JUMP_LABEL (BB_END (bb)), 0))
                                     ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfganal.c:270:33: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      invert_jump (BB_END (bb), JUMP_LABEL (BB_END (bb)), 0);
                                ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
9 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgbuild.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgbuild.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
cfgbuild.c:55:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      return (NEXT_INSN (insn) == 0
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:115:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (PATTERN (insn), 0) == const1_rtx)
                   ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:153:38: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  cached_make_edge (edge_cache, src, BLOCK_FOR_INSN (label), flags);
                                     ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:278:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                vec = XVEC (PATTERN (tmp), 0);
                            ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:280:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                vec = XVEC (PATTERN (tmp), 1);
                      ^                    ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:280:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                vec = XVEC (PATTERN (tmp), 1);
                            ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:289:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if ((tmp = single_set (insn)) != NULL
                         ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:289:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if ((tmp = single_set (insn)) != NULL
                         ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:294:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);
                                       ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:294:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);
                                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:301:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (x = forced_labels; x; x = XEXP (x, 1))
                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:310:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if ((tmp = extract_asm_operands (PATTERN (insn))) != NULL)
                                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:312:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              int i, n = ASM_OPERANDS_LABEL_LENGTH (tmp);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1196:40: note: expanded from macro 'ASM_OPERANDS_LABEL_LENGTH'
#define ASM_OPERANDS_LABEL_LENGTH(RTX) XCVECLEN (RTX, 5, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:315:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 XEXP (ASM_OPERANDS_LABEL (tmp, i), 0), 0);
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1197:36: note: expanded from macro 'ASM_OPERANDS_LABEL'
#define ASM_OPERANDS_LABEL(RTX, N) XCVECEXP (RTX, 5, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:321:20: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gcc_assert (JUMP_LABEL (insn));
                          ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:322:41: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              make_label_edge (edge_cache, bb, JUMP_LABEL (insn), 0);
                                               ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:352:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                for (x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))
                                                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:359:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:366:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
             && NOTE_KIND (insn) != NOTE_INSN_BASIC_BLOCK)
                ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:367:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:391:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (label);
       ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:405:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    vec = XVEC (PATTERN (table), 0);
                ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:407:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    vec = XVEC (PATTERN (table), 1);
          ^                      ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:407:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    vec = XVEC (PATTERN (table), 1);
                ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:415:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((tmp = single_set (insn)) != NULL
             ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:415:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((tmp = single_set (insn)) != NULL
             ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:419:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    mark_tablejump_edge (XEXP (XEXP (SET_SRC (tmp), 2), 0));
                               ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:419:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    mark_tablejump_edge (XEXP (XEXP (SET_SRC (tmp), 2), 0));
                                     ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:452:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = NEXT_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:464:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          fallthru = split_block (bb, PREV_INSN (insn));
                                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:470:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (x = NEXT_INSN (flow_transfer_insn);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:472:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   x = NEXT_INSN (x))
                       ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:474:5: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  set_block_for_insn (x, NULL);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:496:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:510:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = NEXT_INSN (x);
              ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgbuild.c:512:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set_block_for_insn (x, NULL);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
36 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o calls.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  calls.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
calls.c:409:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                               CALL_INSN_FUNCTION_USAGE (call_insn));
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:242:47: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
                                              ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:406:2: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        CALL_INSN_FUNCTION_USAGE (call_insn)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:837:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        && (MEM_ALIGN (args[i].value)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:837:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        && (MEM_ALIGN (args[i].value)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:1411:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        arg_reg = XEXP (argblock, 0), arg_offset = INTVAL (XEXP (argblock, 1));
                                                           ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:1547:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    i = INTVAL (XEXP (addr, 1));
                ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:1551:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               || XEXP (addr, 1) == crtl->args.internal_arg_pointer))
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:1833:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = NEXT_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:1835:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (; insn; insn = NEXT_INSN (insn))
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:1837:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        && check_sibcall_argument_overlap_1 (PATTERN (insn)))
                                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:2706:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx offset = XEXP (elem, 1);
                           ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:2906:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              last = PREV_INSN (last);
                     ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:3193:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:3200:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && NOTE_KIND (insn) == NOTE_INSN_FUNCTION_BEG)
             ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:3842:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          last = PREV_INSN (last);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:4028:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            lower_bound = INTVAL (XEXP (XEXP (arg->stack_slot, 0), 1));
                                  ^                                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
calls.c:4265:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                i = INTVAL (XEXP (XEXP (x, 0), 1));
                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
17 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfghooks.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfghooks.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-typeck.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-typeck.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-decl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-decl.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from c-decl.c:9539:
./gt-c-decl.h:92:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (TREE_CODE ((*x).decl) == LABEL_DECL)
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./gt-c-decl.h:146:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (TREE_CODE (&((*x)).generic) == IDENTIFIER_NODE)
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./gt-c-decl.h:652:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (TREE_CODE ((*x).decl) == LABEL_DECL)
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./gt-c-decl.h:706:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (TREE_CODE (&((*x)).generic) == IDENTIFIER_NODE)
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./gt-c-decl.h:1214:3: warning: switch condition has boolean value [-Wswitch-bool]
  switch (TREE_CODE ((*x).decl) == LABEL_DECL)
  ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./gt-c-decl.h:1278:3: warning: switch condition has boolean value [-Wswitch-bool]
  switch (TREE_CODE (&((*x)).generic) == IDENTIFIER_NODE)
  ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgloopanal.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgloopanal.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
cfgloopanal.c:178:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgloopanal.c:178:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgloopanal.c:205:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgloopanal.c:205:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgloopanal.c:308:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (; seq; seq = NEXT_INSN (seq))
                    ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgloopanal.c:310:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (seq);
            ^~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgloopanal.c:310:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (seq);
            ^~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
7 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgcleanup.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgcleanup.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cfgcleanup.c:45:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfgcleanup.c:45:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfgcleanup.c:45:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfgcleanup.c:45:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cfgcleanup.c:45:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
cfgcleanup.c:219:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (rtx_equal_for_cselib_p (SET_DEST (exp), SET_SRC (exp)))
                                                  ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:305:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      != (XEXP (SET_SRC (set1), 1) == pc_rtx))
          ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:305:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      != (XEXP (SET_SRC (set1), 1) == pc_rtx))
                ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:308:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  cond1 = XEXP (SET_SRC (set1), 0);
                ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:309:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  cond2 = XEXP (SET_SRC (set2), 0);
                ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:327:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || !rtx_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
                       ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:327:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || !rtx_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
                                        ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:332:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = NEXT_INSN (BB_HEAD (b)); insn != NEXT_INSN (BB_END (b));
              ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:332:48: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = NEXT_INSN (BB_HEAD (b)); insn != NEXT_INSN (BB_END (b));
                                               ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:333:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:334:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    if (INSN_P (insn) && side_effects_p (PATTERN (insn)))
                                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:343:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = NEXT_INSN (BB_HEAD (e->src));
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:344:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn != NEXT_INSN (BB_END (e->src));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:345:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:356:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = NEXT_INSN (BB_HEAD (b));
              ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:357:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn != NEXT_INSN (BB_END (b)) && !failed;
               ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:358:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:362:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx pat = PATTERN (insn);
                    ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:395:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      != (XEXP (SET_SRC (set2), 1) == pc_rtx))
          ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:395:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      != (XEXP (SET_SRC (set2), 1) == pc_rtx))
                ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:493:17: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      locus = INSN_LOCATOR (BB_END (target));
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:671:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (BB_END (a) != PREV_INSN (BB_HEAD (b)))
                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:672:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    reorder_insns_nobb (BB_HEAD (a), BB_END (a), PREV_INSN (BB_HEAD (b)));
                                                 ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:722:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  barrier = NEXT_INSN (BB_END (b));
            ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:878:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (code == MEM && MEM_ATTRS (x) != MEM_ATTRS (y))
                     ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:878:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (code == MEM && MEM_ATTRS (x) != MEM_ATTRS (y))
                                      ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:880:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (! MEM_ATTRS (x))
            ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:881:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        MEM_ATTRS (y) = 0;
        ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:882:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (! MEM_ATTRS (y))
                 ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:883:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        MEM_ATTRS (x) = 0;
        ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:888:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
              ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:888:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
                                   ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:888:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
              ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:888:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))
                                   ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:894:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
                                  ^~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:894:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
                                                ^~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:894:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
                                  ^~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:894:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))
                                                ^~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:901:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (MEM_OFFSET (x) != MEM_OFFSET (y))
                   ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:901:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (MEM_OFFSET (x) != MEM_OFFSET (y))
                                     ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:901:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (MEM_OFFSET (x) != MEM_OFFSET (y))
                   ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:901:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (MEM_OFFSET (x) != MEM_OFFSET (y))
                                     ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:907:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (!MEM_SIZE (x))
               ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:907:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (!MEM_SIZE (x))
               ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:909:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (!MEM_SIZE (y))
                    ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:909:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (!MEM_SIZE (y))
                    ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
                                             ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:20: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                   ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (MEM_SIZE (y))));
                                             ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:26: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                         ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
                                             ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:20: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                   ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (MEM_SIZE (y))));
                                             ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:26: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                         ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
                                             ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:32: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                               ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (MEM_SIZE (y))));
                                             ^~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:38: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                                     ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:912:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),
                                             ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:32: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                               ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:913:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (MEM_SIZE (y))));
                                             ^~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./system.h:339:38: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                                     ^
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                 ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                                ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:26: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                 ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                                ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:26: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                 ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                                ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:38: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                                     ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                 ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:917:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));
                                                ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:38: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                                     ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:918:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (y, MEM_ALIGN (x));
                            ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:918:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_mem_align (y, MEM_ALIGN (x));
                            ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:958:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NOTE_INSN_BASIC_BLOCK_P (i1) && NOTE_INSN_BASIC_BLOCK_P (i2))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:958:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NOTE_INSN_BASIC_BLOCK_P (i1) && NOTE_INSN_BASIC_BLOCK_P (i2))
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:961:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  p1 = PATTERN (i1);
       ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:962:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  p2 = PATTERN (i2);
       ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:978:25: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (!rtx_equal_p (CALL_INSN_FUNCTION_USAGE (i1),
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:979:4: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        CALL_INSN_FUNCTION_USAGE (i2))
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1000:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (note = REG_NOTES (i1); note; note = XEXP (note, 1))
                  ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1000:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (note = REG_NOTES (i1); note; note = XEXP (note, 1))
                                               ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1004:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (note = REG_NOTES (i2); note; note = XEXP (note, 1))
                  ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1004:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (note = REG_NOTES (i2); note; note = XEXP (note, 1))
                                               ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1040:49: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || (returnjump_p (i1) && !side_effects_p (PATTERN (i1))))
                                                ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1043:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      i1 = PREV_INSN (i1);
           ^~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1048:49: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || (returnjump_p (i2) && !side_effects_p (PATTERN (i2))))
                                                ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1054:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      i2 = PREV_INSN (i2);
           ^~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1061:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        i1 = PREV_INSN (i1);
             ^~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1064:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        i2 = PREV_INSN (i2);
             ^~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1098:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      i1 = PREV_INSN (i1);
           ^~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1099:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      i2 = PREV_INSN (i2);
           ^~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1115:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        last1 = PREV_INSN (last1);
                ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1118:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        last1 = PREV_INSN (last1);
                ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1121:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        last2 = PREV_INSN (last2);
                ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1124:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        last2 = PREV_INSN (last2);
                ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1204:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((XEXP (SET_SRC (set1), 1) == pc_rtx)
           ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1204:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((XEXP (SET_SRC (set1), 1) == pc_rtx)
                 ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1205:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          != (XEXP (SET_SRC (set2), 1) == pc_rtx))
              ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1205:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          != (XEXP (SET_SRC (set2), 1) == pc_rtx))
                    ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1208:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      cond1 = XEXP (SET_SRC (set1), 0);
                    ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1209:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      cond2 = XEXP (SET_SRC (set2), 0);
                    ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1222:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && rtx_renumbered_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
                                           ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1222:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && rtx_renumbered_equal_p (XEXP (cond1, 1), XEXP (cond2, 1)))
                                                            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1224:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && rtx_renumbered_equal_p (XEXP (cond1, 1),
                                              ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1227:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (cond2, 1))));
                                              ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1292:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              p1 = PATTERN (table1);
                   ^~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1293:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              p2 = PATTERN (table2);
                   ^~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1299:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && (XVECLEN (p1, 1) == XVECLEN (p2, 1))
                           ^            ~
./rtl.h:713:40: note: expanded from macro 'XVECLEN'
#define XVECLEN(RTX, N)         GET_NUM_ELEM (XVEC (RTX, N))
                                              ^          ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1299:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && (XVECLEN (p1, 1) == XVECLEN (p2, 1))
                                              ^            ~
./rtl.h:713:40: note: expanded from macro 'XVECLEN'
#define XVECLEN(RTX, N)         GET_NUM_ELEM (XVEC (RTX, N))
                                              ^          ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1300:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && rtx_equal_p (XEXP (p1, 2), XEXP (p2, 2))
                                       ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1300:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && rtx_equal_p (XEXP (p1, 2), XEXP (p2, 2))
                                                     ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1301:26: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && rtx_equal_p (XEXP (p1, 3), XEXP (p2, 3)))
                                       ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1301:40: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && rtx_equal_p (XEXP (p1, 3), XEXP (p2, 3)))
                                                     ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1306:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  for (i = XVECLEN (p1, 1) - 1; i >= 0 && identical; i--)
                           ^            ~
./rtl.h:713:40: note: expanded from macro 'XVECLEN'
#define XVECLEN(RTX, N)         GET_NUM_ELEM (XVEC (RTX, N))
                                              ^          ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1307:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    if (!rtx_equal_p (XVECEXP (p1, 1, i), XVECEXP (p2, 1, i)))
                                      ^            ~
./rtl.h:712:39: note: expanded from macro 'XVECEXP'
#define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
                                           ^          ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1307:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    if (!rtx_equal_p (XVECEXP (p1, 1, i), XVECEXP (p2, 1, i)))
                                                          ^            ~
./rtl.h:712:39: note: expanded from macro 'XVECEXP'
#define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
                                           ^          ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1536:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1559:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            newpos2 = NEXT_INSN (newpos2);
                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1561:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            newpos2 = NEXT_INSN (newpos2);
                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1563:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            newpos2 = NEXT_INSN (newpos2);
                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1565:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            newpos2 = NEXT_INSN (newpos2);
                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1571:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      redirect_to = split_block (src2, PREV_INSN (newpos2))->dest;
                                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1649:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    newpos1 = NEXT_INSN (newpos1);
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1652:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    newpos1 = NEXT_INSN (newpos1);
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1654:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NOTE_INSN_BASIC_BLOCK_P (newpos1))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1655:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    newpos1 = NEXT_INSN (newpos1);
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1658:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    newpos1 = NEXT_INSN (newpos1);
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1660:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  redirect_from = split_block (src1, PREV_INSN (newpos1))->src;
                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1831:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1919:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (NOTE_KIND (BB_HEAD (b)) == NOTE_INSN_DELETED_LABEL)
                      ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:1921:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      rtx bb_note = NEXT_INSN (BB_HEAD (b));
                                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:2141:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = NEXT_INSN (BB_END (bb));
                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:2142:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn && !NOTE_INSN_BASIC_BLOCK_P (insn);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:2145:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          next = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:2147:11: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && LABEL_NUSES (insn) == LABEL_PRESERVE_P (insn)
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgcleanup.c:2156:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              next = NEXT_INSN (next);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
132 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfglayout.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfglayout.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
cfglayout.c:61:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx prevfirst = PREV_INSN (first);
                  ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:62:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx nextlast = NEXT_INSN (last);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:64:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (first) = NULL;
  ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:65:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (last) = NULL;
  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:67:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    NEXT_INSN (prevfirst) = nextlast;
    ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:69:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (nextlast) = prevfirst;
    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:90:48: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last_insn = insn = BB_END (bb); (insn = NEXT_INSN (insn)) != 0; )
                                               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:102:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          switch (NOTE_KIND (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:114:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (NEXT_INSN (insn)
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:117:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              insn = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:142:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      prev = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:144:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        switch (NOTE_KIND (insn))
                ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:191:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
       && NOTE_KIND (insn) != NOTE_INSN_BASIC_BLOCK;
          ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:192:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:197:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (PREV_INSN (insn))
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:199:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            unlink_insn_chain (get_insns (), PREV_INSN (insn));
                                             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:208:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (PREV_INSN (BB_HEAD (bb)) && next_insn != BB_HEAD (bb))
          ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:210:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              PREV_INSN (BB_HEAD (bb)));
                                              ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:212:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (NEXT_INSN (BB_END (bb)) && BB_END (bb) != end)
          ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:213:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        bb->il.rtl->footer = unlink_insn_chain (NEXT_INSN (BB_END (bb)), end);
                                                ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:214:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next_insn = NEXT_INSN (BB_END (bb));
                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:447:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NOTE_BLOCK (note) = s;
      ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:456:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NOTE_BLOCK (insn) = s;
      ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:504:25: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return locator_scope (INSN_LOCATOR (insn));
                        ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:548:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return locator_line (INSN_LOCATOR (insn));
                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:567:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return locator_file (INSN_LOCATOR (insn));
                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:607:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx body = PATTERN (insn);
                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:715:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (NEXT_INSN (insn))
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:716:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:727:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            NEXT_INSN (insn) = bb->il.rtl->header;
            ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:730:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          PREV_INSN (bb->il.rtl->header) = insn;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:732:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          while (NEXT_INSN (insn))
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:733:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = NEXT_INSN (insn);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:736:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        NEXT_INSN (insn) = BB_HEAD (bb);
        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:739:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (BB_HEAD (bb)) = insn;
      ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:743:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (insn) = bb->il.rtl->footer;
          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:744:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          PREV_INSN (bb->il.rtl->footer) = insn;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:745:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          while (NEXT_INSN (insn))
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:746:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = NEXT_INSN (insn);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:750:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (insn) = cfg_layout_function_footer;
  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:752:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (cfg_layout_function_footer) = insn;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:754:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (NEXT_INSN (insn))
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:755:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = NEXT_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:862:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (extract_asm_operands (PATTERN (bb_end_insn)) != NULL)
                                         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:951:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              end = PREV_INSN (BB_HEAD (e->src));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:953:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     && (!INSN_P (insn) || INSN_LOCATOR (insn) == 0))
                                           ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:954:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                insn = PREV_INSN (insn);
                       ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:956:20: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && locator_eq (INSN_LOCATOR (insn), (int) e->goto_locus))
                                 ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:959:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && INSN_LOCATOR (BB_END (e->src)) == 0)
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:961:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  INSN_LOCATOR (BB_END (e->src)) = e->goto_locus;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:967:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  end = NEXT_INSN (BB_END (e->dest));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:969:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    insn = NEXT_INSN (insn);
                           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:970:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (insn != end && INSN_LOCATOR (insn)
                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:971:24: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && locator_eq (INSN_LOCATOR (insn), (int) e->goto_locus))
                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:978:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              INSN_LOCATOR (BB_END (nb)) = e->goto_locus;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:997:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       prevx = x, insn_cnt1++, x = NEXT_INSN (x))
                                   ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:998:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    gcc_assert (PREV_INSN (x) == prevx);
                ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1004:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       nextx = x, insn_cnt2++, x = PREV_INSN (x))
                                   ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1005:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    gcc_assert (NEXT_INSN (x) == nextx);
                ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1133:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1151:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = from; insn != NEXT_INSN (to); insn = NEXT_INSN (insn))
                            ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1151:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = from; insn != NEXT_INSN (to); insn = NEXT_INSN (insn))
                                                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1177:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          switch (NOTE_KIND (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1205:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  insn = NEXT_INSN (last);
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1232:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (NEXT_INSN (insn))
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1233:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1242:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (NEXT_INSN (insn))
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1243:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1271:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (x = nonlocal_goto_handler_labels; x; x = XEXP (x, 1))
                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfglayout.c:1273:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      bb = BLOCK_FOR_INSN (XEXP (x, 0));
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
70 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-parser.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-parser.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o c-common.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  c-common.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
c-common.c:8341:32: warning: shift count >= width of type [-Wshift-count-overflow]
    return ((HOST_WIDE_INT)uc) << (HOST_BITS_PER_WIDE_INT - CHAR_TYPE_SIZE)
                               ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:8342:11: warning: shift count >= width of type [-Wshift-count-overflow]
                               >> (HOST_BITS_PER_WIDE_INT - CHAR_TYPE_SIZE);
                               ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cgraphbuild.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cgraphbuild.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgloopmanip.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgloopmanip.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgloop.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgloop.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o concat.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  concat.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgexpand.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgexpand.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
cfgexpand.c:1495:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      print_rtl (dump_file, since ? NEXT_INSN (since) : since);
                                    ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1573:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (get_last_insn ());
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1577:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = PREV_INSN (insn); insn != last;)
                  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1579:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = PREV_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1581:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            delete_insn (NEXT_INSN (insn));
                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1712:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    BB_END (bb) = PREV_INSN (BB_END (bb));
                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1715:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  new_bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);
                               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:1725:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    BB_END (new_bb) = PREV_INSN (BB_END (new_bb));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2030:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last = NEXT_INSN (last); last; last = NEXT_INSN (last))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2030:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last = NEXT_INSN (last); last; last = NEXT_INSN (last))
                                             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2078:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  last = NEXT_INSN (last);
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2082:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (NEXT_INSN (last))
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2091:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      delete_insn (NEXT_INSN (last));
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2100:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (last))
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2102:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);
                               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2106:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        BB_END (bb) = PREV_INSN (last);
                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2355:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || SYMBOL_REF_DECL (XEXP (op0, 0)) != exp)
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:2851:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            XEXP (op0, 1)));
                                            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:332:32: note: expanded from macro 'gen_rtx_NEG'
  gen_rtx_fmt_e (NEG, (MODE), (ARG0))
                               ^~~~
./genrtl.h:30:35: note: expanded from macro 'gen_rtx_fmt_e'
        gen_rtx_fmt_e_stat (c, m, p0 MEM_STAT_INFO)
                                  ^~
./genrtl.h:312:44: note: expanded from macro 'gen_rtx_CONCAT'
  gen_rtx_fmt_ee (CONCAT, (MODE), (ARG0), (ARG1))
                                           ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3067:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3096:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_VAR_LOCATION_LOC (insn) = val;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3096:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_VAR_LOCATION_LOC (insn) = val;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3173:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      BB_HEAD (bb) = NEXT_INSN (last);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3175:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        BB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3183:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_BASIC_BLOCK (note) = bb;
  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3336:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  INSN_VAR_LOCATION_LOC (val) = const0_rtx;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3336:5: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  INSN_VAR_LOCATION_LOC (val) = const0_rtx;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3338:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  INSN_VAR_LOCATION_LOC (val) = (rtx)value;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3338:5: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  INSN_VAR_LOCATION_LOC (val) = (rtx)value;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3431:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    last = PREV_INSN (last);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3433:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    last = PREV_INSN (PREV_INSN (last));
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3433:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    last = PREV_INSN (PREV_INSN (last));
                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3472:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  init_block = create_basic_block (NEXT_INSN (get_insns ()),
                                   ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3538:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (NEXT_INSN (head) && NOTE_P (NEXT_INSN (head)))
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3539:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    head = NEXT_INSN (head);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgexpand.c:3540:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  exit_block = create_basic_block (NEXT_INSN (head), end,
                                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
35 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cgraph.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cgraph.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o combine-stack-adj.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  combine-stack-adj.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from combine-stack-adj.c:50:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine-stack-adj.c:50:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine-stack-adj.c:50:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine-stack-adj.c:50:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine-stack-adj.c:50:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
combine-stack-adj.c:133:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx tmp = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:133:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx tmp = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:141:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tmp = PATTERN (insn);
        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:151:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && SET_SRC (this_rtx) == SET_DEST (this_rtx))
             ^~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:188:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    ml->sp_offset = INTVAL (XEXP (XEXP (*ref, 0), 1));
                            ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:325:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (SET_SRC (last), 0) == stack_pointer_rtx
                   ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:329:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = GEN_INT (INTVAL (XEXP (SET_SRC (last), 1)) + this_adjust);
                               ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:329:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = GEN_INT (INTVAL (XEXP (SET_SRC (last), 1)) + this_adjust);
                                     ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:328:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (SET_SRC (last), 1)
          ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:328:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (SET_SRC (last), 1)
                ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:348:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = GEN_INT (INTVAL (XEXP (SET_SRC (expr), 1)) - this_adjust);
                               ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:348:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = GEN_INT (INTVAL (XEXP (SET_SRC (expr), 1)) - this_adjust);
                                     ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:347:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (SET_SRC (expr), 1)
          ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:347:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (SET_SRC (expr), 1)
                ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:379:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:388:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx src = SET_SRC (set);
                    ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:396:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              HOST_WIDE_INT this_adjust = INTVAL (XEXP (src, 1));
                                                  ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:492:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && XEXP (XEXP (XEXP (dest, 0), 1), 0)
                               ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:496:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1))
                                 ^                               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:496:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1))
                                       ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:516:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && !for_each_rtx (&PATTERN (insn), record_stack_refs, &data))
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine-stack-adj.c:527:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || reg_mentioned_p (stack_pointer_rtx, PATTERN (insn))))
                                                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
27 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cp-demint.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cp-demint.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o convert.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  convert.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cfgrtl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cfgrtl.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
cfgrtl.c:89:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  switch (NOTE_KIND (note))
          ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:108:7: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && LABEL_NAME (label) == 0
             ^~~~~~~~~~~~~~~~~~
./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
#define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
                        ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:117:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx next = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:128:23: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          const char *name = LABEL_NAME (insn);
                             ^~~~~~~~~~~~~~~~~
./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
#define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
                        ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:132:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NOTE_KIND (insn) = NOTE_INSN_DELETED_LABEL;
          ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:133:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NOTE_DELETED_LABEL_NAME (insn) = name;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:876:39: note: expanded from macro 'NOTE_DELETED_LABEL_NAME'
#define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 4, NOTE)
                                      ^            ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:151:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (JUMP_LABEL (insn)
          ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:153:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        LABEL_NUSES (JUMP_LABEL (insn))--;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:153:15: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        LABEL_NUSES (JUMP_LABEL (insn))--;
                     ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:977:33: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                                ^~~
./rtl.h:736:45: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:160:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (XEXP (note, 0))--;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:169:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (XEXP (note, 0))--;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:175:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx pat = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:188:6: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            LABEL_NUSES (label)--;
            ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:204:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && BLOCK_FOR_INSN (insn)
         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:205:18: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && BB_END (BLOCK_FOR_INSN (insn)) == insn)
                 ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./basic-block.h:492:26: note: expanded from macro 'BB_END'
#define BB_END(B)       (B)->il.rtl->end_
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:209:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
    purge_dead_edges (BLOCK_FOR_INSN (insn));
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:227:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (start);
             ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:234:2: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        set_block_for_insn (start, NULL);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:256:16: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (bb = NOTE_BASIC_BLOCK (bb_note)) != NULL
               ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:267:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          after = PREV_INSN (head);
                  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:271:31: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (after != bb_note && NEXT_INSN (after) != bb_note)
                              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:298:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NOTE_BASIC_BLOCK (bb_note) = bb;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:302:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (end) == bb_note)
      ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:397:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = BB_HEAD (bb); ; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:399:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          BLOCK_FOR_INSN (insn) = bb;
          ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:412:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:414:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      BLOCK_FOR_INSN (insn) = NULL;
      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:482:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  end = NEXT_INSN (end);
        ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:483:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = begin; insn != end; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:512:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = NEXT_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:513:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:515:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return NEXT_INSN (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:537:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = PREV_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:548:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                next = NEXT_INSN (next);
                       ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:565:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  new_bb = create_basic_block (NEXT_INSN (insn), BB_END (bb), bb);
                               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:595:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    b_end = PREV_INSN (b_debug_start = b_end);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:606:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      b_head = NEXT_INSN (b_head);
               ^~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:611:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NOTE_INSN_BASIC_BLOCK_P (b_head))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:619:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      b_head = NEXT_INSN (b_head);
               ^~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:627:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (prev = PREV_INSN (a_end); ; prev = PREV_INSN (prev))
                  ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:627:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (prev = PREV_INSN (a_end); ; prev = PREV_INSN (prev))
                                              ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:629:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            || NOTE_INSN_BASIC_BLOCK_P (prev)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:649:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      a_end = PREV_INSN (del_first);
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:652:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    del_first = NEXT_INSN (a_end);
                ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:672:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (NEXT_INSN (a_end) != b_debug_start)
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:673:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reorder_insns_nobb (NEXT_INSN (a_end), PREV_INSN (b_debug_start),
                            ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:673:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reorder_insns_nobb (NEXT_INSN (a_end), PREV_INSN (b_debug_start),
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:778:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:778:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:810:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (PREV_INSN (insn))
                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:811:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:811:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
                               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:811:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
                                                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:813:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    src->il.rtl->footer = NEXT_INSN (insn);
                                          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:814:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (NEXT_INSN (insn))
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:815:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:815:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
                               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:815:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
                                                   ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:819:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              insn = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:823:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        delete_insn_chain (kill_from, PREV_INSN (BB_HEAD (target)),
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:853:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      JUMP_LABEL (BB_END (src)) = target_label;
      ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:854:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (target_label)++;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:873:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (barrier != NEXT_INSN (BB_END (src)))
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:880:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              update_bb_for_insn_chain (NEXT_INSN (BB_END (src)),
                                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:881:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        PREV_INSN (barrier), src);
                                        ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:883:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:883:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);
                         ^~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:883:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);
                                                 ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:884:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:884:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);
                         ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:884:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);
                                                 ^~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:886:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NEXT_INSN (new_insn) = barrier;
              ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:887:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NEXT_INSN (PREV_INSN (barrier)) = new_insn;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:887:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NEXT_INSN (PREV_INSN (barrier)) = new_insn;
                         ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:889:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (new_insn) = PREV_INSN (barrier);
              ^~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:889:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (new_insn) = PREV_INSN (barrier);
                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:890:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (barrier) = new_insn;
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:934:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        vec = XVEC (PATTERN (tmp), 0);
                    ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:936:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        vec = XVEC (PATTERN (tmp), 1);
              ^                    ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:936:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        vec = XVEC (PATTERN (tmp), 1);
                    ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:942:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            --LABEL_NUSES (old_label);
              ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:943:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            ++LABEL_NUSES (new_label);
              ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:947:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((tmp = single_set (insn)) != NULL
                 ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:947:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((tmp = single_set (insn)) != NULL
                 ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:951:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (XEXP (SET_SRC (tmp), 2), 0) == old_label)
                   ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:951:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (XEXP (SET_SRC (tmp), 2), 0) == old_label)
                         ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:953:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,
          ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:953:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,
                ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:955:6: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          --LABEL_NUSES (old_label);
            ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:956:6: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          ++LABEL_NUSES (new_label);
            ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:959:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if ((tmp = extract_asm_operands (PATTERN (insn))) != NULL)
                                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:961:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      int i, n = ASM_OPERANDS_LABEL_LENGTH (tmp);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1196:40: note: expanded from macro 'ASM_OPERANDS_LABEL_LENGTH'
#define ASM_OPERANDS_LABEL_LENGTH(RTX) XCVECLEN (RTX, 5, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:970:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx old_ref = ASM_OPERANDS_LABEL (tmp, i);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1197:36: note: expanded from macro 'ASM_OPERANDS_LABEL'
#define ASM_OPERANDS_LABEL(RTX, N) XCVECEXP (RTX, 5, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:974:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              ASM_OPERANDS_LABEL (tmp, i)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1197:36: note: expanded from macro 'ASM_OPERANDS_LABEL'
#define ASM_OPERANDS_LABEL(RTX, N) XCVECEXP (RTX, 5, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:976:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              --LABEL_NUSES (old_label);
                ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:977:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              ++LABEL_NUSES (new_label);
                ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:981:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (JUMP_LABEL (insn) == old_label)
          ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:983:4: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          JUMP_LABEL (insn) = new_label;
          ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:993:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (JUMP_LABEL (insn) != new_label
              ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1008:42: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!currently_expanding_to_rtl || JUMP_LABEL (insn) == old_label)
                                         ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1011:16: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gcc_assert (JUMP_LABEL (insn) == old_label);
                      ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1051:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (insn = BB_HEAD (src); insn != NEXT_INSN (BB_END (src));
                                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1052:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
         insn = NEXT_INSN (insn))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1120:10: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && JUMP_LABEL (BB_END (e->src)) == BB_HEAD (e->dest))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1201:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      note = NEXT_INSN (note);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1249:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      JUMP_LABEL (BB_END (jump_block)) = label;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1250:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label)++;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1309:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (q = NEXT_INSN (BB_END (b)); q != BB_HEAD (c); q = NEXT_INSN (q))
           ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1309:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (q = NEXT_INSN (BB_END (b)); q != BB_HEAD (c); q = NEXT_INSN (q))
                                                         ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1329:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      q = PREV_INSN (q);
          ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1333:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (q != PREV_INSN (BB_HEAD (c)))
           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1334:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    delete_insn_chain (NEXT_INSN (q), PREV_INSN (BB_HEAD (c)), false);
                       ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1334:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    delete_insn_chain (NEXT_INSN (q), PREV_INSN (BB_HEAD (c)), false);
                                      ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1389:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      before = NEXT_INSN (BB_END (edge_in->src));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1461:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            tmp = NEXT_INSN (tmp);
                  ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1462:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (NOTE_INSN_BASIC_BLOCK_P (tmp))
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1463:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            tmp = NEXT_INSN (tmp);
                  ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1467:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            after = PREV_INSN (tmp);
                    ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1622:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb)); insn != last;
                                   ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1623:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1662:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (x = BB_HEAD (bb); x != NULL_RTX; x = NEXT_INSN (x))
                                                    ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1675:60: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (tmp_rtx = rtx_first; NULL != tmp_rtx; tmp_rtx = NEXT_INSN (tmp_rtx))
                                                           ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1746:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           tmp_rtx = XEXP (tmp_rtx, 1))
                     ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1821:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1821:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1822:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (BLOCK_FOR_INSN (insn) != bb)
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1826:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   BLOCK_FOR_INSN (insn) ? BLOCK_FOR_INSN (insn)->index : 0,
                                           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1831:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = bb->il.rtl->header; insn; insn = NEXT_INSN (insn))
                                                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1833:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && BLOCK_FOR_INSN (insn) != NULL)
               ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1839:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = bb->il.rtl->footer; insn; insn = NEXT_INSN (insn))
                                                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1841:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && BLOCK_FOR_INSN (insn) != NULL)
               ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1932:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && JUMP_LABEL (BB_END (bb)) != BB_HEAD (fallthru->dest))
             ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1953:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (x = BB_HEAD (bb); x != NEXT_INSN (BB_END (bb)); x = NEXT_INSN (x))
                                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1953:64: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (x = BB_HEAD (bb); x != NEXT_INSN (BB_END (bb)); x = NEXT_INSN (x))
                                                               ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1956:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (!BARRIER_P (x) && BLOCK_FOR_INSN (x) != bb)
                              ^~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1959:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            if (! BLOCK_FOR_INSN (x))
                  ^~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1966:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 INSN_UID (x), bb->index, BLOCK_FOR_INSN (x)->index);
                                          ^~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1984:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = NEXT_INSN (x);
              ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1987:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!NOTE_INSN_BASIC_BLOCK_P (x) || NOTE_BASIC_BLOCK (x) != bb)
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1987:43: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!NOTE_INSN_BASIC_BLOCK_P (x) || NOTE_BASIC_BLOCK (x) != bb)
                                          ^~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1998:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (x = NEXT_INSN (x); x; x = NEXT_INSN (x))
                 ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:1998:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (x = NEXT_INSN (x); x; x = NEXT_INSN (x))
                                       ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2000:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            if (NOTE_INSN_BASIC_BLOCK_P (x))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2055:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (x = last_head; x != NULL_RTX; x = PREV_INSN (x))
                                             ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2063:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && BLOCK_FOR_INSN (x) != NULL)
               ^~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2080:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (; x != NULL_RTX; x = PREV_INSN (x))
                                ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2103:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      last_head = PREV_INSN (x);
                  ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2113:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (insn = NEXT_INSN (BB_END (bb)); ; insn = NEXT_INSN (insn))
                      ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2113:50: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (insn = NEXT_INSN (BB_END (bb)); ; insn = NEXT_INSN (insn))
                                                        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2115:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (!insn || NOTE_INSN_BASIC_BLOCK_P (insn))
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2138:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            for (insn = NEXT_INSN (BB_END (e->src)); insn != BB_HEAD (e->dest);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2139:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 insn = NEXT_INSN (insn))
                        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2150:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (x = last_head; x != NULL_RTX; x = PREV_INSN (x))
                                         ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2155:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (x) != NULL)
             ^~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2167:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (x = rtx_first; x; x = NEXT_INSN (x))
                             ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2169:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (NOTE_INSN_BASIC_BLOCK_P (x))
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2171:9: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          bb = NOTE_BASIC_BLOCK (x);
               ^~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2190:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (NEXT_INSN (x)
                  ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2192:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                x = NEXT_INSN (x);
                    ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2233:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2242:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (! may_trap_p (PATTERN (insn))
                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2319:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && BB_HEAD (e->dest) == JUMP_LABEL (insn))
                                           ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2566:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx insn, next, prev = PREV_INSN (BB_HEAD (bb)), *to, remaints;
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2572:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        NEXT_INSN (prev) = bb->il.rtl->header;
        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2575:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (bb->il.rtl->header) = prev;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2577:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (NEXT_INSN (insn))
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2578:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2579:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (insn) = next;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2580:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (next) = insn;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2582:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  next = NEXT_INSN (BB_END (bb));
         ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2590:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (PREV_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2591:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2591:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
                           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2591:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);
                                               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2593:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                bb->il.rtl->footer = NEXT_INSN (insn);
                                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2594:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (NEXT_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2595:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2595:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
                           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2595:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);
                                               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2599:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2604:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (insn) = bb->il.rtl->footer;
          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2605:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          PREV_INSN (bb->il.rtl->footer) = insn;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2606:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          while (NEXT_INSN (insn))
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2607:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = NEXT_INSN (insn);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2608:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (insn) = next;
          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2610:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            PREV_INSN (next) = insn;
            ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2623:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    prev = NEXT_INSN (prev);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2627:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    next = PREV_INSN (next);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2631:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (next && NEXT_INSN (next) != prev)
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2635:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (NEXT_INSN (insn))
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2636:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2637:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (insn) = *to;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2639:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PREV_INSN (*to) = insn;
        ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2706:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx insn = BB_END (a), end = PREV_INSN (BB_HEAD (a));
                                   ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2709:48: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (insn != end && (!INSN_P (insn) || INSN_LOCATOR (insn) == 0))
                                               ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2710:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = PREV_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2711:38: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (insn != end && locator_eq (INSN_LOCATOR (insn), goto_locus))
                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2716:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          end = NEXT_INSN (BB_END (b));
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2718:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = NEXT_INSN (insn);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2719:23: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (insn != end && INSN_LOCATOR (insn) != 0
                             ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2720:23: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && locator_eq (INSN_LOCATOR (insn), goto_locus))
                             ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2726:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_LOCATOR (BB_END (a)) = goto_locus;
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2736:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      delete_insn_chain (NEXT_INSN (first), last, false);
                         ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2741:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (BB_END (a)) != BB_HEAD (b))
      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2747:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!NOTE_INSN_BASIC_BLOCK_P (first))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2748:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        first = NEXT_INSN (first);
                ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2749:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      gcc_assert (NOTE_INSN_BASIC_BLOCK_P (first));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2754:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      update_bb_for_insn_chain (NEXT_INSN (first),
                                ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2769:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!NOTE_INSN_BASIC_BLOCK_P (insn))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2770:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2771:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2788:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          while (NEXT_INSN (last))
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2789:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            last = NEXT_INSN (last);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2790:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (last) = b->il.rtl->footer;
          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2791:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          PREV_INSN (b->il.rtl->footer) = last;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2808:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        ? NEXT_INSN (BB_END (e->src)) : get_insns (),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2841:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = PREV_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2869:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && MEM_VOLATILE_P (PATTERN (insn)))
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
  (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
                                      ^~~
./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
#define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2872:36: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_VOLATILE_P (XVECEXP (PATTERN (insn), 0, 0)))
                                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
  (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
                                      ^~~
./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
#define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2920:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = PREV_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2953:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          prev_insn = PREV_INSN (insn);
                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2963:31: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && keep_with_call_p (NEXT_INSN (split_at_insn)))
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:2964:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  split_at_insn = NEXT_INSN (split_at_insn);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3014:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx op1 = XEXP ((rtx)comp_rtx, 1);
            ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3030:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  JUMP_LABEL (jump) = label;
  ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3031:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label)++;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3078:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (NEXT_INSN (pat_end) != NULL_RTX)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3079:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    pat_end = NEXT_INSN (pat_end);
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3145:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
             || NOTE_INSN_BASIC_BLOCK_P (insn))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3146:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3181:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cfgrtl.c:3181:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
232 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_errors.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_errors.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_errors.c:30:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o coverage.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  coverage.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cgraphunit.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cgraphunit.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_directives.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_directives.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_directives.c:27:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_charset.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_charset.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_charset.c:25:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_lex.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_lex.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_lex.c:27:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_expr.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_expr.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_expr.c:24:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_line-map.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_line-map.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_traditional.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_traditional.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_traditional.c:24:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_identifiers.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_identifiers.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_identifiers.c:30:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_macro.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_macro.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_macro.c:31:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_symtab.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_symtab.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o crc32.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  crc32.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_mkdeps.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_mkdeps.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_directives-only.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_directives-only.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_directives-only.c:24:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cpp_pch.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cpp_pch.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cpp_pch.c:27:
./internal.h:515:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./cpp_system.h:364:6: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
  ((!defined(__cplusplus) && (GCC_VERSION >= 2007)) \
     ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dbgcnt.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dbgcnt.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cp-demangle.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cp-demangle.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o debug.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  debug.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decContext.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decContext.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decimal128.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decimal128.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dce.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dce.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
dce.c:118:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  body = PATTERN (insn);
         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:247:16: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
  min_sp_off = INTTYPE_MAXIMUM (HOST_WIDE_INT);
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./system.h:281:44: note: expanded from macro 'INTTYPE_MAXIMUM'
#define INTTYPE_MAXIMUM(t) ((t) (~ (t) 0 - INTTYPE_MINIMUM (t)))
                                           ^~~~~~~~~~~~~~~~~~~
./system.h:280:40: note: expanded from macro 'INTTYPE_MINIMUM'
                             ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
                               ~~~~~~~ ^
dce.c:252:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:252:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
                                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:258:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        size = MEM_SIZE (mem);
               ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:258:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        size = MEM_SIZE (mem);
               ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:266:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            off = INTVAL (XEXP (addr, 1));
                          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:295:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                set = single_set (DF_REF_INSN (defs->ref));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:295:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                set = single_set (DF_REF_INSN (defs->ref));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:300:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    || XEXP (SET_SRC (set), 0) != stack_pointer_rtx
                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:304:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                off += INTVAL (XEXP (SET_SRC (set), 1));
                               ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:304:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                off += INTVAL (XEXP (SET_SRC (set), 1));
                                     ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:320:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:320:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = CALL_INSN_FUNCTION_USAGE (call_insn); p; p = XEXP (p, 1))
                                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:331:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            off = INTVAL (XEXP (addr, 1));
                          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:348:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set = single_set (DF_REF_INSN (defs->ref));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:348:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set = single_set (DF_REF_INSN (defs->ref));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:349:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            off += INTVAL (XEXP (SET_SRC (set), 1));
                           ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:349:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            off += INTVAL (XEXP (SET_SRC (set), 1));
                                 ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:351:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (byte = off; byte < off + INTVAL (MEM_SIZE (mem)); byte++)
                                              ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:351:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (byte = off; byte < off + INTVAL (MEM_SIZE (mem)); byte++)
                                              ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:362:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = PREV_INSN (call_insn); insn; insn = prev_insn)
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:367:28: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (insn == BB_HEAD (BLOCK_FOR_INSN (call_insn)))
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./basic-block.h:491:26: note: expanded from macro 'BB_HEAD'
#define BB_HEAD(B)      (B)->il.rtl->head_
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:370:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        prev_insn = PREV_INSN (insn);
                    ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:378:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:378:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:392:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          off = INTVAL (XEXP (addr, 1));
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:419:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              set = single_set (DF_REF_INSN (defs->ref));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:419:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              set = single_set (DF_REF_INSN (defs->ref));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:424:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  || XEXP (SET_SRC (set), 0) != stack_pointer_rtx
                           ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:428:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              off += INTVAL (XEXP (SET_SRC (set), 1));
                             ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:428:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              off += INTVAL (XEXP (SET_SRC (set), 1));
                                   ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:511:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:473:47: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
  for ((INSN) = BB_END (BB),(CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL;        \
                                              ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:511:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:474:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:511:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:475:43: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
       (INSN) = (CURR), (CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL)
                                          ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:585:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:473:47: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
  for ((INSN) = BB_END (BB),(CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL;        \
                                              ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:585:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:474:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:585:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:475:43: note: expanded from macro 'FOR_BB_INSNS_REVERSE_SAFE'
       (INSN) = (CURR), (CURR) = (INSN) ? PREV_INSN ((INSN)) : NULL)
                                          ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:593:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              mark_nonreg_stores (PATTERN (insn), insn, fast);
                                  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:799:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:799:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:903:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dce.c:903:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
43 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cselib.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cselib.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cselib.c:34:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cselib.c:34:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cselib.c:34:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cselib.c:34:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cselib.c:34:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
cselib.c:741:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_for_cselib_p (XEXP (x, 1), XEXP (y, 0))
                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:742:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_for_cselib_p (XEXP (x, 0), XEXP (y, 1)))
                                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:873:11: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
               + CODE_LABEL_NUMBER (XEXP (x, 0)));
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:1125:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (note, 0) == XEXP (p->loc, 1))
                                   ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:1126:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            return XEXP (p->loc, 1);
                   ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:1337:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     SUBREG_BYTE (orig));
                                     ^~~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:1473:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (copy, 0), XEXP (copy, 1),
                                                              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:1474:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (copy, 2));
                                              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:1492:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                 XEXP (copy, 1));
                                                 ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2021:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx body = PATTERN (insn);
             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2024:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  body = PATTERN (insn);
         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2028:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      body = COND_EXEC_CODE (body);
             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
#define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
                            ^           ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2034:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      sets[0].src = SET_SRC (body);
                    ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2048:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              sets[n_sets].src = SET_SRC (x);
                                 ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2088:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = targetm.addr_space.address_mode (MEM_ADDR_SPACE (dest));
                                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2088:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = targetm.addr_space.address_mode (MEM_ADDR_SPACE (dest));
                                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2155:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_VOLATILE_P (PATTERN (insn))))
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
  (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
                                      ^~~
./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
#define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2202:14: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cselib.c:2202:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
24 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decimal32.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decimal32.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ddg.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ddg.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from ddg.c:37:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from ddg.c:37:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from ddg.c:37:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from ddg.c:37:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from ddg.c:37:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
ddg.c:88:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note_uses (&PATTERN (insn), mark_mem_use_1, NULL);
              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:104:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note_stores (PATTERN (insn), mark_mem_store, NULL);
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:145:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return rtx_mem_access_p (PATTERN (insn));
                           ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:183:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (dest_node->insn);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:183:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (dest_node->insn);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:274:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (BLOCK_FOR_INSN (use_insn) != g->bb)
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:471:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb));
                                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:472:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:502:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb));
                                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:503:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
ddg.c:508:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && NOTE_KIND (insn) !=  NOTE_INSN_BASIC_BLOCK)
                 ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
16 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decimal64.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decimal64.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-byte-scan.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-byte-scan.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
df-byte-scan.c:98:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        offset += SUBREG_BYTE (reg) * BITS_PER_UNIT;
                  ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-byte-scan.c:173:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  offset = SUBREG_BYTE (reg);
           ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-byte-scan.c:255:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int offset = SUBREG_BYTE (reg);
                       ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-byte-scan.c:271:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      int offset = SUBREG_BYTE (reg);
                   ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
4 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dbxout.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dbxout.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
dbxout.c:3037:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          number = DEBUGGER_AUTO_OFFSET (XEXP (XEXP (home, 0), 0));
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dbxout.c:287:35: note: expanded from macro 'DEBUGGER_AUTO_OFFSET'
  (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3051:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      number = DEBUGGER_AUTO_OFFSET (XEXP (home, 0));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dbxout.c:287:35: note: expanded from macro 'DEBUGGER_AUTO_OFFSET'
  (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3060:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      number = DEBUGGER_AUTO_OFFSET (XEXP (home, 0));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dbxout.c:287:35: note: expanded from macro 'DEBUGGER_AUTO_OFFSET'
  (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3110:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        dbxout_symbol_location (decl, subtype, "$imag", XEXP (home, 1));
                                                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3244:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                targetm.strip_name_encoding(XSTR (XEXP (sym_addr, 1), 0));
                                                  ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:703:35: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3246:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              c_decl = SYMBOL_REF_DECL (XEXP (sym_addr, 1));
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3246:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              c_decl = SYMBOL_REF_DECL (XEXP (sym_addr, 1));
                                        ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1379:52: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                                   ^~~
./rtl.h:725:40: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                                        ^~~
./rtl.h:593:39: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3252:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              *value = INTVAL (XEXP (sym_addr, 1));
                               ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3253:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              c_decl = SYMBOL_REF_DECL (XEXP (sym_addr, 0));
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3260:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          c_decl = SYMBOL_REF_DECL (sym_addr);
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3375:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              number = INTVAL (XEXP (inrtl, 1));
                               ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3469:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              number = INTVAL (XEXP (XEXP (XEXP (DECL_RTL (parms), 0), 0), 1));
                               ^                                           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dbxout.c:3494:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              number = INTVAL (XEXP (XEXP (DECL_RTL (parms), 0), 1));
                               ^                                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
13 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cplus-dem.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cplus-dem.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dfp.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dfp.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-core.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-core.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from df-core.c:385:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-core.c:385:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-core.c:385:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-core.c:385:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-core.c:385:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
df-core.c:1682:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-core.c:1682:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-core.c:1708:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-core.c:1708:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-core.c:2109:22: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
           INSN_UID (insn), BLOCK_FOR_INSN (insn)->index,
                            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-core.c:2142:5: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
           DF_REF_BBNO (ref),
           ^~~~~~~~~~~~~~~~~
./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
#define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
                          ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
11 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o diagnostic.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  diagnostic.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o domwalk.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  domwalk.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dojump.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dojump.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
dojump.c:165:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (and_test, 1)
  ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dojump.c:167:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (XEXP (shift_test, 0), 1) = GEN_INT (bitnum);
  ^                           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dojump.c:956:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = XEXP (tem, 1);
            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dojump.c:1088:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (last = NEXT_INSN (last);
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dojump.c:1089:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
               last && NEXT_INSN (last);
                       ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dojump.c:1090:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
               last = NEXT_INSN (last))
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dojump.c:1095:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || NEXT_INSN (last)
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
7 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o double-int.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  double-int.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dominance.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dominance.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dwarf2asm.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dwarf2asm.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
dwarf2asm.c:387:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
dwarf2asm.c:393:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
dwarf2asm.c:530:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
3 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o combine.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  combine.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from combine.c:94:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine.c:94:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine.c:94:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine.c:94:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from combine.c:94:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
combine.c:633:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (insn);
       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:634:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (next = NEXT_INSN (insn);
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:635:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
       next && BLOCK_FOR_INSN (next) == bb;
               ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:636:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       next = NEXT_INSN (next))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:639:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (link = LOG_LINKS (next); link; link = XEXP (link, 1))
                                                   ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:645:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            result = find_single_use_1 (dest, &PATTERN (next));
                                               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:885:41: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb)); insn = next)
                                        ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:887:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          next = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:922:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS_REVERSE (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:922:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS_REVERSE (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:957:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (BLOCK_FOR_INSN (use_insn) == bb)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:967:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      || asm_noperands (PATTERN (use_insn)) < 0)
                                        ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:972:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           links = XEXP (links, 1))
                                   ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1009:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1033:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    first = NEXT_INSN (first);
            ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1086:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (this_basic_block, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1086:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (this_basic_block, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1087:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (INSN_P (insn) && BLOCK_FOR_INSN (insn))
                             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1092:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            note_stores (PATTERN (insn), set_nonzero_bits_and_sign_copies,
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1105:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              INSN_COST (insn) = insn_rtx_cost (PATTERN (insn),
                                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1135:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn != NEXT_INSN (BB_END (this_basic_block));
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1136:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = next ? next : NEXT_INSN (insn))
                                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1143:37: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              check_promoted_subreg (insn, PATTERN (insn));
                                           ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1148:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              note_uses (&PATTERN (insn), record_truncated_values, NULL);
                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1152:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
                                                            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1159:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
                                                            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1170:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       nextlinks = XEXP (nextlinks, 1))
                                   ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1239:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
                                                            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1240:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                for (nextlinks = XEXP (links, 1); nextlinks;
                                 ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1241:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     nextlinks = XEXP (nextlinks, 1))
                                 ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1248:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (links = LOG_LINKS (insn); links; links = XEXP (links, 1))
                                                            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1252:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if ((set = single_set (temp)) != 0
                             ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1252:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if ((set = single_set (temp)) != 0
                             ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1257:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && ! unmentioned_reg_p (note, SET_SRC (set))
                                                    ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1265:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      rtx orig = SET_SRC (set);
                                 ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1266:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      SET_SRC (set) = note;
                      ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1275:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      SET_SRC (set) = orig;
                      ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1461:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && reg_referenced_p (x, PATTERN (insn))
                                  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1462:35: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && !REGNO_REG_SET_P (DF_LR_IN (BLOCK_FOR_INSN (insn)),
                                         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./df.h:633:37: note: expanded from macro 'DF_LR_IN'
#define DF_LR_IN(BB) (DF_LR_BB_INFO(BB)->in)
                                    ^~
./df.h:620:47: note: expanded from macro 'DF_LR_BB_INFO'
#define DF_LR_BB_INFO(BB) (df_lr_get_bb_info((BB)->index))
                                              ^~
./basic-block.h:80:48: note: expanded from macro 'REGNO_REG_SET_P'
#define REGNO_REG_SET_P(TO, REG) bitmap_bit_p (TO, REG)
                                               ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1467:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (link = LOG_LINKS (insn); link; link = XEXP (link, 1))
                                                     ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1493:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx src = SET_SRC (set);
                    ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1519:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          num = num_sign_bit_copies (SET_SRC (set), GET_MODE (x));
                                     ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1573:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    set = PATTERN (insn);
          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1577:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)
                               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1579:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx elt = XVECEXP (PATTERN (insn), 0, i);
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1602:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx i3pat = PATTERN (i3);
                              ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1614:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                   PREV_INSN (insn), i3)
                                                   ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1661:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = SET_SRC (set), dest = SET_DEST (set);
        ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1740:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (i = XVECLEN (PATTERN (i3), 0) - 1; i >= 0; i--)
                      ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1745:29: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx reg = XEXP (XVECEXP (PATTERN (i3), 0, i), 0);
                                   ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1769:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (succ != 0 && volatile_refs_p (PATTERN (succ)))
                                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1772:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1772:47: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
                                              ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1773:50: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (INSN_P (p) && p != succ && volatile_refs_p (PATTERN (p)))
                                                        ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1787:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1787:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))
                                          ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1788:53: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    if (INSN_P (p) && p != succ && volatile_insn_p (PATTERN (p)))
                                                    ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1882:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx src = SET_SRC (set);
                ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1933:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && reg_referenced_p (subdest, PATTERN (i3))
                                        ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1977:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && exact_log2 (INTVAL (XEXP (x, 1))) >= 0);
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:1981:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            || contains_muldiv (XEXP (x, 1));
                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2013:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2013:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2016:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = SET_SRC (set);
        ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2085:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  reg = XEXP (PATTERN (use), 0);
              ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2098:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = PREV_INSN (use); info.mask && p != insn; p = PREV_INSN (p))
           ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2098:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = PREV_INSN (use); info.mask && p != insn; p = PREV_INSN (p))
                                                        ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2100:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      note_stores (PATTERN (p), likely_spilled_retval_1, &info);
                   ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2321:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  next = NEXT_INSN (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2325:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2332:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          loc = simplify_replace_rtx (INSN_VAR_LOCATION_LOC (insn), dest, src);
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2332:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          loc = simplify_replace_rtx (INSN_VAR_LOCATION_LOC (insn), dest, src);
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2334:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (loc == INSN_VAR_LOCATION_LOC (insn))
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2334:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (loc == INSN_VAR_LOCATION_LOC (insn))
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2336:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_VAR_LOCATION_LOC (insn) = loc;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2336:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_VAR_LOCATION_LOC (insn) = loc;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2340:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (insn) = NEXT_INSN (insn) = NULL_RTX;
                                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2340:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              PREV_INSN (insn) = NEXT_INSN (insn) = NULL_RTX;
              ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2357:20: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block bb = BLOCK_FOR_INSN (insn);
                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2479:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REGNO (SET_SRC (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2479:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REGNO (SET_SRC (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER
                         ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2480:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && find_reg_note (i3, REG_DEAD, SET_SRC (PATTERN (i3)))
                                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2480:48: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && find_reg_note (i3, REG_DEAD, SET_SRC (PATTERN (i3)))
                                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2482:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ! side_effects_p (SET_DEST (PATTERN (i3)))
                                     ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2489:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ! reg_overlap_mentioned_p (SET_SRC (PATTERN (i3)),
                                    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2489:46: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ! reg_overlap_mentioned_p (SET_SRC (PATTERN (i3)),
                                             ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2490:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    SET_DEST (PATTERN (i3)))
                                              ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2493:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx p2 = PATTERN (i2);
               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2508:44: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && reg_overlap_mentioned_p (SET_DEST (PATTERN (i3)),
                                                  ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2516:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (XVECEXP (p2, 0, i)) == SET_SRC (PATTERN (i3)))
                                                  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2516:53: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (XVECEXP (p2, 0, i)) == SET_SRC (PATTERN (i3)))
                                                           ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2524:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              i2src = SET_DEST (PATTERN (i3));
                                ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2525:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              i2dest = SET_SRC (PATTERN (i3));
                       ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2525:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              i2dest = SET_SRC (PATTERN (i3));
                                ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2532:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     SET_DEST (PATTERN (i3)));
                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2544:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (temp = single_set (i2)) != 0
                 ^~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2544:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (temp = single_set (i2)) != 0
                 ^~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2550:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && reg_subword_p (SET_DEST (PATTERN (i3)), SET_DEST (temp)))
                                  ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2552:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx dest = SET_DEST (PATTERN (i3));
                           ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2561:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              width = INTVAL (XEXP (dest, 1));
                              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2562:25: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              offset = INTVAL (XEXP (dest, 2));
                               ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2596:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx inner = SET_SRC (PATTERN (i3));
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2596:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx inner = SET_SRC (PATTERN (i3));
                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2597:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx outer = SET_SRC (temp);
                      ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2607:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              ohi = CONST_DOUBLE_HIGH (outer);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
combine.c:2618:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              ihi = CONST_DOUBLE_HIGH (inner);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
combine.c:2674:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          newpat = PATTERN (i2);
                   ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2697:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XVECLEN (PATTERN (i2), 0) >= 2
                  ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2702:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx
         ^                                             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2702:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2702:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx
                                 ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 6 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2705:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_p (XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 0),
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2705:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_p (XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 0),
                                              ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 6 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2706:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      SET_SRC (XVECEXP (PATTERN (i2), 0, 1))))
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2706:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      SET_SRC (XVECEXP (PATTERN (i2), 0, 1))))
                                        ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2708:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (i = XVECLEN (PATTERN (i2), 0) - 1; i >= 2; i--)
                        ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2720:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             BLOCK_FOR_INSN (i2), INSN_LOCATOR (i2),
                             ^~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:252:64: note: expanded from macro 'gen_rtx_INSN'
  gen_rtx_fmt_iuuBieie (INSN, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
                                                               ^~~~
./genrtl.h:38:54: note: expanded from macro 'gen_rtx_fmt_iuuBieie'
        gen_rtx_fmt_iuuBieie_stat (c, m, p0, p1, p2, p3, p4, p5, p6, p7 MEM_STAT_INFO)
                                                     ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2720:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             BLOCK_FOR_INSN (i2), INSN_LOCATOR (i2),
                                                  ^~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:252:72: note: expanded from macro 'gen_rtx_INSN'
  gen_rtx_fmt_iuuBieie (INSN, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
                                                                       ^~~~
./genrtl.h:38:58: note: expanded from macro 'gen_rtx_fmt_iuuBieie'
        gen_rtx_fmt_iuuBieie_stat (c, m, p0, p1, p2, p3, p4, p5, p6, p7 MEM_STAT_INFO)
                                                         ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2721:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             XVECEXP (PATTERN (i2), 0, 1), -1, NULL_RTX);
                                      ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./genrtl.h:252:80: note: expanded from macro 'gen_rtx_INSN'
  gen_rtx_fmt_iuuBieie (INSN, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
                                                                               ^~~~
./genrtl.h:38:62: note: expanded from macro 'gen_rtx_fmt_iuuBieie'
        gen_rtx_fmt_iuuBieie_stat (c, m, p0, p1, p2, p3, p4, p5, p6, p7 MEM_STAT_INFO)
                                                             ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2723:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));
                 ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:40: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                           ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2723:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));
                                        ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2724:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),
                                ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
combine.c:708:40: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                           ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2725:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 SET_DEST (PATTERN (i1)));
                           ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2751:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (! combinable_i3pat (i3, &PATTERN (i3), i2dest, i1dest,
                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2824:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        i2pat = copy_rtx (PATTERN (i2));
                          ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2832:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        i1pat = copy_rtx (PATTERN (i1));
                          ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2857:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx
         ^                             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2857:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx
               ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2857:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx
                        ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2858:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_p (XEXP (SET_SRC (PATTERN (i3)), 0), i2dest))
                            ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2858:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_p (XEXP (SET_SRC (PATTERN (i3)), 0), i2dest))
                                     ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2865:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      newpat = PATTERN (i3);
               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:2952:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      newpat = subst (PATTERN (i3), i2dest, i2src, 0,
                      ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3103:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && !side_effects_p (SET_SRC (set1)))
                              ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3115:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && !side_effects_p (SET_SRC (set0)))
                                   ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3210:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (m_split && NEXT_INSN (m_split) == NULL_RTX)
                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3212:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          m_split = PATTERN (m_split);
                    ^~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3217:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (m_split && NEXT_INSN (NEXT_INSN (m_split)) == NULL_RTX
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3217:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (m_split && NEXT_INSN (NEXT_INSN (m_split)) == NULL_RTX
                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3219:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   || ! use_crosses_set_p (PATTERN (m_split), DF_INSN_LUID (i2))))
                                           ^~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3222:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx newi3pat = PATTERN (NEXT_INSN (m_split));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3222:28: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx newi3pat = PATTERN (NEXT_INSN (m_split));
                                  ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:771:29: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3223:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          newi2pat = PATTERN (m_split);
                     ^~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3225:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i3set = single_set (NEXT_INSN (m_split));
                              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1801:36: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                                        ^
./rtl.h:1803:39: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3225:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i3set = single_set (NEXT_INSN (m_split));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3225:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i3set = single_set (NEXT_INSN (m_split));
                              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:771:29: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3225:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i3set = single_set (NEXT_INSN (m_split));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3225:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i3set = single_set (NEXT_INSN (m_split));
                              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:771:29: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3226:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i2set = single_set (m_split);
                  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3226:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          i2set = single_set (m_split);
                  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3314:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (*split, 1)) > 0
                         ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3315:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (i = exact_log2 (INTVAL (XEXP (*split, 1)))) >= 0)
                                          ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3346:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && ! side_effects_p (SET_SRC (newpat)))
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3348:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx setsrc = SET_SRC (newpat);
                           ^~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3352:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src_op1 = XEXP (setsrc, 1);
                            ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3371:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx q = XEXP (XEXP (src_op0, 0), 1);
                          ^                        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3372:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx r = XEXP (src_op0, 1);
                          ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3452:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && rtx_equal_p (SET_SRC (XVECEXP (newpat, 0, 1)),
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3453:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           XEXP (SET_SRC (XVECEXP (newpat, 0, 0)), 0))
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3454:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ! use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3478:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         SET_SRC (XVECEXP (newpat, 0, 1)))
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3512:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ! use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3518:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ! (contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 0)))
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3519:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 && contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 1))))
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3565:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      other_pat = PATTERN (undobuf.other_insn);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3665:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PATTERN (i3) = newpat;
      ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3676:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PATTERN (undobuf.other_insn) = other_pat;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3681:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (note = REG_NOTES (undobuf.other_insn); note; note = next)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3683:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          next = XEXP (note, 1);
                 ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3686:40: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && ! reg_set_p (XEXP (note, 0), PATTERN (undobuf.other_insn)))
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3702:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PATTERN (i3) = newpat;
      ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3720:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = NEXT_INSN (i3);
                  ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3723:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = NEXT_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3725:52: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (INSN_P (insn) && reg_referenced_p (ni2dest, PATTERN (insn)))
                                                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3728:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   link = XEXP (link, 1))
                          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3756:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
    i3notes = REG_NOTES (i3), i3links = LOG_LINKS (i3);
              ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3757:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
    i2notes = REG_NOTES (i2), i2links = LOG_LINKS (i2);
              ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3759:17: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
      i1notes = REG_NOTES (i1), i1links = LOG_LINKS (i1);
                ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3771:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      reset_used_flags (PATTERN (undobuf.other_insn));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3779:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      reset_used_flags (PATTERN (undobuf.other_insn));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3781:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (i3) = insn_code_number;
    ^~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3782:5: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PATTERN (i3) = newpat;
    ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3784:24: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
    if (CALL_P (i3) && CALL_INSN_FUNCTION_USAGE (i3))
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3786:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        rtx call_usage = CALL_INSN_FUNCTION_USAGE (i3);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3797:2: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        CALL_INSN_FUNCTION_USAGE (i3) = call_usage;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3801:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      INSN_CODE (undobuf.other_insn) = other_code_number;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3814:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (i = 0; i < XVECLEN (PATTERN (i2), 0); i++)
                                 ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3818:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (XVECEXP (PATTERN (i2), 0, i)) != i2dest
                                    ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3820:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  SET_DEST (XVECEXP (PATTERN (i2), 0, i))))
                                                     ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3821:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            for (temp = NEXT_INSN (i2);
                        ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3824:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 temp = NEXT_INSN (temp))
                        ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3826:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                for (link = LOG_LINKS (temp); link; link = XEXP (link, 1))
                                                           ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3833:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            while (XEXP (link, 1))
                   ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3834:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              link = XEXP (link, 1);
                     ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3835:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            XEXP (link, 1) = i2notes;
            ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3843:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
    REG_NOTES (i3) = 0;
    ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3845:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
    REG_NOTES (i2) = 0;
    ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3851:2: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_CODE (i2) = i2_code_number;
        ^~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3852:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PATTERN (i2) = newi2pat;
        ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3864:2: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_NOTES (i1) = 0;
        ^~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3967:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (link = LOG_LINKS (i3); link; link = XEXP (link, 1))
                                                 ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3968:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if ((set = single_set (XEXP (link, 0))) != 0
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3968:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if ((set = single_set (XEXP (link, 0))) != 0
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3970:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            i2_insn = XEXP (link, 0), i2_val = SET_SRC (set);
                                               ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3990:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for (link = LOG_LINKS (i3); link; link = XEXP (link, 1))
                                                 ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3991:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if ((set = single_set (XEXP (link, 0))) != 0
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3991:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if ((set = single_set (XEXP (link, 0))) != 0
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:3993:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            i1_insn = XEXP (link, 0), i1_val = SET_SRC (set);
                                               ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4021:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (i1 && !(NOTE_P(i1) && (NOTE_KIND (i1) == NOTE_INSN_DELETED)))
                             ^~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4031:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (i2 && !(NOTE_P(i2) && (NOTE_KIND (i2) == NOTE_INSN_DELETED)))
                             ^~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4041:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (i3 && !(NOTE_P(i3) && (NOTE_KIND (i3) == NOTE_INSN_DELETED)))
                             ^~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4057:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      mark_jump_label (PATTERN (i3), i3, 0);
                       ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4072:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && SET_SRC (newpat) == pc_rtx
         ^~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4195:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            MEM_ADDR_SPACE (x)))
                                            ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4195:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            MEM_ADDR_SPACE (x)))
                                            ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4208:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && NEXT_INSN (seq) != NULL_RTX
                 ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4209:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && NEXT_INSN (NEXT_INSN (seq)) == NULL_RTX
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4209:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && NEXT_INSN (NEXT_INSN (seq)) == NULL_RTX
                            ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4212:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (PATTERN (seq)) == reg
                           ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4214:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    SET_SRC (PATTERN (seq)))
                                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4214:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    SET_SRC (PATTERN (seq)))
                                             ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4217:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (PATTERN (NEXT_INSN (seq))) == reg
                           ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4217:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (PATTERN (NEXT_INSN (seq))) == reg
                                    ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4220:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    MEM_ADDR_SPACE (x)))
                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4219:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   (GET_MODE (x), SET_SRC (PATTERN (NEXT_INSN (seq))),
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4219:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   (GET_MODE (x), SET_SRC (PATTERN (NEXT_INSN (seq))),
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4219:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   (GET_MODE (x), SET_SRC (PATTERN (NEXT_INSN (seq))),
                                                    ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4220:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    MEM_ADDR_SPACE (x)))
                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4222:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src1 = SET_SRC (PATTERN (seq));
                         ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4222:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src1 = SET_SRC (PATTERN (seq));
                                  ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4223:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src2 = SET_SRC (PATTERN (NEXT_INSN (seq)));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4223:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src2 = SET_SRC (PATTERN (NEXT_INSN (seq)));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4223:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src2 = SET_SRC (PATTERN (NEXT_INSN (seq)));
                                           ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4260:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            MEM_ADDR_SPACE (x))
                                            ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4260:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            MEM_ADDR_SPACE (x))
                                            ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4301:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((INTVAL (XEXP (SET_DEST (x), 1))
                       ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4302:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
               + INTVAL (XEXP (SET_DEST (x), 2)))
                         ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4306:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          HOST_WIDE_INT pos = INTVAL (XEXP (SET_DEST (x), 2));
                                      ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4307:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          unsigned HOST_WIDE_INT len = INTVAL (XEXP (SET_DEST (x), 1));
                                               ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4308:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          unsigned HOST_WIDE_INT src = INTVAL (SET_SRC (x));
                                               ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4356:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (pos = exact_log2 (INTVAL (XEXP (SET_SRC (x), 1)))) >= 7
                                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4356:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (pos = exact_log2 (INTVAL (XEXP (SET_SRC (x), 1)))) >= 7
                                                  ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4361:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (*split, 1) == const0_rtx)
                 ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4364:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                XEXP (SET_SRC (x), 0),
                                                      ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4398:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          inner = XEXP (SET_SRC (x), 0);
                        ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4417:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              inner = XEXP (SET_SRC (x), 0);
                            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4418:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              len = INTVAL (XEXP (SET_SRC (x), 1));
                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4418:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              len = INTVAL (XEXP (SET_SRC (x), 1));
                                  ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4419:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              pos = INTVAL (XEXP (SET_SRC (x), 2));
                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4419:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              pos = INTVAL (XEXP (SET_SRC (x), 2));
                                  ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4487:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! register_operand (XEXP (SET_SRC (x), 0), VOIDmode))
                                       ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4504:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (XEXP (x, 1), 0))));
                                                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./genrtl.h:358:32: note: expanded from macro 'gen_rtx_NOT'
  gen_rtx_fmt_e (NOT, (MODE), (ARG0))
                               ^~~~
./genrtl.h:30:35: note: expanded from macro 'gen_rtx_fmt_e'
        gen_rtx_fmt_e_stat (c, m, p0 MEM_STAT_INFO)
                                  ^~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4514:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          SUBST (XEXP (x, 0), XEXP (x, 1));
                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4528:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      split = find_split_point (&XEXP (x, 2), insn);
                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4798:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       SUBREG_BYTE (x));
                                       ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4869:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))
                                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4872:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SUBST (XEXP (x, 0), XEXP (x, 1));
                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:4996:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (x, 0), XEXP (x, 1));
                                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5001:66: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      temp = simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));
                                                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5006:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         XEXP (x, 1), XEXP (x, 2));
                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5006:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         XEXP (x, 1), XEXP (x, 2));
                                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5041:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx inner_op0 = XEXP (XEXP (x, 0), 1);
                          ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5042:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx inner_op1 = XEXP (x, 1);
                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5062:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              other = XEXP (XEXP (x, 0), 1);
                      ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5065:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                 XEXP (x, 1));
                                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5089:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && subreg_lowpart_offset (mode, op0_mode) == SUBREG_BYTE (x)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5102:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                SUBREG_BYTE (x));
                                ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5129:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (temp, 1)) == GET_MODE_BITSIZE (mode) - 1)
                     ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5131:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (XEXP (temp, 1)));
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5215:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) == -INTVAL (XEXP (XEXP (x, 0), 1))
                                              ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5215:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) == -INTVAL (XEXP (XEXP (x, 0), 1))
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5216:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((i = exact_log2 (INTVAL (XEXP (XEXP (x, 0), 1)))) >= 0
                                       ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5217:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || (i = exact_log2 (INTVAL (XEXP (x, 1)))) >= 0)
                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5221:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && (INTVAL (XEXP (XEXP (XEXP (x, 0), 0), 1))
                           ^                            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5237:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (XEXP (x, 1) == constm1_rtx
          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5255:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              & nonzero_bits (XEXP (x, 1), mode)) == 0)
                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5258:59: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx tor = simplify_gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));
                                                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5274:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && exact_log2 (-INTVAL (XEXP (XEXP (x, 1), 1))) >= 0
                                  ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5274:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && exact_log2 (-INTVAL (XEXP (XEXP (x, 1), 1))) >= 0
                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5275:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && rtx_equal_p (XEXP (XEXP (x, 1), 0), XEXP (x, 0)))
                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5277:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       -INTVAL (XEXP (XEXP (x, 1), 1)) - 1);
                                                ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5277:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       -INTVAL (XEXP (XEXP (x, 1), 1)) - 1);
                                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5298:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                               XEXP (x, 1));
                                               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5300:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            return simplify_gen_binary (DIV, mode, tem, XEXP (XEXP (x, 0), 1));
                                                        ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5308:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (i = exact_log2 (INTVAL (XEXP (x, 1)))) >= 0
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5331:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx op1 = XEXP (x, 1);
                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5335:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op1 = XEXP (op0, 1), op0 = XEXP (op0, 0);
                  ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5458:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (GET_CODE (x) == AND && XEXP (x, 1) == const_true_rtx)
                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5503:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (XEXP (x, 1)));
                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5528:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx true_rtx = XEXP (x, 1);
                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5529:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx false_rtx = XEXP (x, 2);
                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5540:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    XEXP (cond, 0), XEXP (cond, 1));
                                                    ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5559:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx true_val = XEXP (cond, 1);
                     ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5603:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SUBST (XEXP (x, 2), swapped ? true_rtx : false_rtx);
             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:40: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                           ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5605:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      true_rtx = XEXP (x, 1);
                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5606:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      false_rtx = XEXP (x, 2);
                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5631:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SUBST (XEXP (x, 2), true_rtx);
             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:40: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                           ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5650:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_p (XEXP (cond, 1), true_rtx))
                      ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5655:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && rtx_equal_p (XEXP (cond, 1), false_rtx))
                           ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5662:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (cond, 1) == const0_rtx
         ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5687:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_p (XEXP (cond, 1), false_rtx)
                      ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5722:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx cond_op1 = XEXP (cond, 1);
                     ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5732:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        c1 = XEXP (t, 1), op = GET_CODE (t), z = f;
             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5738:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && rtx_equal_p (XEXP (t, 1), f))
                               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5756:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          c1 = XEXP (XEXP (t, 0), 1); z = f; op = GET_CODE (XEXP (t, 0));
               ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5765:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && subreg_lowpart_p (XEXP (XEXP (t, 0), 1))
                                    ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5766:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && rtx_equal_p (SUBREG_REG (XEXP (XEXP (t, 0), 1)), f)
                                           ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1111:32: note: expanded from macro 'SUBREG_REG'
#define SUBREG_REG(RTX) XCEXP (RTX, 0, SUBREG)
                               ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5792:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          c1 = XEXP (XEXP (t, 0), 1); z = f; op = GET_CODE (XEXP (t, 0));
               ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5802:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && subreg_lowpart_p (XEXP (XEXP (t, 0), 1))
                                    ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5803:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && rtx_equal_p (SUBREG_REG (XEXP (XEXP (t, 0), 1)), f)
                                           ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1111:32: note: expanded from macro 'SUBREG_REG'
#define SUBREG_REG(RTX) XCEXP (RTX, 0, SUBREG)
                               ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5836:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (true_code == NE && XEXP (cond, 1) == const0_rtx
                         ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5848:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (true_code == NE && XEXP (cond, 1) == const0_rtx
                         ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5864:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx src = SET_SRC (x);
            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5904:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op0 = XEXP (src, 0), op1 = XEXP (src, 1);
                                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5916:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          op1 = XEXP (tmp, 1);
                ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5920:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx pat = PATTERN (other_insn);
                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:5927:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx new_rtx = simplify_rtx (SET_SRC (pat));
                                          ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6004:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx pat = PATTERN (other_insn), note = 0;
                        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6026:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          src = SET_SRC (x);
                ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6031:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          src = SET_SRC (x);
                ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6034:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (XEXP (src, 0) != op0 || XEXP (src, 1) != op1)
                                       ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6037:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          src = SET_SRC (x);
                ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6085:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (x), dest = SET_DEST (x);
            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6143:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (XEXP (src, 0), 1) == const0_rtx
         ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6154:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      ? XEXP (src, 1) : XEXP (src, 2));
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6154:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      ? XEXP (src, 1) : XEXP (src, 2));
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6156:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   ? XEXP (src, 2) : XEXP (src, 1));
                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6156:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   ? XEXP (src, 2) : XEXP (src, 1));
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6161:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        term1 = false_rtx, true_rtx = XEXP (true_rtx, 1), false_rtx = const0_rtx;
                                      ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6163:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && rtx_equal_p (XEXP (true_rtx, 1), false_rtx))
                               ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6167:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        term1 = true_rtx, false_rtx = XEXP (false_rtx, 1), true_rtx = const0_rtx;
                                      ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6169:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && rtx_equal_p (XEXP (false_rtx, 1), true_rtx))
                               ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6186:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (x);
            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6208:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx op1 = XEXP (x, 1);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6225:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          op1 = XEXP (x, 1);
                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6356:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      len = INTVAL (XEXP (x, 1));
                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6357:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      pos = INTVAL (XEXP (x, 2));
                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6520:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          len = INTVAL (XEXP (SET_DEST (x), 1));
                        ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6521:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          pos = XEXP (SET_DEST (x), 2);
                ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6561:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            SET_SRC (x)));
                            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:280:41: note: expanded from macro 'gen_rtx_SET'
  gen_rtx_fmt_ee (SET, (MODE), (ARG0), (ARG1))
                                        ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6608:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                      gen_lowpart (compute_mode, SET_SRC (x)),
                                                                 ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6680:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             0, 0, len - INTVAL (XEXP (inner, 1)),
                                                 ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:6683:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        return gen_rtx_ASHIFT (mode, new_rtx, XEXP (inner, 1));
                                              ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:360:44: note: expanded from macro 'gen_rtx_ASHIFT'
  gen_rtx_fmt_ee (ASHIFT, (MODE), (ARG0), (ARG1))
                                           ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7064:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) >= count)
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7066:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     INTVAL (XEXP (x, 1)) - count);
                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7079:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (INTVAL (XEXP (x, 1)) & ((((HOST_WIDE_INT) 1 << count)) - 1)) == 0
                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7082:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    GEN_INT (INTVAL (XEXP (x, 1)) >> count));
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7130:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && XEXP (x, 1) == const0_rtx) ? COMPARE
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7142:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7143:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) >= 0)
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7148:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       << INTVAL (XEXP (x, 1))));
                                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./genrtl.h:334:42: note: expanded from macro 'gen_rtx_MULT'
  gen_rtx_fmt_ee (MULT, (MODE), (ARG0), (ARG1))
                                         ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7161:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7164:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          new_rtx = make_extraction (mode, new_rtx, 0, XEXP (XEXP (x, 0), 1), i, 1,
                                                       ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7172:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7177:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 XEXP (SUBREG_REG (XEXP (x, 0)), 1), i, 1,
                                 ^                               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7185:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7190:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                             XEXP (x, 1)),
                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:352:41: note: expanded from macro 'gen_rtx_AND'
  gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
                                        ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7191:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                gen_rtx_AND (mode, XEXP (XEXP (x, 0), 1),
                                                   ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:352:33: note: expanded from macro 'gen_rtx_AND'
  gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
                                ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7192:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                             XEXP (x, 1)));
                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:352:41: note: expanded from macro 'gen_rtx_AND'
  gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
                                        ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7201:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7202:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && i <= INTVAL (XEXP (XEXP (x, 0), 1)))
                               ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7207:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  - INTVAL (XEXP (XEXP (x, 0), 1))),
                                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7218:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && INTVAL (XEXP (XEXP (x, 0), 1)) >= 0
                          ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7219:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && INTVAL (XEXP (XEXP (x, 0), 1)) < HOST_BITS_PER_WIDE_INT
                          ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7224:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          mask >>= INTVAL (XEXP (XEXP (x, 0), 1));
                           ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7225:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if ((INTVAL (XEXP (x, 1)) & ~mask) == 0)
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7230:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     XEXP (XEXP (x, 0), 1)));
                                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:364:46: note: expanded from macro 'gen_rtx_ASHIFTRT'
  gen_rtx_fmt_ee (ASHIFTRT, (MODE), (ARG0), (ARG1))
                                             ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7237:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if ((i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)
                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7246:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && (i = exact_log2 (INTVAL (XEXP (x, 1)))) >= 0)
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7265:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  XEXP (x, 1));
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:364:46: note: expanded from macro 'gen_rtx_ASHIFTRT'
  gen_rtx_fmt_ee (ASHIFTRT, (MODE), (ARG0), (ARG1))
                                             ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7273:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rhs = XEXP (x, 1);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7280:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (rhs) >= INTVAL (XEXP (lhs, 1))
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7285:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 INTVAL (rhs) - INTVAL (XEXP (lhs, 1)),
                                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7318:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          SUBREG_BYTE (x));
                                          ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7377:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))
                                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7380:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SUBST (XEXP (x, 0), XEXP (x, 1));
                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7436:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = canon_reg_for_combine (XEXP (x, 1), reg);
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7437:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7444:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = canon_reg_for_combine (XEXP (x, 1), reg);
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7445:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7453:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = canon_reg_for_combine (XEXP (x, 1), reg);
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7454:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op2 = canon_reg_for_combine (XEXP (x, 2), reg);
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7455:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1) || op2 != XEXP (x, 2))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7455:62: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1) || op2 != XEXP (x, 2))
                                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7587:42: warning: shift count >= width of type [-Wshift-count-overflow]
  if (mask & ((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT - 1)))
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
combine.c:7662:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                      mask & INTVAL (XEXP (x, 1)));
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7669:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && ((INTVAL (XEXP (x, 1)) & GET_MODE_MASK (GET_MODE (x)))
                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7682:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              HOST_WIDE_INT cval = (INTVAL (XEXP (x, 1))
                                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7725:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && (INTVAL (XEXP (x, 1)) & ~smask) != 0)
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7727:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                               (INTVAL (XEXP (x, 1)) & smask)),
                                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7748:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = simplify_gen_unary (NEG, GET_MODE (x), XEXP (x, 1),
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7760:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  XEXP (x, 1), GET_MODE (x));
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7776:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (XEXP (x, 0), 1)) >= 0
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7777:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (XEXP (x, 0), 1)) < HOST_BITS_PER_WIDE_INT
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7780:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               + floor_log2 (INTVAL (XEXP (x, 1))))
                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7779:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((INTVAL (XEXP (XEXP (x, 0), 1))
                       ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7782:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (INTVAL (XEXP (x, 1))
                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7785:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          temp = GEN_INT ((INTVAL (XEXP (x, 1)) & mask)
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7786:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          << INTVAL (XEXP (XEXP (x, 0), 1)));
                                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7790:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   XEXP (XEXP (x, 0), 1));
                                   ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7799:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = force_to_mode (XEXP (x, 1), mode, mask, next_select);
                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7813:67: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op_mode != GET_MODE (x) || op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
                                                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7825:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
             && INTVAL (XEXP (x, 1)) >= 0
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7826:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
             && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (mode))
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7828:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && (nonzero_bits (XEXP (x, 1), GET_MODE (XEXP (x, 1)))
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7836:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) >= 0
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7837:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (op_mode)
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7839:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        mask >>= INTVAL (XEXP (x, 1));
                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7848:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        x = simplify_gen_binary (code, op_mode, op0, XEXP (x, 1));
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7857:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7864:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          inner_mask = mask << INTVAL (XEXP (x, 1));
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7875:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            x = simplify_gen_binary (LSHIFTRT, op_mode, inner, XEXP (x, 1));
                                                               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7886:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((INTVAL (XEXP (x, 1))
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7892:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((INTVAL (XEXP (x, 1)) + exact_log2 (mask + 1))
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7918:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) >= 0
                                               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7919:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT)
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7936:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (GET_MODE_BITSIZE (GET_MODE (x)) - INTVAL (XEXP (x, 1))
                                                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7938:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                nonzero >>= INTVAL (XEXP (x, 1))
                                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7945:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              nonzero >>= INTVAL (XEXP (x, 1));
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7951:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        XEXP (x, 0), INTVAL (XEXP (x, 1)));
                                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7971:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 XEXP (x, 0), XEXP (x, 1));
                                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7981:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) >= 0
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7982:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (INTVAL (XEXP (x, 1))
                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7985:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (XEXP (x, 0), 1) == XEXP (x, 1))
             ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7985:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (XEXP (x, 0), 1) == XEXP (x, 1))
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:7998:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (x, 1)) >= 0)
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8002:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            XEXP (x, 1));
                                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8029:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (XEXP (x, 0), 1)) >= 0
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8030:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (INTVAL (XEXP (XEXP (x, 0), 1)) + floor_log2 (mask)
                      ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8032:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (XEXP (x, 0), 1)) < HOST_BITS_PER_WIDE_INT)
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8034:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          temp = gen_int_mode (mask << INTVAL (XEXP (XEXP (x, 0), 1)),
                                               ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8039:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   temp, XEXP (XEXP (x, 0), 1));
                                         ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8060:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((mask & ~STORE_FLAG_VALUE) == 0 && XEXP (x, 1) == const0_rtx
                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8075:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                      force_to_mode (XEXP (x, 1), mode,
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8079:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                      force_to_mode (XEXP (x, 2), mode,
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:48: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                                   ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8077:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SUBST (XEXP (x, 2),
             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
combine.c:708:40: note: expanded from macro 'SUBST'
#define SUBST(INTO, NEWVAL)     do_SUBST(&(INTO), (NEWVAL))
                                           ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8108:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XEXP (x, 1) == const0_rtx)
         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8137:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      cond1 = if_then_else_cond (XEXP (x, 1), &true1, &false1);
                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8175:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx op0 = XEXP (XEXP (x, 0), 1);
                    ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8176:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx op1 = XEXP (XEXP (x, 1), 1);
                    ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8176:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx op1 = XEXP (XEXP (x, 1), 1);
                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8179:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          cond1 = XEXP (XEXP (x, 1), 0);
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8185:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
                                   ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8185:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
                                                    ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8188:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 1))
                                                       ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8189:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 0))))
                                      ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8210:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          cond1 = XEXP (XEXP (x, 1), 0);
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8216:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
                                   ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8216:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))
                                                    ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8219:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 1))
                                                       ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8220:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 0))))
                                      ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8234:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      *ptrue = XEXP (x, 1), *pfalse = XEXP (x, 2);
               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8234:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      *ptrue = XEXP (x, 1), *pfalse = XEXP (x, 2);
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8235:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (GET_CODE (cond0) == NE && XEXP (cond0, 1) == const0_rtx)
                                    ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8237:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (GET_CODE (cond0) == EQ && XEXP (cond0, 1) == const0_rtx)
                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8239:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          *ptrue = XEXP (x, 2), *pfalse = XEXP (x, 1);
                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8239:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          *ptrue = XEXP (x, 2), *pfalse = XEXP (x, 1);
                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8253:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));
                                                              ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8255:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));
                                                               ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8356:58: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (rtx_equal_p (XEXP (x, 0), reg) && rtx_equal_p (XEXP (x, 1), val))
                                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8386:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  return unsignedp ? x : XEXP (x, 1);
                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8390:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  return unsignedp ? XEXP (x, 1) : x;
                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8409:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 inner_mode, SUBREG_BYTE (x));
                                             ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8502:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx src = SET_SRC (x);
            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8519:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_for_field_assignment_p (dest, XEXP (src, 1)))
                                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8521:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),
                                                   ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8535:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_for_field_assignment_p (dest, XEXP (src, 1)))
                                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8538:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                XEXP (SUBREG_REG (XEXP (src, 0)), 1),
                                ^                                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8549:50: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && rtx_equal_for_field_assignment_p (dest, XEXP (src, 1)))
                                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8551:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),
                                                   ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8566:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      HOST_WIDE_INT width = INTVAL (XEXP (dest, 1));
                                    ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8567:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      unsigned HOST_WIDE_INT and_mask = INTVAL (XEXP (src, 1));
                                                ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8601:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  lhs = expand_compound_operation (XEXP (src, 1));
                                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8606:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    c1 = INTVAL (XEXP (rhs, 1)), other = lhs;
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8610:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    c1 = INTVAL (XEXP (lhs, 1)), other = rhs;
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8646:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && INTVAL (XEXP (assign, 1)) < HOST_BITS_PER_WIDE_INT
                 ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8650:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          == ((unsigned HOST_WIDE_INT) 1 << INTVAL (XEXP (assign, 1))) - 1))
                                                    ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8679:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rhs = XEXP (x, 1);
        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8727:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || SUBREG_BYTE (lhs) != SUBREG_BYTE (rhs)
             ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8727:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || SUBREG_BYTE (lhs) != SUBREG_BYTE (rhs)
                                  ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8756:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    other = XEXP (lhs, 0), lhs = XEXP (lhs, 1), rhs = XEXP (rhs, 1);
                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8756:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    other = XEXP (lhs, 0), lhs = XEXP (lhs, 1), rhs = XEXP (rhs, 1);
                                                      ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8758:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && rtx_equal_p (XEXP (lhs, 0), XEXP (rhs, 1)))
                                          ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8759:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    other = XEXP (lhs, 0), lhs = XEXP (lhs, 1), rhs = XEXP (rhs, 0);
                                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8761:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && rtx_equal_p (XEXP (lhs, 1), XEXP (rhs, 0)))
                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8762:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    other = XEXP (lhs, 1), lhs = XEXP (lhs, 0), rhs = XEXP (rhs, 1);
            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8762:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    other = XEXP (lhs, 1), lhs = XEXP (lhs, 0), rhs = XEXP (rhs, 1);
                                                      ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8763:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (rtx_equal_p (XEXP (lhs, 1), XEXP (rhs, 1)))
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8763:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (rtx_equal_p (XEXP (lhs, 1), XEXP (rhs, 1)))
                                       ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8764:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    other = XEXP (lhs, 1), lhs = XEXP (lhs, 0), rhs = XEXP (rhs, 0);
            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8828:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  inner_op1 = XEXP (decomposed, 1);
              ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8937:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                       XEXP (varop, 1),
                                                       ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:8950:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      o1 = simplify_and_const_int (NULL_RTX, mode, XEXP (varop, 1), constop);
                                                   ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9522:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && exact_log2 (INTVAL (XEXP (varop, 1))) >= 0)
                                     ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9528:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                INTVAL (XEXP (varop, 1)))));
                                                        ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9536:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && exact_log2 (INTVAL (XEXP (varop, 1))) >= 0)
                                     ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9542:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                INTVAL (XEXP (varop, 1)))));
                                                        ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9570:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (varop, 1)) >= 0
                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9571:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (varop, 1)) < GET_MODE_BITSIZE (GET_MODE (varop))
                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9577:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              unsigned int first_count = INTVAL (XEXP (varop, 1));
                                                 ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9717:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              varop = gen_rtx_fmt_ee (code, mode, new_rtx, XEXP (varop, 1));
                                                           ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9743:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (XEXP (varop, 0), 1) == constm1_rtx
                 ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9747:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_p (XEXP (XEXP (varop, 0), 0), XEXP (varop, 1)))
                                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9750:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              varop = gen_rtx_LE (GET_MODE (varop), XEXP (varop, 1),
                                                    ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:398:32: note: expanded from macro 'gen_rtx_LE'
  gen_rtx_fmt_ee (LE, (MODE), (ARG0), (ARG1))
                               ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9769:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),
                                                      ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9772:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                         XEXP (varop, 1),
                                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9788:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),
                                                     ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9794:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (varop, 1), count);
                                              ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9811:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (varop, 1) == const0_rtx
                 ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9857:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (varop, 1) == constm1_rtx
                 ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9876:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && nonzero_bits (XEXP (varop, 1), result_mode) >> count == 0
                               ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9877:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (nonzero_bits (XEXP (varop, 1), result_mode)
                                ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9889:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            & nonzero_bits (XEXP (varop, 1),
                                            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9892:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              varop = XEXP (varop, 1);
                      ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9900:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                         XEXP (varop, 1),
                                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9917:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && mode_signbit_p (result_mode, XEXP (varop, 1))
                                              ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9919:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                         XEXP (varop, 1),
                                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9944:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (XEXP (varop, 0), 1)) == count
                         ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9945:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_p (XEXP (XEXP (varop, 0), 0), XEXP (varop, 1)))
                                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9948:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              varop = gen_rtx_GT (GET_MODE (varop), XEXP (varop, 1),
                                                    ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:396:32: note: expanded from macro 'gen_rtx_GT'
  gen_rtx_fmt_ee (GT, (MODE), (ARG0), (ARG1))
                               ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9964:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (INTVAL (XEXP (XEXP (varop, 0), 1))
                          ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:9974:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                    (count + INTVAL (XEXP (varop_inner, 1))));
                                                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./genrtl.h:366:46: note: expanded from macro 'gen_rtx_LSHIFTRT'
  gen_rtx_fmt_ee (LSHIFTRT, (MODE), (ARG0), (ARG1))
                                             ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10117:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  old_pat = PATTERN (insn);
            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10118:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  old_notes = REG_NOTES (insn);
              ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10119:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = pat;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10120:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = 0;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10155:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PATTERN (insn) = pat;
      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10166:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = old_pat;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10167:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = old_notes;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10302:62: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return gen_rtx_fmt_ee (GET_CODE (x), omode, XEXP (x, 0), XEXP (x, 1));
                                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10364:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (op1, 1)
             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10364:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (op1, 1)
                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10365:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10365:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
                              ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10366:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (XEXP (op1, 0), 1)
             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10366:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (XEXP (op1, 0), 1)
                              ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10367:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (INTVAL (XEXP (op0, 1))
                      ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10390:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (op0, 1)) >= 0
                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10391:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT
                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10392:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (op1, 1))
             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10392:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (op0, 1) == XEXP (op1, 1))
                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10396:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int shift_count = INTVAL (XEXP (op0, 1));
                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10429:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          HOST_WIDE_INT c0 = INTVAL (XEXP (op0, 1));
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10430:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          HOST_WIDE_INT c1 = INTVAL (XEXP (op1, 1));
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10723:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == const1_rtx
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10740:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              op0 = XEXP (op0, 2);
                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10823:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                   op1, XEXP (op0, 1))) != 0)
                                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10840:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                 - INTVAL (XEXP (op0, 1)))));
                                                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10908:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              HOST_WIDE_INT c1 = -INTVAL (XEXP (SUBREG_REG (op0), 1));
                                          ^                       ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10966:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                        op1, XEXP (op0, 1))))
                                                             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10974:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (const_op == 0 && XEXP (op0, 1) == constm1_rtx
                               ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:10995:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                        XEXP (op0, 1), op1)))
                                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11006:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              op0 = XEXP (op0, 1);
                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11017:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_p (XEXP (XEXP (op0, 0), 0), XEXP (op0, 1)))
                                                       ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11019:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              op0 = XEXP (op0, 1);
                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11030:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                        XEXP (op0, 1), op1)))
                                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11052:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            tem = XEXP (XEXP (op0, 0), 0), tem1 = XEXP (XEXP (op0, 0), 1);
                                                  ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11054:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            tem = XEXP (op0, 0), tem1 = XEXP (op0, 1);
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11086:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (XEXP (op0, 0), 1) == constm1_rtx
                 ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11087:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && rtx_equal_p (XEXP (XEXP (op0, 0), 0), XEXP (op0, 1)))
                                                       ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11089:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              op0 = XEXP (op0, 1);
                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11104:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                   XEXP (op0, 1),
                                                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:366:38: note: expanded from macro 'gen_rtx_LSHIFTRT'
  gen_rtx_fmt_ee (LSHIFTRT, (MODE), (ARG0), (ARG1))
                                     ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11105:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                   XEXP (XEXP (op0, 0), 1)),
                                                   ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:366:46: note: expanded from macro 'gen_rtx_LSHIFTRT'
  gen_rtx_fmt_ee (LSHIFTRT, (MODE), (ARG0), (ARG1))
                                             ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11118:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (XEXP (op0, 0), 1)) >= 0
                         ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11119:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (XEXP (op0, 0), 1)) < HOST_BITS_PER_WIDE_INT)
                         ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11121:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              mask = ((INTVAL (XEXP (op0, 1)) & GET_MODE_MASK (mode))
                               ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11122:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      << INTVAL (XEXP (XEXP (op0, 0), 1)));
                                 ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11140:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && ((INTVAL (XEXP (op0, 1)) & GET_MODE_MASK (mode))
                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11163:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (i = exact_log2 ((INTVAL (XEXP (op0, 1))
                                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11205:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && ((c1 = INTVAL (XEXP (op0, 1))) & ~mask) == 0
                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11220:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == const1_rtx
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11233:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == const1_rtx
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11237:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx shift_count = XEXP (XEXP (op0, 0), 1);
                                ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11244:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && (INTVAL (XEXP (shift_op, 1))
                                  ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11264:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (op0, 1)) >= 0
                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11265:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && ((INTVAL (XEXP (op0, 1)) + ! equality_comparison_p)
                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11268:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   & (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1)) == 0)
                                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11271:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  & ~(mask >> (INTVAL (XEXP (op0, 1))
                                       ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11278:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              temp >>= INTVAL (XEXP (op0, 1));
                               ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11292:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                 - INTVAL (XEXP (op0, 1)))));
                                                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11319:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          INTVAL (XEXP (op0, 1)));
                                                  ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11328:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11328:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)
                                  ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11329:56: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (tmode = mode_for_size (mode_width - INTVAL (XEXP (op0, 1)),
                                                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11347:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == XEXP (XEXP (XEXP (op0, 0), 0), 1)
                 ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11347:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && XEXP (op0, 1) == XEXP (XEXP (XEXP (op0, 0), 0), 1)
                                  ^                              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11348:56: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (tmode = mode_for_size (mode_width - INTVAL (XEXP (op0, 1)),
                                                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11355:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx add_const = XEXP (XEXP (op0, 0), 1);
                              ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11357:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                   add_const, XEXP (op0, 1));
                                                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11372:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (op0, 1)) >= 0
                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11373:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT
                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11376:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  & (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1)) == 0
                                                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11379:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      ? ((GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1)) >> 1)
                                                          ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11382:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  <= GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1))))
                                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11389:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              const_op <<= INTVAL (XEXP (op0, 1));
                                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11534:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                        XEXP (op0, 1)));
                                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11577:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx x1 = XEXP (x, 1);
               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11584:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))
                                          ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11587:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             ? XEXP (x1, 1) : XEXP (x1, 0));
                               ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11591:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))
                                          ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11594:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             ? XEXP (x0, 1) : XEXP (x0, 0));
                               ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11645:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            rtx x1 = XEXP (x, 1);
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11656:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))
                                                ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11662:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))
                                                ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11819:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        record_value_for_reg (dest, record_dead_insn, SET_SRC (setter));
                                                      ^~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11827:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                       SET_SRC (setter)));
                                                       ^~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11853:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
              ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11853:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11897:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      note_stores (PATTERN (insn), record_dead_and_set_regs_1, NULL_RTX);
                   ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11900:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    note_stores (PATTERN (insn), record_dead_and_set_regs_1, insn);
                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11927:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11927:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11933:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          links = XEXP (links, 1);
                  ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:11946:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          regno = REGNO (SET_SRC (set));
                         ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12130:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx x1 = XEXP (x, 1);
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12140:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))
                                                  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12146:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))
                                                  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12344:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  block = BLOCK_FOR_INSN (insn);
          ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12349:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          note_stores (PATTERN (insn), reg_dead_at_p_1, NULL);
                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12360:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12441:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        mark_used_regs_combine (SET_SRC (x));
                                ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12513:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (where_dead) == BLOCK_FOR_INSN (to_insn)
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12513:38: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (where_dead) == BLOCK_FOR_INSN (to_insn)
                                            ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12570:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (note, 1) = *pnotes;
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12584:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      move_deaths (SET_SRC (x), maybe_kill_insn, from_luid, to_insn, pnotes);
                   ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12692:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12729:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next_note = XEXP (note, 1);
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12804:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (reg_set_p (XEXP (note, 0), PATTERN (i3)))
                                         ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12817:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (reg_referenced_p (XEXP (note, 0), PATTERN (i3))
                                                     ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12850:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (reg_mentioned_p (XEXP (note, 0), PATTERN (i3)))
                                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12853:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (i2 && reg_mentioned_p (XEXP (note, 0), PATTERN (i2)))
                                                     ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12868:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (reg_mentioned_p (XEXP (note, 0), PATTERN (i3))
                                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12875:45: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (reg_mentioned_p (XEXP (note, 0), PATTERN (i2))
                                                   ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12891:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (JUMP_LABEL (place) == NULL
                  ^~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12892:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  || JUMP_LABEL (place) == XEXP (note, 0)))
                     ^~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12894:20: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx label = JUMP_LABEL (place);
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12897:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                JUMP_LABEL (place) = XEXP (note, 0);
                ^~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12899:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                LABEL_NUSES (label)--;
                ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12904:12: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (JUMP_LABEL (place2) == NULL
                  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12905:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  || JUMP_LABEL (place2) == XEXP (note, 0)))
                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12907:20: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx label = JUMP_LABEL (place2);
                          ^~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12910:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                JUMP_LABEL (place2) = XEXP (note, 0);
                ^~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12912:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                LABEL_NUSES (label)--;
                ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12957:51: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              else if (reg_referenced_p (XEXP (note, 0), PATTERN (i3)))
                                                         ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12960:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))
                                                            ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12975:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (tem = PREV_INSN (tem); place == 0; tem = PREV_INSN (tem))
                         ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12975:54: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (tem = PREV_INSN (tem); place == 0; tem = PREV_INSN (tem))
                                                            ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12990:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && reg_set_p (XEXP (note, 0), PATTERN (tem)))
                                                    ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12992:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      rtx set = single_set (tem);
                                ^~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:12992:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      rtx set = single_set (tem);
                                ^~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13014:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      if (set != 0 && ! side_effects_p (SET_SRC (set))
                                                        ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13027:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          rtx old_notes = REG_NOTES (tem);
                                          ^~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13029:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          PATTERN (tem) = pc_rtx;
                          ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13030:6: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          REG_NOTES (tem) = NULL;
                          ^~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13075:48: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  else if (reg_referenced_p (XEXP (note, 0), PATTERN (tem))
                                                             ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13090:43: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))
                                                               ^~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13117:47: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  || reg_bitfield_target_p (XEXP (note, 0), PATTERN (place)))
                                                            ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13146:43: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    if ((! refers_to_regno_p (i, i + 1, PATTERN (place), 0)
                                                        ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13164:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                          PATTERN (place)))
                                                          ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13173:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                        PATTERN (place), 0)
                                                        ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13175:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            for (tem = PREV_INSN (place); ;
                                       ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13176:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 tem = PREV_INSN (tem))
                                       ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13186:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                              PATTERN (tem)))
                                                              ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13209:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (note, 1) = REG_NOTES (place);
          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13209:21: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (note, 1) = REG_NOTES (place);
                           ^~~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13210:4: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          REG_NOTES (place) = note;
          ^~~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13233:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next_link = XEXP (link, 1);
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13247:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (set = single_set (XEXP (link, 0))) == 0)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13247:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (set = single_set (XEXP (link, 0))) == 0)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13264:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = NEXT_INSN (XEXP (link, 0));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13267:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = NEXT_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13270:58: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        else if (INSN_P (insn) && reg_overlap_mentioned_p (reg, PATTERN (insn)))
                                                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13272:33: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            if (reg_referenced_p (reg, PATTERN (insn)))
                                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13292:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (link2 = LOG_LINKS (place); link2; link2 = XEXP (link2, 1))
                                                         ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
combine.c:13298:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (link, 1) = LOG_LINKS (place);
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
680 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-scan.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-scan.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from df-scan.c:32:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-scan.c:32:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-scan.c:32:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-scan.c:32:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-scan.c:32:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
df-scan.c:303:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:303:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:481:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS (bb, insn)
    ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:481:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS (bb, insn)
    ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:919:45: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (bitmap_bit_p (df->blocks_to_analyze, DF_REF_BBNO (ref)))
                                                   ^~~~~~~~~~~~~~~~~
./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
#define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
                          ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1001:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = df_scan_get_bb_info (DF_REF_BBNO (ref));
                                   ^~~~~~~~~~~~~~~~~
./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
#define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
                          ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1016:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = df_scan_get_bb_info (DF_REF_BBNO (ref));
                                   ^~~~~~~~~~~~~~~~~
./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
#define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
                          ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1035:22: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
    df_set_bb_dirty (DF_REF_BB (ref));
                     ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1227:20: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block bb = BLOCK_FOR_INSN (insn);
                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1331:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && VAR_LOC_UNKNOWN_P (INSN_VAR_LOCATION_LOC (insn)));
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1331:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && VAR_LOC_UNKNOWN_P (INSN_VAR_LOCATION_LOC (insn)));
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 6 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1420:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1420:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1654:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1654:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1722:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1722:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1836:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1836:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1979:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block old_bb = BLOCK_FOR_INSN (insn);
                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:1986:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set_block_for_insn (insn, new_bb);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2060:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (DF_REF_BB (the_ref))
              ^~~~~~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2061:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            df_set_bb_dirty (DF_REF_BB (the_ref));
                             ^~~~~~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2184:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!BLOCK_FOR_INSN (insn))
       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2217:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      basic_block bb = BLOCK_FOR_INSN (insn);
                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2232:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (note = REG_NOTES (insn); note;
                  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2233:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           note = XEXP (note, 1))
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2330:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || DF_REF_BB (ref1) != DF_REF_BB (ref2)
         ^~~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2330:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || DF_REF_BB (ref1) != DF_REF_BB (ref2)
                             ^~~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2933:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        SUBREG_BYTE (reg), GET_MODE (reg));
                                        ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:2967:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gcc_assert (ORIGINAL_REGNO (DF_REF_REG (ref)) == i);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
#define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
                            ^            ~
./rtl.h:719:28: note: expanded from macro 'X0UINT'
#define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3053:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          width = INTVAL (XEXP (dst, 1));
                          ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3054:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          offset = INTVAL (XEXP (dst, 2));
                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3109:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      df_defs_record (collection_rec, COND_EXEC_CODE (x),
                                      ^~~~~~~~~~~~~~~~~~
./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
#define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
                            ^           ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3209:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            width = INTVAL (XEXP (x, 1));
                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3210:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            offset = INTVAL (XEXP (x, 2));
                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3275:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    width = INTVAL (XEXP (dst, 1));
                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3276:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    offset = INTVAL (XEXP (dst, 2));
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3301:44: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    df_uses_record (cl, collection_rec, &XEXP (dst, 2),
                                                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3357:22: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            for (j = 0; j < ASM_OPERANDS_INPUT_LENGTH (x); j++)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3358:45: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              df_uses_record (cl, collection_rec, &ASM_OPERANDS_INPUT (x, j),
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3453:25: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         DF_REF_LOC (ref), DF_REF_BB (ref),
                                                           ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3487:15: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = CALL_INSN_FUNCTION_USAGE (insn_info->insn); note;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3488:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       note = XEXP (note, 1))
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3567:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  df_defs_record (collection_rec, PATTERN (insn_info->insn), bb, insn_info, 0);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3570:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (insn_info->insn); note;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3571:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       note = XEXP (note, 1))
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3605:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  &PATTERN (insn_info->insn), DF_REF_REG_USE, bb, insn_info, 0,
                   ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3626:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3626:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3741:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS (bb, insn)
    ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:3741:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS (bb, insn)
    ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:4268:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:4268:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:4551:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-scan.c:4551:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
61 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o decNumber.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  decNumber.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o df-problems.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  df-problems.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from df-problems.c:32:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-problems.c:32:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-problems.c:32:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-problems.c:32:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from df-problems.c:32:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
df-problems.c:130:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
               DF_REF_BBNO (link->ref),
               ^~~~~~~~~~~~~~~~~~~~~~~
./df.h:655:27: note: expanded from macro 'DF_REF_BBNO'
#define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)
                          ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:426:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:426:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:857:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:857:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:1465:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:1465:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2000:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2000:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2134:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2134:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2209:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2209:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2258:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2258:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2521:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2521:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2637:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:2637:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3114:17: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx *pprev = &REG_NOTES (insn);
                ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3133:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx next = XEXP (link, 1);
                         ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3137:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (link, 1) = dead;
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3153:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx next = XEXP (link, 1);
                         ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3157:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (link, 1) = unused;
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3190:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (prev, 1) = XEXP (curr, 1);
          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3190:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (prev, 1) = XEXP (curr, 1);
                           ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3192:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          old = XEXP (curr, 1);
                ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3193:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        XEXP (curr, 1) = REG_NOTES (insn);
        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3193:19: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        XEXP (curr, 1) = REG_NOTES (insn);
                         ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3194:2: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_NOTES (insn) = curr;
        ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3200:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        curr = XEXP (curr, 1);
               ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3467:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:469:28: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) && (INSN) != PREV_INSN (BB_HEAD (BB));    \
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3467:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS_REVERSE (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:470:17: note: expanded from macro 'FOR_BB_INSNS_REVERSE'
       (INSN) = PREV_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3620:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = XEXP (old_unused_notes, 1);
                     ^                       ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3626:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = XEXP (old_dead_notes, 1);
                     ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3635:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3635:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3945:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
              ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:3945:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:4197:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
df-problems.c:4197:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
46 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dyn-string.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dyn-string.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o et-forest.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  et-forest.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ebitmap.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ebitmap.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o explow.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  explow.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from explow.c:39:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from explow.c:39:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from explow.c:39:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from explow.c:39:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from explow.c:39:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
explow.c:104:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        HOST_WIDE_INT h1 = CONST_DOUBLE_HIGH (x);
                           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
explow.c:158:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          c += INTVAL (XEXP (x, 1));
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:168:56: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = gen_rtx_PLUS (mode, XEXP (x, 0), plus_constant (XEXP (x, 1), c));
                                                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:328:42: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                         ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:216:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                XEXP (x, 1)))
                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:225:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  x1 = eliminate_constant_term (XEXP (x, 1), &tem);
                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:226:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((x1 != XEXP (x, 1) || x0 != XEXP (x, 0))
             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:306:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx op1 = break_out_memory_refs (XEXP (x, 1));
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:308:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:533:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (ref)))
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:533:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (ref)))
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:563:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      offset += INTVAL (XEXP (XEXP (base, 0), 1));
                        ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:569:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || !SYMBOL_REF_HAS_BLOCK_INFO_P (base)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1425:5: note: expanded from macro 'SYMBOL_REF_HAS_BLOCK_INFO_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_HAS_BLOCK_INFO) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:570:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || SYMBOL_REF_ANCHOR_P (base)
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1430:5: note: expanded from macro 'SYMBOL_REF_ANCHOR_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_ANCHOR) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:581:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             SYMBOL_REF_TLS_MODEL (base));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:679:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (set = single_set (insn)) != 0
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:679:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (set = single_set (insn)) != 0
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:681:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ! rtx_equal_p (x, SET_SRC (set)))
                           ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:691:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (SYMBOL_REF_DECL (x) && DECL_P (SYMBOL_REF_DECL (x)))
            ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:692:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          align = DECL_ALIGN (SYMBOL_REF_DECL (x));
                              ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:2557:46: note: expanded from macro 'DECL_ALIGN'
#define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)
                                             ^~~~
./tree.h:945:56: note: expanded from macro 'DECL_COMMON_CHECK'
#define DECL_COMMON_CHECK(T)    CONTAINS_STRUCT_CHECK (T, TS_DECL_COMMON)
                                                       ^
./tree.h:911:50: note: expanded from macro 'CONTAINS_STRUCT_CHECK'
#define CONTAINS_STRUCT_CHECK(T, ENUM)          (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:702:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        rtx c = XEXP (XEXP (x, 0), 1);
                ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:706:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (SYMBOL_REF_DECL (s) && DECL_P (SYMBOL_REF_DECL (s)))
            ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
explow.c:707:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          sa = DECL_ALIGN (SYMBOL_REF_DECL (s));
                           ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:2557:46: note: expanded from macro 'DECL_ALIGN'
#define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)
                                             ^~~~
./tree.h:945:56: note: expanded from macro 'DECL_COMMON_CHECK'
#define DECL_COMMON_CHECK(T)    CONTAINS_STRUCT_CHECK (T, TS_DECL_COMMON)
                                                       ^
./tree.h:911:50: note: expanded from macro 'CONTAINS_STRUCT_CHECK'
#define CONTAINS_STRUCT_CHECK(T, ENUM)          (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
27 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fdmatch.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fdmatch.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fibheap.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fibheap.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o filename_cmp.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  filename_cmp.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o cse.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  cse.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from cse.c:35:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cse.c:35:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cse.c:35:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cse.c:35:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from cse.c:35:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
cse.c:1078:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            remove_invalid_subreg_refs (i, SUBREG_BYTE (x), GET_MODE (x));
                                           ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:1107:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! REGNO_QTY_VALID_P (REGNO (XEXP (x, 1))))
                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
cse.c:503:40: note: expanded from macro 'REGNO_QTY_VALID_P'
#define REGNO_QTY_VALID_P(N) (REG_QTY (N) >= 0)
                                       ^
cse.c:498:39: note: expanded from macro 'REG_QTY'
#define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:1108:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (insert_regs (XEXP (x, 1), NULL, 0))
                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:1110:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            rehash_using_reg (XEXP (x, 1));
                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2037:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                || (((SUBREG_BYTE (exp)
                      ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2039:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && SUBREG_BYTE (exp) <= end))
                       ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2335:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     + (SUBREG_BYTE (x) / UNITS_PER_WORD));
                        ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2385:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  + CODE_LABEL_NUMBER (XEXP (x, 0)));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2474:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            + hash_rtx_string (ASM_OPERANDS_OUTPUT_CONSTRAINT (x))
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1183:45: note: expanded from macro 'ASM_OPERANDS_OUTPUT_CONSTRAINT'
#define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XCSTR (RTX, 1, ASM_OPERANDS)
                                            ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2477:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (ASM_OPERANDS_INPUT_LENGTH (x))
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2479:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (i = 1; i < ASM_OPERANDS_INPUT_LENGTH (x); i++)
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2481:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  hash += (hash_rtx_cb (ASM_OPERANDS_INPUT (x, i),
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2486:29: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           (ASM_OPERANDS_INPUT_CONSTRAINT (x, i)));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
  XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
        ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:703:35: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2489:33: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              hash += hash_rtx_string (ASM_OPERANDS_INPUT_CONSTRAINT (x, 0));
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
  XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
        ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:703:35: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2490:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              x = ASM_OPERANDS_INPUT (x, 0);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2627:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
                     ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2627:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
                                           ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2627:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
                     ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2627:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (code == MEM && MEM_ADDR_SPACE (x) != MEM_ADDR_SPACE (y))
                                           ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2692:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ATTRS (x) != MEM_ATTRS (y))
              ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2692:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ATTRS (x) != MEM_ATTRS (y))
                               ^~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2707:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && exp_equiv_p (XEXP (x, 1), XEXP (y, 1),
                               ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2707:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && exp_equiv_p (XEXP (x, 1), XEXP (y, 1),
                                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2709:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || (exp_equiv_p (XEXP (x, 0), XEXP (y, 1),
                                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2711:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && exp_equiv_p (XEXP (x, 1), XEXP (y, 0),
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2724:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || strcmp (ASM_OPERANDS_OUTPUT_CONSTRAINT (x),
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1183:45: note: expanded from macro 'ASM_OPERANDS_OUTPUT_CONSTRAINT'
#define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XCSTR (RTX, 1, ASM_OPERANDS)
                                            ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2725:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     ASM_OPERANDS_OUTPUT_CONSTRAINT (y))
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1183:45: note: expanded from macro 'ASM_OPERANDS_OUTPUT_CONSTRAINT'
#define ASM_OPERANDS_OUTPUT_CONSTRAINT(RTX) XCSTR (RTX, 1, ASM_OPERANDS)
                                            ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2726:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || ASM_OPERANDS_OUTPUT_IDX (x) != ASM_OPERANDS_OUTPUT_IDX (y)
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1184:38: note: expanded from macro 'ASM_OPERANDS_OUTPUT_IDX'
#define ASM_OPERANDS_OUTPUT_IDX(RTX) XCINT (RTX, 2, ASM_OPERANDS)
                                     ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2726:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || ASM_OPERANDS_OUTPUT_IDX (x) != ASM_OPERANDS_OUTPUT_IDX (y)
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1184:38: note: expanded from macro 'ASM_OPERANDS_OUTPUT_IDX'
#define ASM_OPERANDS_OUTPUT_IDX(RTX) XCINT (RTX, 2, ASM_OPERANDS)
                                     ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2727:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || ASM_OPERANDS_INPUT_LENGTH (x) != ASM_OPERANDS_INPUT_LENGTH (y))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2727:40: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || ASM_OPERANDS_INPUT_LENGTH (x) != ASM_OPERANDS_INPUT_LENGTH (y))
                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2730:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (ASM_OPERANDS_INPUT_LENGTH (x))
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2732:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2733:25: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            if (! exp_equiv_p (ASM_OPERANDS_INPUT (x, i),
                               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2734:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                               ASM_OPERANDS_INPUT (y, i),
                               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2736:14: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                || strcmp (ASM_OPERANDS_INPUT_CONSTRAINT (x, i),
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
  XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
        ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:703:35: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2737:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           ASM_OPERANDS_INPUT_CONSTRAINT (y, i)))
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
  XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
        ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:703:35: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2841:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REGNO_QTY_VALID_P (REGNO (XEXP (x, 1))))
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
cse.c:503:40: note: expanded from macro 'REGNO_QTY_VALID_P'
#define REGNO_QTY_VALID_P(N) (REG_QTY (N) >= 0)
                                       ^
cse.c:498:39: note: expanded from macro 'REG_QTY'
#define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:2844:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      int x1_q = REG_QTY (REGNO (XEXP (x, 1)));
                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
cse.c:498:39: note: expanded from macro 'REG_QTY'
#define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3136:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      arg1 = XEXP (x, 0), arg2 = XEXP (x, 1);
                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3219:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3221:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             fold_rtx (ASM_OPERANDS_INPUT (x, i), insn), 0);
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3220:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            validate_change (insn, &ASM_OPERANDS_INPUT (x, i),
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3531:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (inner_const = equiv_constant (XEXP (y, 1))) != 0
                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3560:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg1, 0))
                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3568:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && XEXP (XEXP (XEXP (y, 0), 1), 0) == XEXP (const_arg1, 0))
                           ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3580:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg0, 0))
                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3588:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && XEXP (XEXP (XEXP (y, 0), 1), 0) == XEXP (const_arg0, 0))
                           ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3612:29: warning: shift count >= width of type [-Wshift-count-overflow]
                ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT - 1))
                                   ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cse.c:3686:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              inner_const = equiv_constant (fold_rtx (XEXP (y, 1), 0));
                                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3797:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        const_arg2 ? const_arg2 : XEXP (x, 2));
                                                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3843:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int byte = SUBREG_BYTE (x) - subreg_lowpart_offset (mode, word_mode);
                     ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3856:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        return simplify_subreg (mode, new_rtx, imode, SUBREG_BYTE (x));
                                                      ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3912:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    cond_known_true = (XEXP (SET_SRC (set), 2) == pc_rtx);
                       ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3912:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    cond_known_true = (XEXP (SET_SRC (set), 2) == pc_rtx);
                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3914:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    cond_known_true = (XEXP (SET_SRC (set), 1) == pc_rtx);
                       ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3914:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    cond_known_true = (XEXP (SET_SRC (set), 1) == pc_rtx);
                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3920:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  op0 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 0), insn);
                              ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3921:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  op1 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 1), insn);
                  ^                              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:3921:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  op1 = fold_rtx (XEXP (XEXP (SET_SRC (set), 0), 1), insn);
                              ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4204:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx x = PATTERN (insn);
          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4231:18: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (tem = CALL_INSN_FUNCTION_USAGE (insn); tem; tem = XEXP (tem, 1))
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4231:62: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (tem = CALL_INSN_FUNCTION_USAGE (insn); tem; tem = XEXP (tem, 1))
                                                             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4264:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          canon_reg (SET_SRC (x), insn);
                     ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4266:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          fold_rtx (SET_SRC (x), insn);
                    ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4314:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  canon_reg (SET_SRC (y), insn);
                             ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4316:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  fold_rtx (SET_SRC (y), insn);
                            ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4366:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    canon_reg (PATTERN (insn), insn);
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4372:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (n_sets == 1 && REG_NOTES (insn) != 0
                     ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4374:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl))
                                        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4398:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx src = SET_SRC (sets[i].rtl);
                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4406:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           canon_reg (XEXP (dest, 1), insn), 1);
                                      ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4408:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           canon_reg (XEXP (dest, 2), insn), 1);
                                      ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4407:28: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          validate_change (insn, &XEXP (dest, 2),
                                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4464:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (sets[i].rtl);
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:4717:51: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx new_and = gen_rtx_AND (VOIDmode, NULL_RTX, XEXP (src, 1));
                                                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:352:41: note: expanded from macro 'gen_rtx_AND'
  gen_rtx_fmt_ee (AND, (MODE), (ARG0), (ARG1))
                                        ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5044:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  >= INTVAL (XEXP (SET_DEST (sets[i].rtl), 1)))
                             ^                             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5050:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx width = XEXP (SET_DEST (sets[i].rtl), 1);
                          ^                             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5051:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx pos = XEXP (SET_DEST (sets[i].rtl), 2);
                        ^                             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5123:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              SET_SRC (sets[i].rtl) = trial;
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5148:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx new_rtx = canon_reg (SET_SRC (sets[i].rtl), insn);
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5186:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (sets[i].rtl);
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5312:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx width = XEXP (SET_DEST (sets[i].rtl), 1);
                      ^                             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5363:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              JUMP_LABEL (new_rtx) = XEXP (src, 0);
              ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5364:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              LABEL_NUSES (XEXP (src, 0))++;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5370:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  XEXP (note, 1) = NULL_RTX;
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5371:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  REG_NOTES (new_rtx) = note;
                  ^~~~~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5378:6: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
            INSN_CODE (insn) = -1;
            ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5455:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && rtx_equal_p (SET_SRC (sets[i].rtl), src_eqv))
                            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5461:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        && ! rtx_equal_p (SET_SRC (sets[i].rtl), SET_DEST (sets[i].rtl)))
                          ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5599:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && MEM_VOLATILE_P (PATTERN (insn)))
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
  (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
                                      ^~~
./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
#define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5858:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && NEXT_INSN (PREV_INSN (insn)) == insn
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5858:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && NEXT_INSN (PREV_INSN (insn)) == insn
                    ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5860:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REGNO (SET_SRC (sets[0].rtl)) >= FIRST_PSEUDO_REGISTER
                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5861:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REGNO_QTY_VALID_P (REGNO (SET_SRC (sets[0].rtl))))
                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
cse.c:503:40: note: expanded from macro 'REGNO_QTY_VALID_P'
#define REGNO_QTY_VALID_P(N) (REG_QTY (N) >= 0)
                                       ^
cse.c:498:39: note: expanded from macro 'REG_QTY'
#define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5863:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      int src_q = REG_QTY (REGNO (SET_SRC (sets[0].rtl)));
                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
cse.c:498:39: note: expanded from macro 'REG_QTY'
#define REG_QTY(N) (get_cse_reg_info (N)->reg_qty)
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5871:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx bb_head = BB_HEAD (BLOCK_FOR_INSN (insn));
                                 ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./basic-block.h:491:26: note: expanded from macro 'BB_HEAD'
#define BB_HEAD(B)      (B)->il.rtl->head_
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5874:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              prev = PREV_INSN (prev);
                     ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5891:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (PATTERN (prev)) == SET_SRC (sets[0].rtl)
                           ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5891:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SET_DEST (PATTERN (prev)) == SET_SRC (sets[0].rtl)
                                              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5895:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx src = SET_SRC (sets[0].rtl);
                        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:5898:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              validate_change (prev, &SET_DEST (PATTERN (prev)), dest, 1);
                                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6018:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (XEXP (x, 1))
          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6019:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        XEXP (x, 1) = cse_process_notes (XEXP (x, 1), NULL_RTX, changed);
                                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6019:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        XEXP (x, 1) = cse_process_notes (XEXP (x, 1), NULL_RTX, changed);
        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6267:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6267:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6275:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            nsets += XVECLEN (PATTERN (insn), 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6320:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6320:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6343:12: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (REG_NOTES (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6346:43: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  REG_NOTES (insn) = cse_process_notes (REG_NOTES (insn),
                                                        ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6346:5: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  REG_NOTES (insn) = cse_process_notes (REG_NOTES (insn),
                  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6357:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  && for_each_rtx (&PATTERN (insn), check_for_label_ref,
                                    ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6427:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && single_set (insn)
             ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6427:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && single_set (insn)
             ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6619:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      count_reg_usage (SET_SRC (x), counts,
                       ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6635:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        count_reg_usage (CALL_INSN_FUNCTION_USAGE (x), counts, dest, incr);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6636:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      count_reg_usage (PATTERN (x), counts, dest, incr);
                       ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6652:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                eqv = XEXP (eqv, 1);
                      ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6668:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      count_reg_usage (XEXP (x, 1), counts, NULL_RTX, incr);
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6677:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6678:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        count_reg_usage (ASM_OPERANDS_INPUT (x, i), counts, dest, incr);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6733:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           || side_effects_p (SET_SRC (set)))
                              ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6747:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return set_live_p (PATTERN (insn), insn, counts);
                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6750:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6752:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx elt = XVECEXP (PATTERN (insn), 0, i);
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6768:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (next = NEXT_INSN (insn); next; next = NEXT_INSN (next))
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6768:50: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (next = NEXT_INSN (insn); next; next = NEXT_INSN (next))
                                                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6773:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        else if (INSN_VAR_LOCATION_DECL (insn) == INSN_VAR_LOCATION_DECL (next))
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:915:26: note: expanded from macro 'INSN_VAR_LOCATION_DECL'
  PAT_VAR_LOCATION_DECL (INSN_VAR_LOCATION (INSN))
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:893:46: note: expanded from macro 'PAT_VAR_LOCATION_DECL'
#define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))
                                             ^~~
./rtl.h:743:45: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6773:44: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        else if (INSN_VAR_LOCATION_DECL (insn) == INSN_VAR_LOCATION_DECL (next))
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:915:26: note: expanded from macro 'INSN_VAR_LOCATION_DECL'
  PAT_VAR_LOCATION_DECL (INSN_VAR_LOCATION (INSN))
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:893:46: note: expanded from macro 'PAT_VAR_LOCATION_DECL'
#define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))
                                             ^~~
./rtl.h:743:45: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6779:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (for_each_rtx (&INSN_VAR_LOCATION_LOC (insn), is_dead_reg, counts))
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6781:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6781:4: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6809:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = insns; insn; insn = NEXT_INSN (insn))
                                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6824:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      prev = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6887:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for_each_rtx (&PATTERN (insn), cse_change_cc_mode, &args);
                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6888:18: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for_each_rtx (&REG_NOTES (insn), cse_change_cc_mode, &args);
                 ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6907:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = start; insn != end; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6973:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      end = NEXT_INSN (BB_END (e->dest));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6974:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = BB_HEAD (e->dest); insn != end; insn = NEXT_INSN (insn))
                                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6987:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set = single_set (insn);
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6987:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set = single_set (insn);
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:6999:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (rtx_equal_p (cc_src, SET_SRC (set)))
                                       ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7005:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       XEXP (SET_SRC (set), 0))
                                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7006:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && rtx_equal_p (XEXP (cc_src, 1),
                                       ^             ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7007:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       XEXP (SET_SRC (set), 1)))
                                       ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7007:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       XEXP (SET_SRC (set), 1)))
                                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7106:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          cse_change_cc_mode_insns (NEXT_INSN (insns[i]), last_insns[i],
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7160:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (reg_referenced_p (cc_reg_1, PATTERN (last_insn)))
                                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7162:56: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (cc_reg_2 && reg_referenced_p (cc_reg_2, PATTERN (last_insn)))
                                                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7169:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = PREV_INSN (last_insn);
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7170:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn && insn != PREV_INSN (BB_HEAD (bb));
                           ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7171:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = PREV_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7177:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set = single_set (insn);
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7177:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set = single_set (insn);
                ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7183:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              cc_src = SET_SRC (set);
                       ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7193:52: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (modified_between_p (cc_src, cc_src_insn, NEXT_INSN (last_insn)))
                                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7215:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              cse_change_cc_mode_insns (NEXT_INSN (cc_src_insn),
                                        ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
cse.c:7216:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        NEXT_INSN (last_insn),
                                        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
165 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dse.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dse.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from dse.c:45:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from dse.c:45:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from dse.c:45:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from dse.c:45:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from dse.c:45:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
dse.c:1070:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (mem));
                                       ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1070:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (mem));
                                       ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1081:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      alias_set_type alias_set = MEM_ALIAS_SET (mem);
                                 ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1081:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      alias_set_type alias_set = MEM_ALIAS_SET (mem);
                                 ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1172:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          *offset = INTVAL (XEXP (address, 1));
                            ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1176:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (mem))
                                ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1176:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (mem))
                                ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1353:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (!MEM_SIZE (mem)
                ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1353:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (!MEM_SIZE (mem)
                ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1354:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               || !CONST_INT_P (MEM_SIZE (mem))
                                ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:376:35: note: expanded from macro 'CONST_INT_P'
#define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)
                                  ^
./rtl.h:349:45: note: expanded from macro 'GET_CODE'
#define GET_CODE(RTX)       ((enum rtx_code) (RTX)->code)
                                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1356:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               || INTVAL (MEM_SIZE (mem)) <= 0
                          ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1356:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               || INTVAL (MEM_SIZE (mem)) <= 0
                          ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1357:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               || INTVAL (MEM_SIZE (mem)) > MAX_OFFSET
                          ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1357:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               || INTVAL (MEM_SIZE (mem)) > MAX_OFFSET
                          ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1382:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    width = INTVAL (MEM_SIZE (mem));
                    ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1382:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    width = INTVAL (MEM_SIZE (mem));
                    ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1455:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rhs = SET_SRC (body);
            ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1458:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (body == PATTERN (insn_info->insn))
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1563:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        BLOCK_FOR_INSN (insn_info->insn),
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1747:55: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = shift_seq; insn != NULL_RTX; insn = NEXT_INSN (insn))
                                                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1749:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          cost += insn_rtx_cost (PATTERN (insn), speed);
                                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1931:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (read_insn->insn);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1957:66: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (this_insn = insns; this_insn != NULL_RTX; this_insn = NEXT_INSN (this_insn))
                                                                 ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:1958:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        note_stores (PATTERN (this_insn), look_for_hardregs, regs_set);
                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2061:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2061:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)
       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2334:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (link = CALL_INSN_FUNCTION_USAGE (call_insn);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2336:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           link = XEXP (link, 1))
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2401:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && MEM_VOLATILE_P (PATTERN (insn)))
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1213:39: note: expanded from macro 'MEM_VOLATILE_P'
  (RTL_FLAG_CHECK3("MEM_VOLATILE_P", (RTX), MEM, ASM_OPERANDS,          \
                                      ^~~
./rtl.h:694:52: note: expanded from macro 'RTL_FLAG_CHECK3'
#define RTL_FLAG_CHECK3(NAME, RTX, C1, C2, C3)                          (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2409:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note_uses (&PATTERN (insn), check_mem_read_use, bb_info);
              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2425:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx call = PATTERN (insn);
                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2429:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            call = SET_SRC (call);
                   ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2435:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (SYMBOL_REF_DECL (symbol)
                  ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2438:31: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if ((DECL_BUILT_IN_CLASS (SYMBOL_REF_DECL (symbol))
                                            ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:3225:26: note: expanded from macro 'DECL_BUILT_IN_CLASS'
   (FUNCTION_DECL_CHECK (NODE)->function_decl.built_in_class)
                         ^~~~
./tree-check.h:35:44: note: expanded from macro 'FUNCTION_DECL_CHECK'
#define FUNCTION_DECL_CHECK(t)  TREE_CHECK (t, FUNCTION_DECL)
                                            ^
./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
#define TREE_CHECK(T, CODE)                     (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2440:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && (DECL_FUNCTION_CODE (SYMBOL_REF_DECL (symbol))
                                               ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:2573:25: note: expanded from macro 'DECL_FUNCTION_CODE'
  (FUNCTION_DECL_CHECK (NODE)->function_decl.function_code)
                        ^~~~
./tree-check.h:35:44: note: expanded from macro 'FUNCTION_DECL_CHECK'
#define FUNCTION_DECL_CHECK(t)  TREE_CHECK (t, FUNCTION_DECL)
                                            ^
./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
#define TREE_CHECK(T, CODE)                     (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2442:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      || SYMBOL_REF_DECL (symbol) == block_clear_fn)
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2443:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    memset_call = SYMBOL_REF_DECL (symbol);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2534:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || volatile_refs_p (PATTERN (insn))
                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2540:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  body = PATTERN (insn);
         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2651:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dse.c:2651:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
46 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o floatformat.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  floatformat.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fixed-value.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fixed-value.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fopen_unlocked.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fopen_unlocked.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o except.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  except.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
except.c:941:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (ei = ei_start (BLOCK_FOR_INSN (insn)->preds); (e = ei_safe_edge (ei)); )
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./basic-block.h:691:38: note: expanded from macro 'ei_start'
#define ei_start(iter) ei_start_1 (&(iter))
                                     ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:948:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    last = PREV_INSN (last);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:949:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = create_basic_block (seq, last, BLOCK_FOR_INSN (insn)->prev_bb);
                                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1069:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))
                                          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1150:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SYMBOL_REF_FLAGS (sym) = SYMBOL_FLAG_LOCAL;
      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1189:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (fn_begin = get_insns (); ; fn_begin = NEXT_INSN (fn_begin))
                                             ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1192:6: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (NOTE_KIND (fn_begin) == NOTE_INSN_FUNCTION_BEG)
            ^~~~~~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1194:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        else if (NOTE_INSN_BASIC_BLOCK_P (fn_begin))
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1232:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = NEXT_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1446:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          redirect_edge_succ (e, BLOCK_FOR_INSN (lp->landing_pad));
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1625:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return may_trap_p (PATTERN (insn));
                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1646:44: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = first; insn != last ; insn = NEXT_INSN (insn))
                                           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1667:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = last; insn != first; insn = PREV_INSN (insn))
                                          ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1691:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    insn = XVECEXP (PATTERN (insn), 0, 0);
                    ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1770:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx seq = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1814:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx seq = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1868:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:1881:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = XEXP (insn, 1))
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2414:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (iter = get_insns (); iter ; iter = NEXT_INSN (iter))
                                          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2426:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = XVECEXP (PATTERN (insn), 0, 0);
                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2471:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    NOTE_EH_HANDLER (note) = call_site;
                    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2477:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        NOTE_EH_HANDLER (note) = call_site;
                        ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2488:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    NOTE_EH_HANDLER (note) = call_site;
                    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2494:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                NOTE_EH_HANDLER (note) = call_site;
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2505:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                NOTE_EH_HANDLER (note) = call_site;
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2514:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
             && NOTE_KIND (iter) == NOTE_INSN_SWITCH_TEXT_SECTIONS)
                ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2543:25: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SET_BIT (pad_loc, CODE_LABEL_NUMBER (iter) - min_labelno);
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2548:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NOTE_EH_HANDLER (note) = call_site;
      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2574:14: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
              idx = CODE_LABEL_NUMBER (cs->landing_pad) - min_labelno;
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2586:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         iter; iter = PREV_INSN (iter))
                                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2587:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      if (NOTE_INSN_BASIC_BLOCK_P (iter))
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2589:16: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          prev_bb = NOTE_BASIC_BLOCK (iter);
                                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2606:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  JUMP_LABEL (jump) = cs->landing_pad;
                  ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2608:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  iter = NEXT_INSN (cs->landing_pad);
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2609:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (iter && NOTE_INSN_BASIC_BLOCK_P (iter))
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:2610:15: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    padbb = NOTE_BASIC_BLOCK (iter);
                            ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
except.c:3235:57: warning: for loop has empty body [-Wempty-body]
              for (lp = i->landing_pads; lp ; lp = lp->next_lp);
                                                               ^
except.c:3235:57: note: put the semicolon on a separate line to silence this warning
37 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o expmed.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  expmed.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from expmed.c:37:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expmed.c:37:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expmed.c:37:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expmed.c:37:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expmed.c:37:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
expmed.c:158:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.plus, 1) = &all.reg;
  ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:165:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.mult, 1) = &all.reg;
  ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:169:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.sdiv, 1) = &all.reg;
  ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:173:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.udiv, 1) = &all.reg;
  ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:177:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.sdiv_32, 1) = 32 < MAX_BITS_PER_WORD ? cint[32] : GEN_INT (32);
  ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:181:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.smod_32, 1) = XEXP (&all.sdiv_32, 1);
  ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:181:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.smod_32, 1) = XEXP (&all.sdiv_32, 1);
                           ^                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:188:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.wide_mult, 1) = &all.zext;
  ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:204:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.shift_add, 1) = &all.reg;
  ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:208:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.shift_sub0, 1) = &all.reg;
  ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:212:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (&all.shift_sub1, 1) = &all.shift_mult;
  ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:255:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (&all.wide_lshr, 1) = GEN_INT (GET_MODE_BITSIZE (mode));
              ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:270:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (&all.shift, 1) = cint[m];
              ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:271:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              XEXP (&all.shift_mult, 1) = pow2[m];
              ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:397:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (SUBREG_BYTE (op0) == 0 && inner_mode_size < outer_mode_size)
          ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:407:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        byte_offset = SUBREG_BYTE (op0);
                      ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:699:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        xop0 = gen_rtx_SUBREG (op_mode, SUBREG_REG (xop0), SUBREG_BYTE (xop0));
                                                           ^~~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:800:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:800:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:908:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            MEM_ALIGN (op0), mode, MEM_VOLATILE_P (op0));
                            ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:908:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            MEM_ALIGN (op0), mode, MEM_VOLATILE_P (op0));
                            ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1045:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1124:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD) + offset;
                             ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1198:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      bitnum += SUBREG_BYTE (op0) * BITS_PER_UNIT;
                ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1329:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            bitnum += SUBREG_BYTE (subreg) * BITS_PER_UNIT;
                      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1621:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1621:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        bestmode = get_best_mode (bitsize, bitnum, MEM_ALIGN (op0),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1734:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            MEM_ALIGN (op0), word_mode, MEM_VOLATILE_P (op0));
                            ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1734:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            MEM_ALIGN (op0), word_mode, MEM_VOLATILE_P (op0));
                            ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1924:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    unit = MIN (MEM_ALIGN (op0), BITS_PER_WORD);
                ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:1950:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD) + offset;
                             ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:3188:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (CONST_DOUBLE_HIGH (op1) == 0
              ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
expmed.c:3192:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && EXACT_POWER_OF_2_OR_ZERO_P (CONST_DOUBLE_HIGH (op1)))
                                                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
expmed.c:60:49: note: expanded from macro 'EXACT_POWER_OF_2_OR_ZERO_P'
#define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)
                                                ^
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
expmed.c:3192:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && EXACT_POWER_OF_2_OR_ZERO_P (CONST_DOUBLE_HIGH (op1)))
                                                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
expmed.c:60:42: note: expanded from macro 'EXACT_POWER_OF_2_OR_ZERO_P'
#define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)
                                         ^
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
expmed.c:3194:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              int shift = floor_log2 (CONST_DOUBLE_HIGH (op1))
                                      ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
expmed.c:3340:47: warning: shift count >= width of type [-Wshift-count-overflow]
      unsigned HOST_WIDE_INT ml_lo = (mlow_hi << (HOST_BITS_PER_WIDE_INT - 1)) | (mlow_lo >> 1);
                                              ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
expmed.c:3341:48: warning: shift count >= width of type [-Wshift-count-overflow]
      unsigned HOST_WIDE_INT mh_lo = (mhigh_hi << (HOST_BITS_PER_WIDE_INT - 1)) | (mhigh_lo >> 1);
                                               ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
expmed.c:4164:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && (set = single_set (insn)) != 0
                              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:4164:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && (set = single_set (insn)) != 0
                              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:4247:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            && (set = single_set (insn)) != 0
                                      ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:4247:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            && (set = single_set (insn)) != 0
                                      ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:4250:6: warning: shift count >= width of type [-Wshift-count-overflow]
                                        << (HOST_BITS_PER_WIDE_INT - 1)))
                                        ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
expmed.c:4350:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && (set = single_set (insn)) != 0
                              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:4350:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && (set = single_set (insn)) != 0
                              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5000:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                CONST_DOUBLE_LOW (x), CONST_DOUBLE_HIGH (x));
                                                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
expmed.c:5031:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          make_tree (type, XEXP (x, 1)));
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:4782:55: note: expanded from macro 'fold_build2'
   fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
                                                      ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5035:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          make_tree (type, XEXP (x, 1)));
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:4782:55: note: expanded from macro 'fold_build2'
   fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
                                                      ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5042:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          make_tree (type, XEXP (x, 1)));
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:4782:55: note: expanded from macro 'fold_build2'
   fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
                                                      ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5046:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          make_tree (type, XEXP (x, 1)));
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:4782:55: note: expanded from macro 'fold_build2'
   fold_build2_stat_loc (UNKNOWN_LOCATION, c, t1, t2, t3 MEM_STAT_INFO)
                                                      ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5052:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         make_tree (type, XEXP (x, 1))));
                                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:3887:49: note: expanded from macro 'build2'
#define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
                                                ^~
./tree.h:4804:43: note: expanded from macro 'fold_convert'
   fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
                                          ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5058:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         make_tree (type, XEXP (x, 1))));
                                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:3887:49: note: expanded from macro 'build2'
#define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
                                                ^~
./tree.h:4804:43: note: expanded from macro 'fold_convert'
   fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
                                          ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5068:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         make_tree (t, XEXP (x, 1))));
                                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:3887:49: note: expanded from macro 'build2'
#define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
                                                ^~
./tree.h:4804:43: note: expanded from macro 'fold_convert'
   fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
                                          ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5073:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         make_tree (t, XEXP (x, 1))));
                                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:3887:49: note: expanded from macro 'build2'
#define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)
                                                ^~
./tree.h:4804:43: note: expanded from macro 'fold_convert'
   fold_convert_loc(UNKNOWN_LOCATION, T1, T2)
                                          ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5085:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      t = SYMBOL_REF_DECL (x);
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expmed.c:5091:23: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      t = build_decl (RTL_LOCATION (x), VAR_DECL, NULL_TREE, type);
                      ^~~~~~~~~~~~~~~~
./rtl.h:766:23: note: expanded from macro 'RTL_LOCATION'
                         locator_location (INSN_LOCATOR (X)) \
                                           ^~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:3927:46: note: expanded from macro 'build_decl'
#define build_decl(l,c,t,q) build_decl_stat (l,c,t,q MEM_STAT_INFO)
                                             ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
66 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o emit-rtl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  emit-rtl.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from emit-rtl.c:51:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from emit-rtl.c:51:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from emit-rtl.c:51:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from emit-rtl.c:51:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from emit-rtl.c:51:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
emit-rtl.c:230:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    h = CONST_DOUBLE_LOW (value) ^ CONST_DOUBLE_HIGH (value);
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
emit-rtl.c:251:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && CONST_DOUBLE_HIGH (a) == CONST_DOUBLE_HIGH (b));
               ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
emit-rtl.c:251:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && CONST_DOUBLE_HIGH (a) == CONST_DOUBLE_HIGH (b));
                                        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
emit-rtl.c:426:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ORIGINAL_REGNO (x) = regno;
  ^~~~~~~~~~~~~~~~~~
./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
#define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
                            ^            ~
./rtl.h:719:28: note: expanded from macro 'X0UINT'
#define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:564:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  CONST_DOUBLE_HIGH (value) = i1;
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
emit-rtl.c:644:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (rt) = 0;
  ^~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:925:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_ATTRS (new_rtx) = get_reg_attrs (REG_EXPR (reg),
                                       ^~~~~~~~~~~~~~
./rtl.h:1293:24: note: expanded from macro 'REG_EXPR'
#define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
                       ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:926:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   REG_OFFSET (reg) + offset);
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1297:26: note: expanded from macro 'REG_OFFSET'
#define REG_OFFSET(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:926:8: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   REG_OFFSET (reg) + offset);
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1297:53: note: expanded from macro 'REG_OFFSET'
#define REG_OFFSET(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:925:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_ATTRS (new_rtx) = get_reg_attrs (REG_EXPR (reg),
                                       ^~~~~~~~~~~~~~
./rtl.h:1293:51: note: expanded from macro 'REG_EXPR'
#define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:925:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_ATTRS (new_rtx) = get_reg_attrs (REG_EXPR (reg),
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:981:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_OFFSET (x) && CONST_INT_P (MEM_OFFSET (x)))
          ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:981:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_OFFSET (x) && CONST_INT_P (MEM_OFFSET (x)))
                                         ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:376:35: note: expanded from macro 'CONST_INT_P'
#define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)
                                  ^
./rtl.h:349:45: note: expanded from macro 'GET_CODE'
#define GET_CODE(RTX)       ((enum rtx_code) (RTX)->code)
                                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:981:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_OFFSET (x) && CONST_INT_P (MEM_OFFSET (x)))
          ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:983:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
                           ^~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:983:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
                                                 ^~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:983:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
                                                 ^~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:983:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);
                           ^~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:982:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_ATTRS (reg)
        ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:989:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (REG_ATTRS (x))
          ^~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1025:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              = get_reg_attrs (MEM_EXPR (mem),
                               ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1025:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              = get_reg_attrs (MEM_EXPR (mem),
                               ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1026:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                               INTVAL (XEXP (x, 1)));
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1024:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            REG_ATTRS (XEXP (x, 0))
            ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1043:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    REG_ATTRS (x)
    ^~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1049:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_ATTRS (XEXP (x, 0)) = get_reg_attrs (t, 0);
        ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1051:2: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_ATTRS (XEXP (x, 1))
        ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1051:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_ATTRS (XEXP (x, 1))
                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1255:35: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                                  ^~~
./rtl.h:730:42: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                                         ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1069:58: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            REG_ATTRS (XEXP (y, 0)) = get_reg_attrs (t, INTVAL (XEXP (y, 1)));
                                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1069:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            REG_ATTRS (XEXP (y, 0)) = get_reg_attrs (t, INTVAL (XEXP (y, 1)));
            ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1103:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      REG_USERVAR_P (XEXP (reg, 1)) = 1;
                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1065:38: note: expanded from macro 'REG_USERVAR_P'
  (RTL_FLAG_CHECK1("REG_USERVAR_P", (RTX), REG)->volatil)
                                     ^~~
./rtl.h:692:45: note: expanded from macro 'RTL_FLAG_CHECK1'
#define RTL_FLAG_CHECK1(NAME, RTX, C1)                                  (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1161:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (CODE_LABEL_NUMBER (x) < first_label_num)
      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1162:23: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    first_label_num = CODE_LABEL_NUMBER (x);
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1333:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          == SUBREG_BYTE (x));
             ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1391:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                    MEM_ADDR_SPACE (op)))
                                                    ^~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1391:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                                    MEM_ADDR_SPACE (op)))
                                                    ^~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1477:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  expr = MEM_EXPR (mem);
         ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1477:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  expr = MEM_EXPR (mem);
         ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1479:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_OFFSET (mem) == NULL_RTX
         ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1479:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || MEM_OFFSET (mem) == NULL_RTX
         ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1480:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      || !CONST_INT_P (MEM_OFFSET (mem)))
                       ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:376:35: note: expanded from macro 'CONST_INT_P'
#define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)
                                  ^
./rtl.h:349:45: note: expanded from macro 'GET_CODE'
#define GET_CODE(RTX)       ((enum rtx_code) (RTX)->code)
                                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1483:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  offset = INTVAL (MEM_OFFSET (mem));
                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1483:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  offset = INTVAL (MEM_OFFSET (mem));
                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1544:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  alias_set_type alias = MEM_ALIAS_SET (ref);
                         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1544:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  alias_set_type alias = MEM_ALIAS_SET (ref);
                         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1545:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree expr = MEM_EXPR (ref);
              ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1545:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree expr = MEM_EXPR (ref);
              ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1546:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx offset = MEM_OFFSET (ref);
               ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1546:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx offset = MEM_OFFSET (ref);
               ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1547:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx size = MEM_SIZE (ref);
             ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1547:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx size = MEM_SIZE (ref);
             ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1548:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  unsigned int align = MEM_ALIGN (ref);
                       ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1548:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  unsigned int align = MEM_ALIGN (ref);
                       ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1799:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (ref)
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1831:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
                                        ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1831:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
                                                        ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1832:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                   ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1832:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1833:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1831:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
                                        ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1831:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
                                                        ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1832:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                   ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1832:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1833:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1831:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1841:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1841:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1842:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem),
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1842:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem),
                                                     ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1843:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ALIGN (mem), addrspace, GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1841:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1841:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1842:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem),
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1842:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem),
                                                     ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1843:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ALIGN (mem), addrspace, GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1841:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1851:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1851:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1852:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem), align,
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1852:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem), align,
                                                     ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1853:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1851:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1851:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1852:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem), align,
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1852:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), MEM_SIZE (mem), align,
                                                     ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1853:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1851:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1862:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1862:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
                                                ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1863:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_SIZE (mem), MEM_ALIGN (mem),
                     ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1863:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_SIZE (mem), MEM_ALIGN (mem),
                                     ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1864:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_ADDR_SPACE (mem), GET_MODE (mem));
                     ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1862:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1862:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),
                                                ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1863:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_SIZE (mem), MEM_ALIGN (mem),
                     ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1863:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_SIZE (mem), MEM_ALIGN (mem),
                                     ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1864:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_ADDR_SPACE (mem), GET_MODE (mem));
                     ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1861:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem)
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1872:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1872:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1873:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   offset, MEM_SIZE (mem), MEM_ALIGN (mem),
                                           ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1873:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   offset, MEM_SIZE (mem), MEM_ALIGN (mem),
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1874:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1872:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1872:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1873:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   offset, MEM_SIZE (mem), MEM_ALIGN (mem),
                                           ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1873:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   offset, MEM_SIZE (mem), MEM_ALIGN (mem),
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1874:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1872:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1882:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1882:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1883:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), size, MEM_ALIGN (mem),
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1883:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), size, MEM_ALIGN (mem),
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1884:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1882:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1882:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
                                                        ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1883:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), size, MEM_ALIGN (mem),
                                   ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1883:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_OFFSET (mem), size, MEM_ALIGN (mem),
                                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1884:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_ADDR_SPACE (mem), GET_MODE (mem));
                                   ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1882:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1900:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  as = MEM_ADDR_SPACE (memref);
       ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1900:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  as = MEM_ADDR_SPACE (memref);
       ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1921:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_COPY_ATTRIBUTES (new_rtx, memref);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1308:4: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
   MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
   ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1921:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_COPY_ATTRIBUTES (new_rtx, memref);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1308:22: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
   MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
                     ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1941:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ATTRS (memref) == 0
          ^~~~~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1942:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (MEM_EXPR (memref) == NULL
              ^~~~~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1942:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (MEM_EXPR (memref) == NULL
              ^~~~~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1943:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_OFFSET (memref) == NULL
                 ^~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1943:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_OFFSET (memref) == NULL
                 ^~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1944:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_SIZE (memref) == size
                 ^~~~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1944:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_SIZE (memref) == size
                 ^~~~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1945:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_ALIGN (memref) == align))
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1945:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_ALIGN (memref) == align))
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1949:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      MEM_COPY_ATTRIBUTES (new_rtx, memref);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1308:4: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
   MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
   ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1949:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      MEM_COPY_ATTRIBUTES (new_rtx, memref);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1308:22: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
   MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
                     ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1953:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align,
                     ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1954:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_ADDR_SPACE (memref), mmode);
                     ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1953:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align,
                     ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1954:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MEM_ADDR_SPACE (memref), mmode);
                     ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1952:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx)
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1971:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx memoffset = MEM_OFFSET (memref);
                  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1971:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx memoffset = MEM_OFFSET (memref);
                  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1973:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  unsigned int memalign = MEM_ALIGN (memref);
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1973:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  unsigned int memalign = MEM_ALIGN (memref);
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1974:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  addr_space_t as = MEM_ADDR_SPACE (memref);
                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:1974:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  addr_space_t as = MEM_ADDR_SPACE (memref);
                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2007:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                               plus_constant (XEXP (addr, 1), offset));
                                              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:474:44: note: expanded from macro 'gen_rtx_LO_SUM'
  gen_rtx_fmt_ee (LO_SUM, (MODE), (ARG0), (ARG1))
                                           ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2035:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (MEM_SIZE (memref))
           ^~~~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2035:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (MEM_SIZE (memref))
           ^~~~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2036:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    size = plus_constant (MEM_SIZE (memref), -offset);
                          ^~~~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2036:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    size = plus_constant (MEM_SIZE (memref), -offset);
                          ^~~~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2038:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
                                       ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2038:64: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
                                                               ^~~~~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2038:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
                                       ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2038:64: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
                                                               ^~~~~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2038:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2068:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  addr_space_t as = MEM_ADDR_SPACE (memref);
                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2068:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  addr_space_t as = MEM_ADDR_SPACE (memref);
                    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2098:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
                     ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2098:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
                                             ^~~~~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2098:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
                     ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2098:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,
                                             ^~~~~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2099:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),
                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2097:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx)
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2135:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree expr = MEM_EXPR (new_rtx);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2135:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tree expr = MEM_EXPR (new_rtx);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2136:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx memoffset = MEM_OFFSET (new_rtx);
                  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2136:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx memoffset = MEM_OFFSET (new_rtx);
                  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2204:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       MEM_ALIGN (new_rtx),
                                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2205:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       MEM_ADDR_SPACE (new_rtx), mode);
                                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2204:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       MEM_ALIGN (new_rtx),
                                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2205:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       MEM_ADDR_SPACE (new_rtx), mode);
                                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2203:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (new_rtx) = get_mem_attrs (0, expr, memoffset, GEN_INT (size),
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2232:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (rd) = get_mem_attrs (new_alias_set (), d, const0_rtx,
  ^~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2253:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  alias = MEM_ALIAS_SET (DECL_RTL (expr));
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2253:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  alias = MEM_ALIAS_SET (DECL_RTL (expr));
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2262:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    offset = XEXP (addr, 1);
             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2265:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                   ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2265:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2265:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                   ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2265:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   MEM_SIZE (mem), MEM_ALIGN (mem),
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2264:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  MEM_ATTRS (mem) = get_mem_attrs (alias, expr, offset,
  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2301:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = first; insn; insn = NEXT_INSN (insn))
                                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2317:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (insn = first; insn; insn = NEXT_INSN (insn))
                                    ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2352:25: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = insn; p; p = NEXT_INSN (p))
                        ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2355:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reset_used_flags (PATTERN (p));
                          ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2356:20: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reset_used_flags (REG_NOTES (p));
                          ^~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2515:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = get_insns (); p; p = NEXT_INSN (p))
                                ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2518:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reset_used_flags (PATTERN (p));
                          ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2519:20: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reset_used_flags (REG_NOTES (p));
                          ^~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2523:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            rtx q, sequence = PATTERN (p);
                              ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2529:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                reset_used_flags (PATTERN (q));
                                  ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2530:21: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
                reset_used_flags (REG_NOTES (q));
                                  ^~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2535:33: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (p = get_insns (); p; p = NEXT_INSN (p))
                                ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2538:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        verify_rtx_sharing (PATTERN (p), p);
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2539:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        verify_rtx_sharing (REG_NOTES (p), p);
                            ^~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2549:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (; insn; insn = NEXT_INSN (insn))
                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2552:39: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));
                                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2552:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));
        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2553:41: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));
                                               ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2553:2: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        REG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));
        ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2912:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (!PREV_INSN (insn));
               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2929:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (!NEXT_INSN (insn));
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2966:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = XVECEXP (PATTERN (insn), 0, 0);
                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2993:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            XVECLEN (PATTERN (insn), 0) - 1);
                                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:712:54: note: expanded from macro 'XVECEXP'
#define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
                                                          ^
./rtl.h:597:48: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:2992:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = XVECEXP (PATTERN (insn), 0,
                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3037:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3040:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = XVECEXP (PATTERN (insn), 0, 0);
                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3054:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3057:46: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);
                                                    ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:712:54: note: expanded from macro 'XVECEXP'
#define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
                                                          ^
./rtl.h:597:48: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3057:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);
                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3071:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3088:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3091:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (NOTE_INSN_BASIC_BLOCK_P (insn))
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3106:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3123:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3126:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (NOTE_INSN_BASIC_BLOCK_P (insn))
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3141:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3157:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3174:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3191:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3209:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = PREV_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3234:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3251:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3266:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3281:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3297:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = label; insn != 0 && !INSN_P (insn); insn = NEXT_INSN (insn))
                                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3407:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    LABEL_NUSES (XEXP (x, 0))++;
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3433:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx before = PREV_INSN (trial);
               ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3434:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx after = NEXT_INSN (trial);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3459:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      after = NEXT_INSN (after);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3471:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && rtx_equal_p (PATTERN (insn_last), pat))
                          ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3473:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!NEXT_INSN (insn_last))
           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3475:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn_last = NEXT_INSN (insn_last);
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3483:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = insn_last; insn ; insn = PREV_INSN (insn))
                                       ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3487:21: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          mark_jump_label (PATTERN (insn), insn, 0);
                           ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3507:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = insn_last; insn ; insn = PREV_INSN (insn))
                                           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3510:16: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
            rtx *p = &CALL_INSN_FUNCTION_USAGE (insn);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3513:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
            *p = CALL_INSN_FUNCTION_USAGE (trial);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3523:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (trial); note; note = XEXP (note, 1))
              ^~~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3523:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (trial); note; note = XEXP (note, 1))
                                              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3533:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))
                                                          ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3541:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))
                                                          ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3574:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            mark_label_nuses (PATTERN (insn));
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3576:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = PREV_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3580:45: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  tem = emit_insn_after_setloc (seq, trial, INSN_LOCATOR (trial));
                                            ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3591:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (tem = NEXT_INSN (before); tem != after; tem = NEXT_INSN (tem))
             ^~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3591:54: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (tem = NEXT_INSN (before); tem != after; tem = NEXT_INSN (tem))
                                                     ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3593:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      tem = try_split (PATTERN (tem), tem, 1);
                       ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3598:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    ? (after ? PREV_INSN (after) : last_insn)
               ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3599:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    : NEXT_INSN (before);
      ^~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3613:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = pattern;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3614:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (insn) = -1;
  ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3615:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = NULL;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3616:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_LOCATOR (insn) = curr_insn_locator ();
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3617:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (insn) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3646:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = pattern;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3647:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (insn) = -1;
  ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3648:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = NULL;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3649:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_LOCATOR (insn) = curr_insn_locator ();
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3650:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (insn) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3665:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = pattern;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3666:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (insn) = -1;
  ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3667:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = NULL;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3668:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  JUMP_LABEL (insn) = NULL;
  ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3669:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_LOCATOR (insn) = curr_insn_locator ();
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3670:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (insn) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3685:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = pattern;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3686:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (insn) = -1;
  ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3687:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = NULL;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3688:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  CALL_INSN_FUNCTION_USAGE (insn) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3689:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_LOCATOR (insn) = curr_insn_locator ();
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3690:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (insn) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3701:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (insn) = last_insn;
  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3702:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (insn) = 0;
  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3705:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    NEXT_INSN (last_insn) = insn;
    ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3721:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx next = NEXT_INSN (after);
             ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3725:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (insn) = next;
  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3726:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (insn) = after;
  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3730:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (next) = insn;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3732:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3732:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;
                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3752:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (bb = BLOCK_FOR_INSN (after)))
               ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3754:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set_block_for_insn (insn, bb);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3762:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && !NOTE_INSN_BASIC_BLOCK_P (insn))
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3766:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (after) = insn;
  ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3769:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx sequence = PATTERN (after);
                     ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3770:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3783:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx prev = PREV_INSN (before);
             ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3787:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (insn) = prev;
  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3788:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (insn) = before;
  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3792:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (prev) = insn;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3795:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx sequence = PATTERN (prev);
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3796:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3818:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
    bb = BLOCK_FOR_INSN (before);
         ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3822:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set_block_for_insn (insn, bb);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3830:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  || NOTE_INSN_BASIC_BLOCK_P (insn));
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3833:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (before) = insn;
  ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3835:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (XVECEXP (PATTERN (before), 0, 0)) = insn;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3835:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (XVECEXP (PATTERN (before), 0, 0)) = insn;
                        ^~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3844:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  df_insn_delete (BLOCK_FOR_INSN (insn), INSN_UID (insn));
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3846:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_KIND (insn) = NOTE_INSN_DELETED;
  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3855:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx next = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3856:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx prev = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3864:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (prev) = next;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3867:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx sequence = PATTERN (prev);
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3868:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3889:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (next) = prev;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3891:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3891:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;
                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3909:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (bb = BLOCK_FOR_INSN (insn)))
               ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3934:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (CALL_INSN_FUNCTION_USAGE (call_insn))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3938:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (link = CALL_INSN_FUNCTION_USAGE (call_insn); XEXP (link, 1) != 0;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3938:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (link = CALL_INSN_FUNCTION_USAGE (call_insn); XEXP (link, 1) != 0;
                                                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3939:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           link = XEXP (link, 1))
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3942:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      XEXP (link, 1) = call_fusage;
      ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3945:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
    CALL_INSN_FUNCTION_USAGE (call_insn) = call_fusage;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3957:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    NEXT_INSN (from) = 0;
    ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3975:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (PREV_INSN (from))
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3976:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3976:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);
               ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3976:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);
                                   ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3977:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (to))
      ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3978:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3978:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);
               ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3978:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);
                                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3980:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    last_insn = PREV_INSN (from);
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3982:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    first_insn = NEXT_INSN (to);
                 ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3985:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (after))
      ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3986:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (NEXT_INSN (after)) = to;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3986:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (NEXT_INSN (after)) = to;
               ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3988:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (to) = NEXT_INSN (after);
  ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3988:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (to) = NEXT_INSN (after);
                   ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3989:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (from) = after;
  ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3990:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (after) = from;
  ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:3999:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx prev = PREV_INSN (from);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4005:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (bb = BLOCK_FOR_INSN (after)))
               ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4011:14: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (bb2 = BLOCK_FOR_INSN (from)))
                    ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4021:27: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (x = from; x != NEXT_INSN (to); x = NEXT_INSN (x))
                          ^~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4021:47: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (x = from; x != NEXT_INSN (to); x = NEXT_INSN (x))
                                              ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4078:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4122:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4166:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4210:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4269:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_KIND (note) = subtype;
  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4270:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (note) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4271:12: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));
           ^~~~~~~~~~~~~~~~
./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
#define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
                                ^                  ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4286:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
    bb = BLOCK_FOR_INSN (after);
         ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4291:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4291:51: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
                                                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4294:6: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set_block_for_insn (last, bb);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4299:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_block_for_insn (last, bb);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4306:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
                       ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4306:49: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))
                                                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4309:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  after_after = NEXT_INSN (after);
                ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4311:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (after) = first;
  ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4312:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (first) = after;
  ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4313:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (last) = after_after;
  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4315:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    PREV_INSN (after_after) = last;
    ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4513:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_KIND (note) = subtype;
  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4514:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (note) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4515:12: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));
           ^~~~~~~~~~~~~~~~
./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
#define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
                                ^                  ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4529:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  after = NEXT_INSN (after);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4532:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (after) && !INSN_LOCATOR (after))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4533:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (after) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4536:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      after = NEXT_INSN (after);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4548:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    prev = PREV_INSN (prev);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4551:52: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));
                                                   ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4565:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  after = NEXT_INSN (after);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4568:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (after) && !INSN_LOCATOR (after))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4569:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (after) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4572:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      after = NEXT_INSN (after);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4584:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    prev = PREV_INSN (prev);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4587:57: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_jump_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));
                                                        ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4601:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  after = NEXT_INSN (after);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4604:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (after) && !INSN_LOCATOR (after))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4605:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (after) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4608:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      after = NEXT_INSN (after);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4620:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    prev = PREV_INSN (prev);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4623:57: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_call_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));
                                                        ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4637:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  after = NEXT_INSN (after);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4640:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (after) && !INSN_LOCATOR (after))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4641:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (after) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4644:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      after = NEXT_INSN (after);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4654:58: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_debug_insn_after_setloc (pattern, after, INSN_LOCATOR (after));
                                                         ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4663:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx first = PREV_INSN (before);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4672:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    first = NEXT_INSN (first);
            ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4675:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (first) && !INSN_LOCATOR (first))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4676:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (first) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4679:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      first = NEXT_INSN (first);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4691:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    next = PREV_INSN (next);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4694:54: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_insn_before_setloc (pattern, before, INSN_LOCATOR (next));
                                                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4703:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx first = PREV_INSN (before);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4709:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  first = NEXT_INSN (first);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4712:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (first) && !INSN_LOCATOR (first))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4713:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (first) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4716:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      first = NEXT_INSN (first);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4728:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    next = PREV_INSN (next);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4731:59: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_jump_insn_before_setloc (pattern, before, INSN_LOCATOR (next));
                                                          ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4740:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx first = PREV_INSN (before);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4746:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  first = NEXT_INSN (first);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4749:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (first) && !INSN_LOCATOR (first))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4750:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (first) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4753:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      first = NEXT_INSN (first);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4766:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    next = PREV_INSN (next);
           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4769:59: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_call_insn_before_setloc (pattern, before, INSN_LOCATOR (next));
                                                          ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4778:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx first = PREV_INSN (before);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4784:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  first = NEXT_INSN (first);
          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4787:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (active_insn_p (first) && !INSN_LOCATOR (first))
                                    ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4788:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (first) = loc;
        ^~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4791:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      first = NEXT_INSN (first);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4802:60: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return emit_debug_insn_before_setloc (pattern, before, INSN_LOCATOR (before));
                                                           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4833:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4879:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:4921:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx next = NEXT_INSN (insn);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5016:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_DATA (note) = NOTE_DATA (orig);
  ^~~~~~~~~~~~~~~~
./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
#define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
                                ^                  ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5016:22: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_DATA (note) = NOTE_DATA (orig);
                     ^~~~~~~~~~~~~~~~
./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
#define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
                                ^                  ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5017:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_KIND (note) = NOTE_KIND (orig);
  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5017:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_KIND (note) = NOTE_KIND (orig);
                     ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5018:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (note) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5034:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NOTE_KIND (note) = kind;
  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5035:12: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));
           ^~~~~~~~~~~~~~~~
./rtl.h:875:33: note: expanded from macro 'NOTE_DATA'
#define NOTE_DATA(INSN)         RTL_CHECKC1 (INSN, 4, NOTE)
                                ^                  ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5036:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BLOCK_FOR_INSN (note) = NULL;
  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5050:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      return emit_clobber (XEXP (x, 1));
                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5078:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      return emit_use (XEXP (x, 1));
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5162:10: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return REG_NOTES (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5279:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last));
                             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5279:55: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last));
                                                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5521:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      orig_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (orig);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1185:37: note: expanded from macro 'ASM_OPERANDS_INPUT_VEC'
#define ASM_OPERANDS_INPUT_VEC(RTX) XCVEC (RTX, 3, ASM_OPERANDS)
                                    ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5522:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      copy_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (copy);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1185:37: note: expanded from macro 'ASM_OPERANDS_INPUT_VEC'
#define ASM_OPERANDS_INPUT_VEC(RTX) XCVEC (RTX, 3, ASM_OPERANDS)
                                    ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5523:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      orig_asm_constraints_vector = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (orig);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1186:48: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT_VEC'
#define ASM_OPERANDS_INPUT_CONSTRAINT_VEC(RTX) XCVEC (RTX, 4, ASM_OPERANDS)
                                               ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5524:37: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      copy_asm_constraints_vector = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (copy);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1186:48: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT_VEC'
#define ASM_OPERANDS_INPUT_CONSTRAINT_VEC(RTX) XCVEC (RTX, 4, ASM_OPERANDS)
                                               ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5983:45: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      new_rtx = emit_insn_after (copy_insn (PATTERN (insn)), after);
                                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5987:50: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      new_rtx = emit_jump_insn_after (copy_insn (PATTERN (insn)), after);
                                                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5991:51: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      new_rtx = emit_debug_insn_after (copy_insn (PATTERN (insn)), after);
                                                  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5995:50: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      new_rtx = emit_call_insn_after (copy_insn (PATTERN (insn)), after);
                                                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5996:11: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (CALL_INSN_FUNCTION_USAGE (insn))
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5998:17: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          = copy_insn (CALL_INSN_FUNCTION_USAGE (insn));
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:5997:2: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        CALL_INSN_FUNCTION_USAGE (new_rtx)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6011:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  mark_jump_label (PATTERN (new_rtx), new_rtx, 0);
                   ^~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6013:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_LOCATOR (new_rtx) = INSN_LOCATOR (insn);
  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6013:28: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_LOCATOR (new_rtx) = INSN_LOCATOR (insn);
                           ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6023:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
              ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6023:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6033:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (new_rtx) = INSN_CODE (insn);
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
emit-rtl.c:6033:25: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  INSN_CODE (new_rtx) = INSN_CODE (insn);
                        ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
454 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fwprop.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fwprop.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from fwprop.c:33:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from fwprop.c:33:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from fwprop.c:33:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from fwprop.c:33:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from fwprop.c:33:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
fwprop.c:233:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:233:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:356:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (GET_MODE (x))
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:357:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && INTVAL (XEXP (x, 1)) >= 0)
                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:359:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            HOST_WIDE_INT shift = INTVAL (XEXP (x, 1));
                                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:361:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            XEXP (x, 1) = gen_int_mode ((HOST_WIDE_INT) 1 << shift,
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:374:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        x = XEXP (x, 1);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:498:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = XEXP (x, 1);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:501:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:509:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = XEXP (x, 1);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:513:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:521:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = XEXP (x, 1);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:522:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op2 = XEXP (x, 2);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:527:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1) && op2 == XEXP (x, 2))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:527:62: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1) && op2 == XEXP (x, 2))
                                                             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:543:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                     SUBREG_BYTE (x));
                                     ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:573:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          MEM_ADDR_SPACE (x),
                                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:573:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          MEM_ADDR_SPACE (x),
                                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:583:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          op1 = XEXP (x, 1);
                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:590:44: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))
                                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:700:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = from; insn != to; insn = NEXT_INSN (insn))
                                       ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:728:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block def_bb = BLOCK_FOR_INSN (def_insn);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:729:27: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block target_bb = BLOCK_FOR_INSN (target_insn);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:794:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx def_set = single_set (def_insn);
                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:794:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx def_set = single_set (def_insn);
                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:800:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (def_insn) == target_insn
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:926:17: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                               insn, BLOCK_FOR_INSN (insn),
                                     ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:952:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:952:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:953:41: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bool speed = optimize_bb_for_speed_p (BLOCK_FOR_INSN (insn));
                                        ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:961:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    old_cost = rtx_cost (SET_SRC (set), SET, speed);
                         ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:982:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && rtx_cost (SET_SRC (set), SET, speed) > old_cost)
                        ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1112:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (def_set);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1129:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (def_set);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1154:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = SET_SRC (def_set);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1155:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  use_pat = PATTERN (use_insn);
            ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1163:38: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  speed_p = optimize_bb_for_speed_p (BLOCK_FOR_INSN (use_insn));
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1178:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      asm_operands = SET_SRC (use_pat);
                     ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1192:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            asm_operands = SET_SRC (XVECEXP (use_pat, 0, i));
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1202:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (i = 0; i < ASM_OPERANDS_INPUT_LENGTH (asm_operands); i++)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1204:14: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      loc = &ASM_OPERANDS_INPUT (asm_operands, i);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1187:36: note: expanded from macro 'ASM_OPERANDS_INPUT'
#define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP (RTX, 3, N, ASM_OPERANDS)
                                   ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1224:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx use_set = single_set (use_insn);
                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1224:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx use_set = single_set (use_insn);
                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1230:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (use_insn) < 0)
      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1231:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    asm_use = asm_noperands (PATTERN (use_insn));
                             ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1244:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (SUBREG_BYTE (SET_DEST (def_set)) != SUBREG_BYTE (reg)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1244:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (SUBREG_BYTE (SET_DEST (def_set)) != SUBREG_BYTE (reg)
                                              ^~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1259:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = SET_SRC (def_set);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1272:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx old_rtx = note ? XEXP (note, 0) : SET_SRC (use_set);
                                                ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1292:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      loc = &INSN_VAR_LOCATION_LOC (use_insn);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1316:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                           optimize_bb_for_speed_p (BLOCK_FOR_INSN (use_insn)));
                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1350:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father)
      ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1350:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father)
                                      ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1358:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    parent = PATTERN (use_insn);
             ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1366:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  def_set = single_set (def_insn);
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1366:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  def_set = single_set (def_insn);
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1436:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            || DF_REF_BB (use)->loop_father == NULL
               ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1438:21: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            || loop_outer (DF_REF_BB (use)->loop_father) == NULL)
                           ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1479:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && DF_REF_BB (use)->loop_father != NULL
               ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
fwprop.c:1481:21: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && loop_outer (DF_REF_BB (use)->loop_father) != NULL)
                           ^~~~~~~~~~~~~~~
./df.h:654:52: note: expanded from macro 'DF_REF_BB'
                        (REF)->artificial_ref.bb : BLOCK_FOR_INSN (DF_REF_INSN(REF)))
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
65 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getopt1.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getopt1.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o final.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  final.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from final.c:58:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from final.c:58:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from final.c:58:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from final.c:58:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from final.c:58:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
final.c:404:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        body = PATTERN (insn);
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:415:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        body = PATTERN (insn);
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:566:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (CODE_LABEL_NUMBER (label) <= max_labelno)
      ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:567:12: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return LABEL_TO_ALIGNMENT (label);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:574:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (CODE_LABEL_NUMBER (label) <= max_labelno)
      ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:575:12: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return LABEL_TO_MAX_SKIP (label);
           ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:625:25: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      known_align_log = LABEL_TO_ALIGNMENT (align_label);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:656:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  seq = NEXT_INSN (PREV_INSN (branch));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:656:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  seq = NEXT_INSN (PREV_INSN (branch));
                   ^~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:665:10: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  dest = JUMP_LABEL (branch);
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:802:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_TO_ALIGNMENT (label) = max_log;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:803:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_TO_MAX_SKIP (label) = max_skip;
      ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:903:49: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (), i = 1; insn; insn = NEXT_INSN (insn))
                                                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:917:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          log = LABEL_TO_ALIGNMENT (insn);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:921:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
              max_skip = LABEL_TO_MAX_SKIP (insn);
                         ^~~~~~~~~~~~~~~~~~~~~~~~
final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:948:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_TO_ALIGNMENT (insn) = max_log;
          ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:949:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_TO_MAX_SKIP (insn) = max_skip;
          ^~~~~~~~~~~~~~~~~~~~~~~~
final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:958:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
               label = NEXT_INSN (label))
                       ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:992:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (; seq; seq = PREV_INSN (seq))
                    ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:996:30: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      log = (LABEL_P (seq) ? LABEL_TO_ALIGNMENT (seq) : 0);
                             ^~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1066:58: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn_current_address += insn_lengths[uid], insn = NEXT_INSN (insn))
                                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1074:14: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int log = LABEL_TO_ALIGNMENT (insn);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1091:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      body = PATTERN (insn);
             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1124:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  || asm_noperands (PATTERN (XVECEXP (body, 0, i))) >= 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1125:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                inner_length = (asm_insn_count (PATTERN (inner_insn))
                                                ^~~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1168:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           insn = NEXT_INSN (insn))
                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1180:18: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
              int log = LABEL_TO_ALIGNMENT (insn);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1319:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  body = PATTERN (insn);
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1340:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              body = PATTERN (insn);
                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1685:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = first; insn; insn = NEXT_INSN (insn))
                                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1755:22: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  const char *name = LABEL_NAME (insn);
                     ^~~~~~~~~~~~~~~~~
./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
#define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
                        ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1784:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  x = PATTERN (insn);
      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1793:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = COND_EXEC_CODE (x);
              ^~~~~~~~~~~~~~~~~~
./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
#define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
                            ^           ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1799:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = XEXP (x, 1);
              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1834:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return NEXT_INSN (insn);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1839:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      switch (NOTE_KIND (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1864:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                     ASM_COMMENT_START, NOTE_BASIC_BLOCK (insn)->index);
                                        ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1874:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          discriminator = NOTE_BASIC_BLOCK (insn)->discriminator;
                          ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:880:32: note: expanded from macro 'NOTE_BASIC_BLOCK'
#define NOTE_BASIC_BLOCK(INSN)  XCBBDEF (INSN, 4, NOTE)
                                ^              ~
./rtl.h:744:32: note: expanded from macro 'XCBBDEF'
#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1880:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  NOTE_EH_HANDLER (insn));
                                  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./defaults.h:172:52: note: expanded from macro 'ASM_OUTPUT_DEBUG_LABEL'
  (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM)
                                                   ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1885:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  NOTE_EH_HANDLER (insn));
                                  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:879:31: note: expanded from macro 'NOTE_EH_HANDLER'
#define NOTE_EH_HANDLER(INSN)   XCINT (INSN, 4, NOTE)
                                ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./defaults.h:172:52: note: expanded from macro 'ASM_OUTPUT_DEBUG_LABEL'
  (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM)
                                                   ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1938:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              int n = BLOCK_NUMBER (NOTE_BLOCK (insn));
                                    ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:1975:42: note: expanded from macro 'BLOCK_NUMBER'
#define BLOCK_NUMBER(NODE) (BLOCK_CHECK (NODE)->block.block_num)
                                         ^~~~
./tree-check.h:10:36: note: expanded from macro 'BLOCK_CHECK'
#define BLOCK_CHECK(t)  TREE_CHECK (t, BLOCK)
                                    ^
./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
#define TREE_CHECK(T, CODE)                     (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1949:26: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              TREE_ASM_WRITTEN (NOTE_BLOCK (insn)) = 1;
                                ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:1286:34: note: expanded from macro 'TREE_ASM_WRITTEN'
#define TREE_ASM_WRITTEN(NODE) ((NODE)->base.asm_written_flag)
                                 ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1955:35: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = block_nonartificial_location (NOTE_BLOCK (insn));
                                                ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1972:30: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              int n = BLOCK_NUMBER (NOTE_BLOCK (insn));
                                    ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:1975:42: note: expanded from macro 'BLOCK_NUMBER'
#define BLOCK_NUMBER(NODE) (BLOCK_CHECK (NODE)->block.block_num)
                                         ^~~~
./tree-check.h:10:36: note: expanded from macro 'BLOCK_CHECK'
#define BLOCK_CHECK(t)  TREE_CHECK (t, BLOCK)
                                    ^
./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
#define TREE_CHECK(T, CODE)                     (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:1986:47: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              tree outer_block = BLOCK_SUPERCONTEXT (NOTE_BLOCK (insn));
                                                     ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:1965:48: note: expanded from macro 'BLOCK_SUPERCONTEXT'
#define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)
                                               ^~~~
./tree-check.h:10:36: note: expanded from macro 'BLOCK_CHECK'
#define BLOCK_CHECK(t)  TREE_CHECK (t, BLOCK)
                                    ^
./tree.h:912:32: note: expanded from macro 'TREE_CHECK'
#define TREE_CHECK(T, CODE)                     (T)
                                                 ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2007:39: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          ASM_OUTPUT_DEBUG_LABEL (file, "L", CODE_LABEL_NUMBER (insn));
                                             ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./defaults.h:172:52: note: expanded from macro 'ASM_OUTPUT_DEBUG_LABEL'
  (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM)
                                                   ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2031:11: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (CODE_LABEL_NUMBER (insn) <= max_labelno)
          ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2033:16: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int align = LABEL_TO_ALIGNMENT (insn);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
final.c:556:16: note: expanded from macro 'LABEL_TO_ALIGNMENT'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].alignment)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2035:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int max_skip = LABEL_TO_MAX_SKIP (insn);
                         ^~~~~~~~~~~~~~~~~~~~~~~~
final.c:559:16: note: expanded from macro 'LABEL_TO_MAX_SKIP'
  (label_align[CODE_LABEL_NUMBER (LABEL) - min_labelno].max_skip)
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2038:17: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (align && NEXT_INSN (insn))
                       ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2055:54: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!DECL_IGNORED_P (current_function_decl) && LABEL_NAME (insn))
                                                     ^~~~~~~~~~~~~~~~~
./rtl.h:973:25: note: expanded from macro 'LABEL_NAME'
#define LABEL_NAME(RTX) XCSTR (RTX, 7, CODE_LABEL)
                        ^           ~
./rtl.h:738:32: note: expanded from macro 'XCSTR'
#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2089:38: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          ASM_OUTPUT_CASE_LABEL (file, "L", CODE_LABEL_NUMBER (insn),
                                            ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./config/elfos.h:149:51: note: expanded from macro 'ASM_OUTPUT_CASE_LABEL'
        (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM);                  \
                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2100:45: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
        targetm.asm_out.internal_label (file, "L", CODE_LABEL_NUMBER (insn));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2105:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        rtx body = PATTERN (insn);
                   ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2178:16: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      (file, CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 0, idx), 0)));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./config/i386/i386.h:2093:38: note: expanded from macro 'ASM_OUTPUT_ADDR_VEC_ELT'
  ix86_output_addr_vec_elt ((FILE), (VALUE))
                                     ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2189:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 1, idx), 0)),
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./config/i386/i386.h:2098:39: note: expanded from macro 'ASM_OUTPUT_ADDR_DIFF_ELT'
  ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2189:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 1, idx), 0)),
                                                ^              ~
./rtl.h:712:39: note: expanded from macro 'XVECEXP'
#define XVECEXP(RTX, N, M)      RTVEC_ELT (XVEC (RTX, N), M)
                                           ^          ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:702:35: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./config/i386/i386.h:2098:39: note: expanded from macro 'ASM_OUTPUT_ADDR_DIFF_ELT'
  ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2190:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       CODE_LABEL_NUMBER (XEXP (XEXP (body, 0), 0)));
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./config/i386/i386.h:2098:48: note: expanded from macro 'ASM_OUTPUT_ADDR_DIFF_ELT'
  ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))
                                               ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2226:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                loc = expand_location (ASM_INPUT_SOURCE_LOCATION (body));
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1199:40: note: expanded from macro 'ASM_INPUT_SOURCE_LOCATION'
#define ASM_INPUT_SOURCE_LOCATION(RTX) XCUINT (RTX, 1, ASM_INPUT)
                                       ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2316:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                rtx next = NEXT_INSN (insn);
                           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2342:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        body = PATTERN (insn);
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2599:45: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          current_insn_predicate = COND_EXEC_TEST (PATTERN (insn));
                                                   ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1341:36: note: expanded from macro 'COND_EXEC_TEST'
#define COND_EXEC_TEST(RTX) XCEXP (RTX, 0, COND_EXEC)
                                   ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2637:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 prev = PREV_INSN (prev))
                        ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2653:29: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            if (new_rtx == insn && PATTERN (new_rtx) == body)
                                   ^~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2681:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                t = SYMBOL_REF_DECL (x);
                    ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2701:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    t = SYMBOL_REF_DECL (x);
                        ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2731:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return NEXT_INSN (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2841:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      int offset = SUBREG_BYTE (x);
                   ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2861:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 SUBREG_BYTE (x));
                                 ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2875:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            offset = SUBREG_BYTE (x);
                     ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:2895:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      XEXP (x, 1) = walk_alter_subreg (&XEXP (x, 1), changed);
      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3112:17: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      int num = INSN_CODE (debug_insn);
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3141:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return REG_EXPR (op);
           ^~~~~~~~~~~~~
./rtl.h:1293:24: note: expanded from macro 'REG_EXPR'
#define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
                       ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3141:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return REG_EXPR (op);
           ^~~~~~~~~~~~~
./rtl.h:1293:51: note: expanded from macro 'REG_EXPR'
#define REG_EXPR(RTX) (REG_ATTRS (RTX) == 0 ? 0 : REG_ATTRS (RTX)->decl)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1255:24: note: expanded from macro 'REG_ATTRS'
#define REG_ATTRS(RTX) X0REGATTR (RTX, 2)
                       ^               ~
./rtl.h:730:29: note: expanded from macro 'X0REGATTR'
#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3145:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (op) != 0)
      ^~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3145:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (op) != 0)
      ^~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3146:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return MEM_EXPR (op);
           ^~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3146:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return MEM_EXPR (op);
           ^~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3158:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && (expr = get_mem_expr_from_op (XEXP (op, 1), &inner_addressp)))
                                            ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3195:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (REG_P (op) && ORIGINAL_REGNO (op)
                             ^~~~~~~~~~~~~~~~~~~
./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
#define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
                            ^            ~
./rtl.h:719:28: note: expanded from macro 'X0UINT'
#define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3196:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && ORIGINAL_REGNO (op) != REGNO (op))
                  ^~~~~~~~~~~~~~~~~~~
./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
#define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
                            ^            ~
./rtl.h:719:28: note: expanded from macro 'X0UINT'
#define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3197:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        fprintf (asm_out_file, " tmp%i", ORIGINAL_REGNO (op));
                                         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1047:29: note: expanded from macro 'ORIGINAL_REGNO'
#define ORIGINAL_REGNO(RTX) X0UINT (RTX, 1)
                            ^            ~
./rtl.h:719:28: note: expanded from macro 'X0UINT'
#define X0UINT(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_uint)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3437:7: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && NOTE_KIND (x) == NOTE_INSN_DELETED_LABEL))
             ^~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3461:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      t = SYMBOL_REF_DECL (x);
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3535:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (SYMBOL_REF_DECL (x))
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3537:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          mark_decl_referenced (SYMBOL_REF_DECL (x));
                                ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3538:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          assemble_external (SYMBOL_REF_DECL (x));
                             ^~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3573:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (CONST_DOUBLE_HIGH (x))
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
final.c:3598:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          output_addr_const (file, XEXP (x, 1));
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3607:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || INTVAL (XEXP (x, 1)) >= 0)
                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3609:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          output_addr_const (file, XEXP (x, 1));
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3622:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) >= 0)
                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3625:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        output_addr_const (file, XEXP (x, 1));
                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3629:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          output_addr_const (file, XEXP (x, 1));
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3928:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          *second = GEN_INT (CONST_DOUBLE_HIGH (value));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:2067:51: note: expanded from macro 'GEN_INT'
#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))
                                                  ^
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
final.c:3953:27: warning: shift count >= width of type [-Wshift-count-overflow]
            l[0] |= ((long) (-1) << 32);
                                 ^  ~~
final.c:3955:27: warning: shift count >= width of type [-Wshift-count-overflow]
            l[1] |= ((long) (-1) << 32);
                                 ^  ~~
final.c:3975:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3983:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! SIBLING_CALL_P (XVECEXP (PATTERN (insn), 0, 0)))
                                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:808:39: note: expanded from macro 'SIBLING_CALL_P'
  (RTL_FLAG_CHECK1("SIBLING_CALL_P", (RTX), CALL_INSN)->jump)
                                      ^~~
./rtl.h:692:45: note: expanded from macro 'RTL_FLAG_CHECK1'
#define RTL_FLAG_CHECK1(NAME, RTX, C1)                                  (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3988:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       link = XEXP (link, 1))
              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:3998:34: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! SIBLING_CALL_P (XVECEXP (PATTERN (insn), 0, 0)))
                                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 3 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:808:39: note: expanded from macro 'SIBLING_CALL_P'
  (RTL_FLAG_CHECK1("SIBLING_CALL_P", (RTX), CALL_INSN)->jump)
                                      ^~~
./rtl.h:692:45: note: expanded from macro 'RTL_FLAG_CHECK1'
#define RTL_FLAG_CHECK1(NAME, RTX, C1)                                  (RTX)
                                                                         ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4396:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4398:26: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
              INSN_UID (insn) = CODE_LABEL_NUMBER (insn);
                                ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4410:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4411:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (insn) = NULL;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4412:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (insn) = NULL;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4416:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              (NOTE_KIND (insn) != NOTE_INSN_VAR_LOCATION
               ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4417:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && NOTE_KIND (insn) != NOTE_INSN_BLOCK_BEG
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4418:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
final.c:4419:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && NOTE_KIND (insn) != NOTE_INSN_CFA_RESTORE_STATE)))
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
115 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getpwd.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getpwd.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
getpwd.c:90:27: warning: implicit declaration of function 'getcwd' is invalid in C99 [-Wimplicit-function-declaration]
        for (s = GUESSPATHLEN;  !getcwd (p = XNEWVEC (char, s), s);  s *= 2)
                                 ^
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getruntime.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getruntime.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o getopt.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  getopt.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o genrtl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  genrtl.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
genrtl.c:33:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:48:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:95:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:96:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:97:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XBBDEF (rt, 3) = arg3;
  ^           ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:98:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 4) = arg4;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:99:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 5) = arg5;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:100:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 6) = arg6;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:101:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 7) = arg7;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:122:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:123:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:124:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XBBDEF (rt, 3) = arg3;
  ^           ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:125:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 4) = arg4;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:126:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 5) = arg5;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:127:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 6) = arg6;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:128:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 7) = arg7;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:129:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 8) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:151:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:152:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:153:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XBBDEF (rt, 3) = arg3;
  ^           ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:154:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 4) = arg4;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:155:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 5) = arg5;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:156:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 6) = arg6;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:157:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 7) = arg7;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:158:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 8) = arg8;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:174:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:175:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:176:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 3) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:177:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 4) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:178:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 5) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:179:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 6) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:180:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 7) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:199:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:200:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:201:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XBBDEF (rt, 3) = arg3;
  ^           ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:202:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 4) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:203:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 5) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:204:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 6) = arg4;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:205:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 7) = arg5;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:220:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 1) = arg1;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:240:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:241:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 2) = arg2;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:242:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 3) = arg3;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:243:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 4) = arg4;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:244:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 5) = arg5;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:245:3: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 6) = arg6;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:260:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 1) = arg1;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:277:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 1) = arg1;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:278:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:279:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 3) = arg3;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:280:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 4) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:296:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:297:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:337:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XWINT (rt, 1) = arg1;
  ^          ~
./rtl.h:598:29: note: expanded from macro 'XWINT'
#define XWINT(RTX, N)               ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
genrtl.c:338:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XWINT (rt, 2) = arg2;
  ^          ~
./rtl.h:598:29: note: expanded from macro 'XWINT'
#define XWINT(RTX, N)               ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
genrtl.c:365:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 1) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:366:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 2) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:381:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 1) = arg1;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:395:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 1) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:422:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 1) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:423:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  X0EXP (rt, 2) = NULL_RTX;
  ^          ~
./rtl.h:721:27: note: expanded from macro 'X0EXP'
#define X0EXP(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_rtx)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:439:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:440:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 2) = arg2;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:456:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:457:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 2) = arg2;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:472:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:488:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:489:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 2) = arg2;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:517:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 1) = arg1;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:532:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:549:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 1) = arg1;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:550:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 2) = arg2;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:551:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 3) = arg3;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:566:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 1) = arg1;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:582:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:583:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 2) = arg2;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:599:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:600:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 2) = arg2;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:616:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:617:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 2) = arg2;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:633:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 1) = arg1;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:634:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:651:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 1) = arg1;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:652:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 2) = arg2;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:653:3: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XSTR (rt, 3) = arg3;
  ^         ~
./rtl.h:703:23: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:668:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XVEC (rt, 1) = arg1;
  ^         ~
./rtl.h:705:23: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:683:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XINT (rt, 1) = arg1;
  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
genrtl.c:698:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (rt, 1) = arg1;
  ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
88 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ggc-common.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ggc-common.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
ggc-common.c:775:10: warning: implicit conversion from 'unsigned long long' to 'double' changes value from 18446744073709551615 to 18446744073709551616 [-Wimplicit-int-float-conversion]
  return 0xffffffffffffffff; 
  ~~~~~~ ^~~~~~~~~~~~~~~~~~
1 warning generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o ggc-page.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  ggc-page.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gimple-iterator.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gimple-iterator.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o expr.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  expr.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from expr.c:41:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expr.c:41:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expr.c:41:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expr.c:41:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from expr.c:41:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
expr.c:272:3: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PATTERN (insn) = pat;
  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:297:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            SET_SRC (pat) = mem;
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:302:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            SET_SRC (pat) = mem1;
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:307:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            SET_SRC (pat) = reg;
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:312:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            SET_SRC (pat) = reg;
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:415:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      convert_move (XEXP (to, 1), XEXP (from, 1), unsignedp);
                    ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:415:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      convert_move (XEXP (to, 1), XEXP (from, 1), unsignedp);
                                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:881:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (from));
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:881:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (from));
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                    ^~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                                            ^~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:26: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                    ^~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                                            ^~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:26: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                    ^~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                                            ^~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:38: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                                     ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                    ^~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:887:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (to ? MEM_ALIGN (to) : align, MEM_ALIGN (from));
                                            ^~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:38: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                                     ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:893:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      to_addr_mode = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
                                                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:893:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      to_addr_mode = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
                                                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
               ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
                              ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:26: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
               ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:20: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
                              ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:26: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
               ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
                              ^~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:38: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                                     ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
               ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:32: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1196:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MIN (MEM_ALIGN (x), MEM_ALIGN (y));
                              ^~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:338:38: note: expanded from macro 'MIN'
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
                                     ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1227:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))
                                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1227:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))
                                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1228:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (y)))
                                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1228:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (y)))
                                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1480:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (x));
                                       ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1480:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (x));
                                       ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1482:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (y));
                                       ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1482:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (y));
                                       ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1629:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx offset = XEXP (XVECEXP (orig, 0, i), 1);
                   ^                           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1681:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      HOST_WIDE_INT bytepos = INTVAL (XEXP (XVECEXP (dst, 0, i), 1));
                                      ^                          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1859:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          e = alloc_EXPR_LIST (REG_NOTE_KIND (e), d, XEXP (e, 1));
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1899:59: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        e = alloc_EXPR_LIST (REG_NOTE_KIND (e), copy_to_reg (d), XEXP (e, 1));
                                                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:1999:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (INTVAL (XEXP (XVECEXP (src, 0, start), 1)) == bytepos)
                      ^                              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2018:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (INTVAL (XEXP (XVECEXP (src, 0, finish - 1), 1)) == bytepos)
                      ^                                   ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2039:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      HOST_WIDE_INT bytepos = INTVAL (XEXP (XVECEXP (src, 0, i), 1));
                                      ^                          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2057:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              dest = XEXP (dst, 1);
                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2404:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
                                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2404:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to));
                                       ^~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2490:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (data->to));
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2490:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    = targetm.addr_space.address_mode (MEM_ADDR_SPACE (data->to));
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2660:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MEM_ALIGN (object);
          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2660:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  align = MEM_ALIGN (object);
          ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2668:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (object)))
                                 ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2668:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (object)))
                                 ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./coretypes.h:77:36: note: expanded from macro 'ADDR_SPACE_GENERIC_P'
#define ADDR_SPACE_GENERIC_P(AS) ((AS) == ADDR_SPACE_GENERIC)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2932:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      tree decl = SYMBOL_REF_DECL (XEXP (cplx, 0));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2990:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      MEM_COPY_ATTRIBUTES (ret, x);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1308:4: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
   MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
   ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:2990:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      MEM_COPY_ATTRIBUTES (ret, x);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1308:22: note: expanded from macro 'MEM_COPY_ATTRIBUTES'
   MEM_ATTRS (LHS) = MEM_ATTRS (RHS))
                     ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3070:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx expr = XEXP (XEXP (x, 0), 1);
                 ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3075:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      val = INTVAL (XEXP (expr, 1));
                    ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3267:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  offset = i * UNITS_PER_WORD + SUBREG_BYTE (op);
                                ^~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3272:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (SUBREG_BYTE (op) == 0
      ^~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3461:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         MEM_ADDR_SPACE (x))
                                         ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3461:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                         MEM_ADDR_SPACE (x))
                                         ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3467:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        MEM_ADDR_SPACE (y)))
                                        ^~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3467:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        MEM_ADDR_SPACE (y)))
                                        ^~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3475:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (set = single_set (last_insn)) != NULL_RTX
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3475:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (set = single_set (last_insn)) != NULL_RTX
                ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3477:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ! rtx_equal_p (y_cst, SET_SRC (set)))
                               ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3815:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_ALIGN (xinner) >= align
             ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:3815:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_ALIGN (xinner) >= align
             ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4081:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                MEM_ALIGN (str_rtx), str_mode, 0);
                                ^~~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4081:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                MEM_ALIGN (str_rtx), str_mode, 0);
                                ^~~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4252:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4252:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4264:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_ALIGN (to_rtx) == GET_MODE_ALIGNMENT (mode1))
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4264:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_ALIGN (to_rtx) == GET_MODE_ALIGNMENT (mode1))
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4657:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                MEM_ALIGN (target), false))
                                ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4657:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                MEM_ALIGN (target), false))
                                ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4665:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  MEM_ALIGN (target), false,
                                  ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4665:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                  MEM_ALIGN (target), false,
                                  ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4759:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = targetm.addr_space.pointer_mode (MEM_ADDR_SPACE (target));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4759:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = targetm.addr_space.pointer_mode (MEM_ADDR_SPACE (target));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4761:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = targetm.addr_space.address_mode (MEM_ADDR_SPACE (target));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:4761:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = targetm.addr_space.address_mode (MEM_ADDR_SPACE (target));
                                                   ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5008:48: warning: shift count >= width of type [-Wshift-count-overflow]
  const HOST_WIDE_INT max = ~((HOST_WIDE_INT)1 << (HOST_BITS_PER_WIDE_INT-1));
                                               ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
expr.c:5171:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_ALIAS_SET (target) != 0)
             ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5171:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_ALIAS_SET (target) != 0)
             ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5303:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
                                                     ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5303:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  = targetm.addr_space.address_mode (MEM_ADDR_SPACE (to_rtx));
                                                     ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5694:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          alias = MEM_ALIAS_SET (target);
                  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5694:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          alias = MEM_ALIAS_SET (target);
                  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5829:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((((MEM_ALIGN (target) < GET_MODE_ALIGNMENT (mode))
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5829:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ((((MEM_ALIGN (target) < GET_MODE_ALIGNMENT (mode))
                 ^~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5920:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!MEM_KEEP_ALIAS_SET_P (to_rtx) && MEM_ALIAS_SET (to_rtx) != 0)
                                            ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:5920:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!MEM_KEEP_ALIAS_SET_P (to_rtx) && MEM_ALIAS_SET (to_rtx) != 0)
                                            ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6339:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                               SUBREG_BYTE (value));
                               ^~~~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6358:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op2 = XEXP (value, 1);
            ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6383:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                      force_operand (XEXP (XEXP (value,
                                                     ^
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6462:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                             SUBREG_BYTE (value));
                             ^~~~~~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6607:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && alias_sets_conflict_p (MEM_ALIAS_SET (x),
                                        ^~~~~~~~~~~~~~~~~
./rtl.h:1263:29: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                            ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6607:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && alias_sets_conflict_p (MEM_ALIAS_SET (x),
                                        ^~~~~~~~~~~~~~~~~
./rtl.h:1263:56: note: expanded from macro 'MEM_ALIAS_SET'
#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:6905:24: warning: logical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses]
          if (DECL_P (exp) && !TREE_USED (exp) == 0)
                              ^                ~~
expr.c:6905:24: note: add parentheses after the '!' to evaluate the comparison first
          if (DECL_P (exp) && !TREE_USED (exp) == 0)
                              ^
                               (                   )
expr.c:6905:24: note: add parentheses around left hand side expression to silence this warning
          if (DECL_P (exp) && !TREE_USED (exp) == 0)
                              ^
                              (               )
expr.c:8494:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                               MEM_ADDR_SPACE (decl_rtl)))
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:8494:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                               MEM_ADDR_SPACE (decl_rtl)))
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:8589:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          itarg = XEXP (original_target, 1);
                  ^                      ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:8615:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            MEM_ADDR_SPACE (temp)))
                                            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:8615:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                            MEM_ADDR_SPACE (temp)))
                                            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:8993:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                op0 = XEXP (op0, 1);
                      ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9037:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              = targetm.addr_space.address_mode (MEM_ADDR_SPACE (op0));
                                                 ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1274:30: note: expanded from macro 'MEM_ADDR_SPACE'
#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \
                             ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9037:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              = targetm.addr_space.address_mode (MEM_ADDR_SPACE (op0));
                                                 ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1275:11: note: expanded from macro 'MEM_ADDR_SPACE'
                                                  : MEM_ATTRS (RTX)->addrspace)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9048:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && MEM_ALIGN (op0) == GET_MODE_ALIGNMENT (mode1))
                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9048:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && MEM_ALIGN (op0) == GET_MODE_ALIGNMENT (mode1))
                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9092:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          && (MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode1)
                              ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9092:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                          && (MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode1)
                              ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9144:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
                                               ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9144:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
                                               ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9211:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9211:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
                                           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9317:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9317:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));
                                                   ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
                                     ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:339:20: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
                                     ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:339:20: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                   ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
                                     ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:339:32: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:9377:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));
                                     ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:339:32: note: expanded from macro 'MAX'
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
                               ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
expr.c:10304:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  SET_SYMBOL_REF_DECL (XEXP (DECL_RTL (decl), 0), NULL);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1375:49: note: expanded from macro 'SET_SYMBOL_REF_DECL'
  (gcc_assert (!CONSTANT_POOL_ADDRESS_P (RTX)), X0TREE ((RTX), 2) = (DECL))
                                                ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
127 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o function.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  function.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from function.c:51:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from function.c:51:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from function.c:51:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from function.c:51:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from function.c:51:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
function.c:656:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && (p = find_temp_slot_from_address (XEXP (x, 1))) != 0)
                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:668:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            if (INTVAL (XEXP (x, 1)) >= p->base_offset
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:669:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && INTVAL (XEXP (x, 1)) < p->base_offset + p->full_size)
                           ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1029:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          update_temp_slot_address (XEXP (old_rtx, 1), new_rtx);
                                    ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1036:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        update_temp_slot_address (XEXP (old_rtx, 1), XEXP (new_rtx, 1));
                                  ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1036:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        update_temp_slot_address (XEXP (old_rtx, 1), XEXP (new_rtx, 1));
                                                     ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1037:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (rtx_equal_p (XEXP (old_rtx, 1), XEXP (new_rtx, 0)))
                            ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1038:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        update_temp_slot_address (XEXP (old_rtx, 0), XEXP (new_rtx, 1));
                                                     ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1039:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (rtx_equal_p (XEXP (old_rtx, 0), XEXP (new_rtx, 1)))
                                               ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1040:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        update_temp_slot_address (XEXP (old_rtx, 1), XEXP (new_rtx, 0));
                                  ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1041:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (rtx_equal_p (XEXP (old_rtx, 1), XEXP (new_rtx, 1)))
                            ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1041:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (rtx_equal_p (XEXP (old_rtx, 1), XEXP (new_rtx, 1)))
                                               ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1367:61: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          *loc = simplify_gen_binary (PLUS, GET_MODE (x), new_rtx, XEXP (x, 1));
                                                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1416:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1416:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = single_set (insn);
        ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1429:55: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          x = simplify_gen_binary (PLUS, GET_MODE (new_rtx), SET_SRC (set),
                                                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1447:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      new_rtx = instantiate_new_reg (SET_SRC (set), &offset);
                                     ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1469:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn_code = INSN_CODE (insn);
                  ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1517:19: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn_code = INSN_CODE (insn);
                  ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1599:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                   GET_MODE (new_rtx), SUBREG_BYTE (x));
                                                       ^~~~~~~~~~~~~~~
./rtl.h:1112:26: note: expanded from macro 'SUBREG_BYTE'
#define SUBREG_BYTE(RTX) XCUINT (RTX, 1, SUBREG)
                         ^            ~
./rtl.h:737:32: note: expanded from macro 'XCUINT'
#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1638:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      INSN_CODE (insn) = -1;
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1641:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (asm_noperands (PATTERN (insn)) >= 0)
                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1643:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!check_asm_operands (PATTERN (insn)))
                               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1671:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      instantiate_decl_rtl (XEXP (x, 1));
                            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1789:42: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1801:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for_each_rtx (&INSN_VAR_LOCATION (insn),
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1809:17: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        for_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);
                       ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:1813:19: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2472:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2472:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
                                       ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2472:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2472:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))
                                       ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2478:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                plus_constant (MEM_OFFSET (stack_parm),
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2478:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                plus_constant (MEM_OFFSET (stack_parm),
                                               ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2557:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && INTVAL (XEXP (XVECEXP (entry_parm, 0, i), 1)) == 0)
                       ^                                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2605:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && TYPE_ALIGN (data->nominal_type) > MEM_ALIGN (stack_parm)
                                                   ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2605:45: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && TYPE_ALIGN (data->nominal_type) > MEM_ALIGN (stack_parm)
                                                   ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2606:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_ALIGN (stack_parm) < PREFERRED_STACK_BOUNDARY)))
                 ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2606:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && MEM_ALIGN (stack_parm) < PREFERRED_STACK_BOUNDARY)))
                 ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2952:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          int regnoi = REGNO (XEXP (parmreg, 1));
                              ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2962:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              set = single_set (sinsn);
                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2962:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              set = single_set (sinsn);
                    ^~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2972:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if ((set = single_set (linsn)) != 0
                      ^~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:2972:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if ((set = single_set (linsn)) != 0
                      ^~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3016:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (offset && MEM_OFFSET (data->stack_parm))
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3016:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (offset && MEM_OFFSET (data->stack_parm))
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3018:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            plus_constant (MEM_OFFSET (data->stack_parm),
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3018:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            plus_constant (MEM_OFFSET (data->stack_parm),
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3860:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = insns; insn; insn = NEXT_INSN (insn))
                                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3864:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (NOTE_KIND (insn) == NOTE_INSN_BLOCK_BEG)
              ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3866:21: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              tree block = NOTE_BLOCK (insn);
                           ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3884:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  NOTE_BLOCK (insn) = new_block;
                  ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3905:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          else if (NOTE_KIND (insn) == NOTE_INSN_BLOCK_END)
                   ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:3907:8: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              NOTE_BLOCK (insn) = VEC_pop (tree, *p_block_stack);
              ^~~~~~~~~~~~~~~~~
./rtl.h:878:26: note: expanded from macro 'NOTE_BLOCK'
#define NOTE_BLOCK(INSN)        XCTREE (INSN, 4, NOTE)
                                ^             ~
./rtl.h:743:32: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:4331:3: warning: switch condition has boolean value [-Wswitch-bool]
  switch (HAVE_stack_protect_test != 0)
  ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function.c:4654:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:4924:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (tmp = insns; tmp != end; tmp = NEXT_INSN (tmp))
                                      ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:4956:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_LOCATOR (insn) = loc;
        ^~~~~~~~~~~~~~~~~~~
./rtl.h:763:28: note: expanded from macro 'INSN_LOCATOR'
#define INSN_LOCATOR(INSN) XINT (INSN, 4)
                           ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:4957:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:4973:25: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:4974:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        if (htab_find (hash, XVECEXP (PATTERN (insn), 0, i)))
                                      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5093:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          label = PREV_INSN (label);
                  ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5112:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (!JUMP_P (jump) || JUMP_LABEL (jump) != label)
                                    ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5188:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      prev = PREV_INSN (last);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5189:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      trial = try_split (PATTERN (last), last, 1);
                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5193:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      record_insns (NEXT_INSN (prev), NEXT_INSN (trial), &epilogue_insn_hash);
                    ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5193:39: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      record_insns (NEXT_INSN (prev), NEXT_INSN (trial), &epilogue_insn_hash);
                                      ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5308:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          next = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5310:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && (NOTE_KIND (insn) == NOTE_INSN_FUNCTION_BEG))
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5311:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            reorder_insns (insn, insn, PREV_INSN (epilogue_end));
                                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5342:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))
                                             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5346:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (NOTE_KIND (insn) == NOTE_INSN_PROLOGUE_END)
                  ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5364:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (note = NEXT_INSN (last); ; note = NEXT_INSN (note))
                          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5364:47: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (note = NEXT_INSN (last); ; note = NEXT_INSN (note))
                                                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5367:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      && NOTE_KIND (note) == NOTE_INSN_PROLOGUE_END)
                         ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5374:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            last = NEXT_INSN (last);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5390:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5390:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5394:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (NOTE_KIND (insn) == NOTE_INSN_EPILOGUE_BEG)
                      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5421:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (PREV_INSN (first) != note)
                  ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5422:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                reorder_insns (note, note, PREV_INSN (first));
                                           ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5660:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx op = SET_SRC (p_sets[0]);
           ^~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5661:17: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  int ninputs = ASM_OPERANDS_INPUT_LENGTH (op);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1188:40: note: expanded from macro 'ASM_OPERANDS_INPUT_LENGTH'
#define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN (RTX, 3, ASM_OPERANDS)
                                       ^              ~
./rtl.h:748:43: note: expanded from macro 'XCVECLEN'
#define XCVECLEN(RTX, N, C)     GET_NUM_ELEM (XCVEC (RTX, N, C))
                                              ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5662:18: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtvec inputs = ASM_OPERANDS_INPUT_VEC (op);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1185:37: note: expanded from macro 'ASM_OPERANDS_INPUT_VEC'
#define ASM_OPERANDS_INPUT_VEC(RTX) XCVEC (RTX, 3, ASM_OPERANDS)
                                    ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5669:32: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      const char *constraint = ASM_OPERANDS_INPUT_CONSTRAINT (op, i);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1192:9: note: expanded from macro 'ASM_OPERANDS_INPUT_CONSTRAINT'
  XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)
        ^              ~
./rtl.h:747:43: note: expanded from macro 'XCVECEXP'
#define XCVECEXP(RTX, N, M, C)  RTVEC_ELT (XCVEC (RTX, N, C), M)
                                           ^           ~
./rtl.h:740:32: note: expanded from macro 'XCVEC'
#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:703:35: note: expanded from macro 'XSTR'
#define XSTR(RTX, N)    (RTL_CHECK2 (RTX, N, 's', 'S').rt_str)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5770:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5770:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5775:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          pat = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
function.c:5779:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            p_sets = &PATTERN (insn), noutputs = 1;
                      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
94 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graph.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graph.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
graph.c:110:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (PREV_INSN (tmp_rtx) == 0)
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
graph.c:153:27: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    print_rtl_single (fp, PATTERN (tmp_rtx));
                          ^~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
graph.c:265:46: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (x = BB_HEAD (bb); x != NULL_RTX; x = NEXT_INSN (x))
                                                    ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
graph.c:281:22: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (tmp_rtx = NEXT_INSN (rtx_first); NULL != tmp_rtx;
                     ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
graph.c:282:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
           tmp_rtx = NEXT_INSN (tmp_rtx))
                     ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
graph.c:360:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    next_insn = NEXT_INSN (next_insn);
                                ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
6 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gimple-low.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gimple-low.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphds.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphds.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gcse.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gcse.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from gcse.c:156:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from gcse.c:156:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from gcse.c:156:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from gcse.c:156:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from gcse.c:156:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
gcse.c:821:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (test_insn) = PREV_INSN (test_insn) = 0;
                              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:821:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (test_insn) = PREV_INSN (test_insn) = 0;
      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:826:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PUT_MODE (SET_DEST (PATTERN (test_insn)), GET_MODE (x));
                      ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:353:31: note: expanded from macro 'PUT_MODE'
#define PUT_MODE(RTX, MODE) ((RTX)->mode = (MODE))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:827:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  SET_SRC (PATTERN (test_insn)) = x;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:827:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  SET_SRC (PATTERN (test_insn)) = x;
           ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:829:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  icode = recog (PATTERN (test_insn), test_insn, &num_clobbers);
                 ^~~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:996:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          list_entry = XEXP (list_entry, 1);
                       ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1015:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      note_stores (PATTERN (setter), mems_conflict_for_gcse_p, NULL);
                   ^~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1018:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      list_entry = XEXP (list_entry, 1);
                   ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1148:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (antic_occr->insn) != BLOCK_FOR_INSN (insn))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1148:44: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (antic_occr->insn) != BLOCK_FOR_INSN (insn))
                                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1173:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (avail_occr->insn) == BLOCK_FOR_INSN (insn))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1173:44: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && BLOCK_FOR_INSN (avail_occr->insn) == BLOCK_FOR_INSN (insn))
                                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1247:10: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && BLOCK_FOR_INSN (cur_occr->insn) == BLOCK_FOR_INSN (insn))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1247:45: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && BLOCK_FOR_INSN (cur_occr->insn) == BLOCK_FOR_INSN (insn))
                                            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1283:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 1))
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1299:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx src = SET_SRC (pat);
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1385:29: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
               && (insn == BB_END (BLOCK_FOR_INSN (insn))
                                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./basic-block.h:492:26: note: expanded from macro 'BB_END'
#define BB_END(B)       (B)->il.rtl->end_
                         ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1387:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   || BLOCK_FOR_INSN (tmp) != BLOCK_FOR_INSN (insn)
                      ^~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1387:33: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   || BLOCK_FOR_INSN (tmp) != BLOCK_FOR_INSN (insn)
                                              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1463:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx pat = PATTERN (insn);
            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1580:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (insn)->index;
       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1595:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  int bb = BLOCK_FOR_INSN (insn)->index;
           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1612:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    note_stores (PATTERN (insn), canon_list_insert, (void*) insn);
                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1671:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (current_bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1671:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (current_bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1685:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          note_stores (PATTERN (insn), record_last_set_info, insn);
                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1695:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (current_bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1695:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (current_bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1791:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = XEXP (list, 1);
             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1875:35: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (load_killed_in_block_p (BLOCK_FOR_INSN (insn),
                                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:1962:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx pat = PATTERN (insn);
            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2096:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    list_entry = XEXP (list_entry, 1);
                                 ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2108:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    list_entry = XEXP (list_entry, 1);
                                 ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2240:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2240:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx set = single_set (insn);
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2254:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = simplify_rtx (SET_SRC (set));
                          ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2265:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!success && set && reg_mentioned_p (from, SET_SRC (set)))
                                                ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2270:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = simplify_replace_rtx (SET_SRC (set), from, to);
                                  ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2272:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (!rtx_equal_p (src, SET_SRC (set))
                             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2336:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (set->expr);
            ^~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2386:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set_src = note_src ? note_src : SET_SRC (set);
                                  ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2395:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx setcc_set = single_set (setcc);
                      ^~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2395:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx setcc_set = single_set (setcc);
                      ^~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2398:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                ? XEXP (setcc_note, 0) : SET_SRC (setcc_set);
                                         ^~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2408:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (rtx_equal_p (new_rtx, SET_SRC (set)))
                            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2468:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
            && BB_HEAD (e->dest) == JUMP_LABEL (jump))
                                    ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2486:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((sset = single_set (insn)) != NULL
              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2486:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((sset = single_set (insn)) != NULL
              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2487:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && NEXT_INSN (insn)
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2488:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && any_condjump_p (NEXT_INSN (insn)) && onlyjump_p (NEXT_INSN (insn)))
                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2488:59: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && any_condjump_p (NEXT_INSN (insn)) && onlyjump_p (NEXT_INSN (insn)))
                                                          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2492:19: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && cprop_jump (BLOCK_FOR_INSN (insn), insn, NEXT_INSN (insn), from, to))
                         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2492:48: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && cprop_jump (BLOCK_FOR_INSN (insn), insn, NEXT_INSN (insn), from, to))
                                                      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2508:24: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
    return cprop_jump (BLOCK_FOR_INSN (insn), NULL, insn, from, to);
                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2526:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note_uses (&PATTERN (insn), find_used_regs, NULL);
              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2556:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (pat);
            ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2663:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && asm_noperands (PATTERN (insn)) < 0)))
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2730:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2730:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2738:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  note_uses (&PATTERN (insn), local_cprop_find_used_regs,
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2792:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  const_rtx cst = XEXP (cond, 1);
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2858:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                             XEXP (cond, 1));
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:280:41: note: expanded from macro 'gen_rtx_SET'
  gen_rtx_fmt_ee (SET, (MODE), (ARG0), (ARG1))
                                        ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2910:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      src = SET_SRC (set->expr);
            ^~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2934:40: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = e->insns.r; insn; insn = NEXT_INSN (insn))
                                       ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:2965:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note_uses (&PATTERN (insn), find_used_regs, NULL);
              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3023:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          src = SET_SRC (pc_set (jump));
                ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3027:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        SET_DEST (PATTERN (setcc)),
                                                  ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3028:6: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        SET_SRC (PATTERN (setcc)));
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3028:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                        SET_SRC (PATTERN (setcc)));
                                                 ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3031:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          SET_SRC (set->expr));
                                          ^~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3045:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              dest = BLOCK_FOR_INSN (XEXP (new_rtx, 0));
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3073:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx pat = PATTERN (setcc);
                            ^~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3083:27: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  print_rtl (dump_file, SET_SRC (set->expr));
                                        ^~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3129:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3129:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3139:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                dest = SET_DEST (PATTERN (insn));
                                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3428:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (NEXT_INSN (pat_end) != NULL_RTX)
         ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3429:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    pat_end = NEXT_INSN (pat_end);
              ^~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3509:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
             || NOTE_INSN_BASIC_BLOCK_P (insn))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3510:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        insn = NEXT_INSN (insn);
               ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3520:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        add_label_notes (PATTERN (pat), new_insn);
                         ^~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3523:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      pat = NEXT_INSN (pat);
            ^~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3641:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx pat = PATTERN (insn);
            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3668:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (expr_equiv_p (SET_SRC (x), expr->expr))
                                ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3702:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      old_reg = SET_SRC (set);
                ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3717:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              BLOCK_FOR_INSN (insn)->index, INSN_UID (new_insn), indx,
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3770:34: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                if (! pre_expr_reaches_here_p (BLOCK_FOR_INSN (avail->insn),
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3772:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                               BLOCK_FOR_INSN (occr->insn)))
                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3794:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx set = single_set (insn), set2;
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3794:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx set = single_set (insn), set2;
            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3804:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set2 = single_set (new_rtx);
         ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3804:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set2 = single_set (new_rtx);
         ^~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3810:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    eqv = SET_SRC (set);
          ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3847:23: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
            basic_block bb = BLOCK_FOR_INSN (insn);
                             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3851:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && (set = single_set (insn)) != 0
                          ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:3851:13: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                && (set = single_set (insn)) != 0
                          ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4034:2: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        LABEL_NUSES (XEXP (x, 0))++;
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4381:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      while (BLOCK_FOR_INSN (occr->insn) != dominated && occr)
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4386:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      set = single_set (insn);
                            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4386:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      set = single_set (insn);
                            ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4745:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4745:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      FOR_BB_INSNS (bb, insn)
      ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4751:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx src = SET_SRC (PATTERN (insn));
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4751:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx src = SET_SRC (PATTERN (insn));
                                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1330:28: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4752:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  rtx dest = SET_DEST (PATTERN (insn));
                                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4788:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                invalidate_any_buried_refs (PATTERN (insn));
                                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4867:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for ( ; list != NULL_RTX; list = XEXP (list, 1))
                                       ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4870:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx pat = PATTERN (insn);
                    ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4871:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx src = SET_SRC (pat);
                    ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4888:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          copy = gen_move_insn (reg, copy_rtx (SET_SRC (pat)));
                                               ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4890:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          SET_SRC (pat) = reg;
          ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:4894:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
          INSN_CODE (insn) = -1;
          ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:5006:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gcse.c:5006:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          FOR_BB_INSNS (bb, insn)
          ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
120 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-clast-to-gimple.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-clast-to-gimple.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-blocking.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-blocking.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gimple.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gimple.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gimple-pretty-print.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gimple-pretty-print.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-ppl.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-ppl.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-dependences.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-dependences.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-poly.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-poly.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-interchange.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-interchange.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-scop-detection.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-scop-detection.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o hex.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  hex.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o graphite-sese-to-poly.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  graphite-sese-to-poly.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o host-ieee128.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  host-ieee128.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o host-ieee32.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  host-ieee32.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o hooks.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  hooks.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o hashtab.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  hashtab.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o host-ieee64.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  host-ieee64.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o host-linux.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  host-linux.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from host-linux.c:24:
/opt/wasi-sdk/share/wasi-sysroot/include/sys/mman.h:2:2: error: "WASI lacks a true mmap; to enable minimal mmap emulation, compile with -D_WASI_EMULATED_MMAN and link with -lwasi-emulated-mman"
#error "WASI lacks a true mmap; to enable minimal mmap emulation, \
 ^
1 error generated.
specmake: *** [/home/ucsd/SpectreSandboxing/spec2017/benchspec/Makefile.defaults:352: host-linux.o] Error 1
specmake: *** Waiting for unfinished jobs....
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o i386-c.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  i386-c.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o haifa-sched.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  haifa-sched.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from haifa-sched.c:142:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from haifa-sched.c:142:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from haifa-sched.c:142:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from haifa-sched.c:142:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from haifa-sched.c:142:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
haifa-sched.c:478:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         may_trap_exp (SET_SRC (x), 0));
                                       ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./sched-int.h:1128:12: note: expanded from macro 'WORST_CLASS'
((class1 > class2) ? class1 : class2)
           ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:478:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         may_trap_exp (SET_SRC (x), 0));
                                       ^~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./sched-int.h:1128:31: note: expanded from macro 'WORST_CLASS'
((class1 > class2) ? class1 : class2)
                              ^~~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:481:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          tmp_class = haifa_classify_rtx (COND_EXEC_CODE (x));
                                          ^~~~~~~~~~~~~~~~~~
./rtl.h:1342:29: note: expanded from macro 'COND_EXEC_CODE'
#define COND_EXEC_CODE(RTX) XCEXP (RTX, 1, COND_EXEC)
                            ^           ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:501:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return haifa_classify_rtx (PATTERN (insn));
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:720:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS (bb, insn)
    ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:720:5: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    FOR_BB_INSNS (bb, insn)
    ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:722:18: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        setup_ref_regs (PATTERN (insn));
                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:877:11: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (INSN_CODE (insn) >= 0)
          ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:904:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (dep_cost_rtx_link, 1) = dep_cost_rtx_link;
          ^                        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1037:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              prev_first = PREV_INSN (insn);
                           ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1042:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              prev_first = NEXT_INSN (BB_HEAD (rec));
                           ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1043:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              twin = PREV_INSN (BB_END (rec));
                     ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1058:9: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  if (BLOCK_FOR_INSN (next) != rec)
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1083:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              twin = PREV_INSN (twin);
                     ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1264:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          last = PREV_INSN (last);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1597:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = NEXT_INSN (after);
              ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1598:28: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn != NULL_RTX && BLOCK_FOR_INSN (insn) == BLOCK_FOR_INSN (after);
                           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1598:53: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn != NULL_RTX && BLOCK_FOR_INSN (insn) == BLOCK_FOR_INSN (after);
                                                    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1599:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
       insn = NEXT_INSN (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1725:2: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_VAR_LOCATION_LOC (dbg) = gen_rtx_UNKNOWN_VAR_LOC ();
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:3: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1725:2: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        INSN_VAR_LOCATION_LOC (dbg) = gen_rtx_UNKNOWN_VAR_LOC ();
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:917:25: note: expanded from macro 'INSN_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (INSN_VAR_LOCATION (INSN))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:911:33: note: expanded from macro 'INSN_VAR_LOCATION'
#define INSN_VAR_LOCATION(INSN) PATTERN (INSN)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1834:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (PREV_INSN (from_start) != NULL)
         ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1835:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    from_start = PREV_INSN (from_start);
                 ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1837:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  PREV_INSN (from_start) = *to_endp;
  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1838:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  NEXT_INSN (*to_endp) = from_start;
  ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1853:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  next_tail = NEXT_INSN (tail);
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1856:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1860:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      switch (NOTE_KIND (insn))
              ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1879:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          PREV_INSN (insn) = note_list;
          ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1880:4: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          NEXT_INSN (insn) = NULL_RTX;
          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1882:6: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            NEXT_INSN (note_list) = insn;
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1906:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    beg_head = NEXT_INSN (beg_head);
               ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1910:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      beg_head = NEXT_INSN (beg_head);
                 ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1919:16: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    end_head = NEXT_INSN (end_head);
               ^~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1923:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      end_tail = PREV_INSN (end_tail);
                 ^~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1935:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  while (head != NEXT_INSN (tail))
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1940:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      head = NEXT_INSN (head);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1955:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        head_bb = BLOCK_FOR_INSN (head);
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1957:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        head = NEXT_INSN (bb_note (head_bb));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1959:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      while (PREV_INSN (note_head))
             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1961:4: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          set_block_for_insn (note_head, head_bb);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1962:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          note_head = PREV_INSN (note_head);
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1965:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set_block_for_insn (note_head, head_bb);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1967:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (note_head) = PREV_INSN (head);
      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1967:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (note_head) = PREV_INSN (head);
                              ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1968:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (PREV_INSN (head)) = note_head;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1968:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (PREV_INSN (head)) = note_head;
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1969:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (head) = note_list;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1970:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (note_list) = head;
      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:1972:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (BLOCK_FOR_INSN (head) != head_bb)
          ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2005:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = insn_queue[q_ptr]; link; link = XEXP (link, 1))
                                              ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2044:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              for (; link; link = XEXP (link, 1))
                                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2093:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for ( ; prev_insn; prev_insn = PREV_INSN (prev_insn))
                                         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2125:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          prev_insn = PREV_INSN (prev_insn);
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2176:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              next_link = XEXP (link, 1);
                          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2203:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        XEXP (prev_link, 1) = next_link;
                        ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2273:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))
              ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2273:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2289:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (PREV_INSN (insn) != last)
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2295:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      bb = BLOCK_FOR_INSN (insn);
           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2313:16: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gcc_assert (BLOCK_FOR_INSN (PREV_INSN (insn)) == bb);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2313:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gcc_assert (BLOCK_FOR_INSN (PREV_INSN (insn)) == bb);
                                      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:709:37: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                                     ^~~
./rtl.h:593:39: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                      ^~~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2315:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          BB_END (bb) = PREV_INSN (insn);
                        ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2325:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          note = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2326:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          while (NOTE_NOT_BB_P (note) && note != nt)
                 ^~~~~~~~~~~~~~~~~~~~
./sched-int.h:1051:48: note: expanded from macro 'NOTE_NOT_BB_P'
#define NOTE_NOT_BB_P(NOTE) (NOTE_P (NOTE) && (NOTE_KIND (NOTE) \
                                               ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2327:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            note = NEXT_INSN (note);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2332:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            note = NEXT_INSN (note);
                   ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2334:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gcc_assert (NOTE_INSN_BASIC_BLOCK_P (note));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2339:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (note);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2339:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (note);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2339:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (note);
                                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2340:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (NEXT_INSN (note)) = PREV_INSN (insn);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2340:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (NEXT_INSN (note)) = PREV_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2340:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (NEXT_INSN (note)) = PREV_INSN (insn);
                                     ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2342:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (note) = NEXT_INSN (last);
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2342:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (note) = NEXT_INSN (last);
                         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2343:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (NEXT_INSN (last)) = note;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2343:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (NEXT_INSN (last)) = note;
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:759:31: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2345:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (last) = insn;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2346:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (insn) = last;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2348:12: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      bb = BLOCK_FOR_INSN (last);
           ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2354:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (BLOCK_FOR_INSN (insn) != bb)
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2648:11: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (INSN_CODE (insn) < 0)
          ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2728:4: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
                 INSN_CODE (insn) < 0
                 ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2770:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx head = NEXT_INSN (prev_head);
             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2771:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx tail = PREV_INSN (next_tail);
             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:2806:11: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && BLOCK_FOR_INSN (last_scheduled_insn) == *target_bb);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3057:28: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       || asm_noperands (PATTERN (insn)) >= 0);
                                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3246:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            for (link = insn_queue[i]; link; link = XEXP (link, 1))
                                                    ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3270:23: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      fix_inter_tick (NEXT_INSN (prev_head), last_scheduled_insn);
                      ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3288:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  head = NEXT_INSN (prev_head);
         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3313:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  prev_head = PREV_INSN (head);
              ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3314:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = tail; insn != prev_head; insn = PREV_INSN (insn))
                                              ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3596:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (tail = NEXT_INSN (tail); head != tail; head = NEXT_INSN (head))
              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3596:54: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (tail = NEXT_INSN (tail); head != tail; head = NEXT_INSN (head))
                                                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3764:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            ORIG_PAT (next) = PATTERN (next);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:3771:24: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            ORIG_PAT (next) = PATTERN (next);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4144:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rec = BLOCK_FOR_INSN (check);
            ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4146:43: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      twin = emit_insn_before (copy_insn (PATTERN (insn)), BB_END (rec));
                                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4170:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (BLOCK_FOR_INSN (pro) == rec)
              ^~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4187:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (BLOCK_FOR_INSN (pro) == rec)
              ^~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4209:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      twin = XEXP (twins, 1);
             ^            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4270:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NEXT_INSN (insn) == 0
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4278:7: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set_block_for_insn (note, NULL);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:502:40: note: expanded from macro 'set_block_for_insn'
#define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)
                                       ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4342:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      JUMP_LABEL (x) = label;
      ^~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4343:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label)++;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4422:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  JUMP_LABEL (jump) = label;
  ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4423:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label)++;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4493:7: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      JUMP_LABEL (check) = label;
      ^~~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4494:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label)++;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4562:18: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
      first_bb = BLOCK_FOR_INSN (check);
                 ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4731:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  note = NEXT_INSN (BB_HEAD (rec));
         ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4732:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (NOTE_INSN_BASIC_BLOCK_P (note));
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4735:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  insn = PREV_INSN (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4747:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (BLOCK_FOR_INSN (consumer) != rec)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4765:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = PREV_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4772:40: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (link = ready_list; link; link = XEXP (link, 1))
                                       ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4781:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  insn = NEXT_INSN (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4783:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4793:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  t = validate_change (insn, &PATTERN (insn), new_pat, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4894:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        note = NEXT_INSN (label);
               ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4897:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      gcc_assert (NOTE_INSN_BASIC_BLOCK_P (note));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4899:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      prev = PREV_INSN (label);
             ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4900:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (note);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4903:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (prev) = next;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4904:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (next) = prev;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4934:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      prev = PREV_INSN (label);
             ^~~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4935:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      next = NEXT_INSN (prev);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4938:9: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        note = NEXT_INSN (label);
               ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4941:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      gcc_assert (NOTE_INSN_BASIC_BLOCK_P (note));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4945:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (prev) = label;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4946:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      NEXT_INSN (note) = next;
      ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4947:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      PREV_INSN (next) = note;
      ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4964:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (PREV_INSN (jump));
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4964:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (PREV_INSN (jump));
                       ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:762:38: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                                     ^~~~
./rtl.h:709:37: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                                     ^~~
./rtl.h:593:39: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4965:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  jump_bb = BLOCK_FOR_INSN (jump);
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4971:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!NOTE_INSN_BASIC_BLOCK_P (BB_END (jump_bb_next)))
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4975:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (BB_END (bb) != PREV_INSN (jump))
                     ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4981:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    BB_END (jump_bb_next) = NEXT_INSN (BB_HEAD (jump_bb_next));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4984:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  BB_END (bb) = PREV_INSN (jump);
                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4996:8: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (PREV_INSN (jump));
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4996:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  bb = BLOCK_FOR_INSN (PREV_INSN (jump));
                       ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:762:38: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                                     ^~~~
./rtl.h:709:37: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                                     ^~~
./rtl.h:593:39: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:4997:13: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  jump_bb = BLOCK_FOR_INSN (jump);
            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:5105:14: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = NEXT_INSN (insn);
             ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:5130:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
    note = NEXT_INSN (note);
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:5132:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (NOTE_INSN_BASIC_BLOCK_P (note));
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:890:7: note: expanded from macro 'NOTE_INSN_BASIC_BLOCK_P'
   && NOTE_KIND (INSN) == NOTE_INSN_BASIC_BLOCK)
      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:5299:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:457:28: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) && (INSN) != NEXT_INSN (BB_END (BB));     \
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
haifa-sched.c:5299:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  FOR_BB_INSNS (bb, insn)
  ^~~~~~~~~~~~~~~~~~~~~~~
./basic-block.h:458:17: note: expanded from macro 'FOR_BB_INSNS'
       (INSN) = NEXT_INSN (INSN))
                ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
153 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gimplify.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gimplify.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o gtype-desc.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  gtype-desc.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
gtype-desc.c:1080:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (((((*x)).flags & BB_RTL) != 0))
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:1103:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (current_ir_type () == IR_GIMPLE)
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:1741:11: warning: switch condition has boolean value [-Wswitch-bool]
          switch (SYMBOL_REF_HAS_BLOCK_INFO_P (&(*x)))
          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:1391:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:343:25: note: expanded from macro 'RTX_PREV'
                     && PREV_INSN (X) != NULL           \
                        ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1391:41: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:344:25: note: expanded from macro 'RTX_PREV'
                     && NEXT_INSN (PREV_INSN (X)) == X  \
                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1391:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:344:36: note: expanded from macro 'RTX_PREV'
                     && NEXT_INSN (PREV_INSN (X)) == X  \
                                   ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1391:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:345:24: note: expanded from macro 'RTX_PREV'
                     ? PREV_INSN (X) : NULL)
                       ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1401:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1401:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1411:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1411:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1415:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1415:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1419:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1419:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1432:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1432:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1436:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1436:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1440:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1440:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1447:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1447:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1451:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1451:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1455:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1455:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1456:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1456:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1460:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1460:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1467:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1467:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1468:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1468:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1472:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1472:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1473:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1473:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1540:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1540:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1544:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1544:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1548:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1548:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1552:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1552:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1556:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1556:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1560:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1560:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1564:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1564:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1568:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1568:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1572:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1572:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1576:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1576:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1580:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1580:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1584:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1584:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1588:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1588:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1592:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1592:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1596:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1596:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1600:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1600:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1604:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1604:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1608:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1608:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1612:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1612:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1616:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1616:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1632:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1632:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1636:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1636:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1640:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1640:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1644:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1644:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1648:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1648:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1652:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1652:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1656:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1656:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1660:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1660:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1664:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1664:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1671:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1671:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1675:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1675:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1679:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1679:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1683:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1683:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1687:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1687:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1691:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1691:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1695:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1695:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1699:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1699:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1703:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1703:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1707:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1707:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1711:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1711:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1715:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1715:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1722:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1722:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1726:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1726:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1730:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1730:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1734:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1734:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1735:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1735:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1741:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          switch (SYMBOL_REF_HAS_BLOCK_INFO_P (&(*x)))
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1425:5: note: expanded from macro 'SYMBOL_REF_HAS_BLOCK_INFO_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_HAS_BLOCK_INFO) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1752:51: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_23constant_descriptor_rtx ((*x).u.fld[2].rt_constant);
                                                  ^          ~
./gtype-desc.h:831:7: note: expanded from macro 'gt_ggc_m_23constant_descriptor_rtx'
  if (X != NULL) gt_ggc_mx_constant_descriptor_rtx (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1752:51: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_23constant_descriptor_rtx ((*x).u.fld[2].rt_constant);
                                                  ^          ~
./gtype-desc.h:831:53: note: expanded from macro 'gt_ggc_m_23constant_descriptor_rtx'
  if (X != NULL) gt_ggc_mx_constant_descriptor_rtx (X);\
                                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1755:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_9tree_node ((*x).u.fld[2].rt_tree);
                                   ^          ~
./gtype-desc.h:911:7: note: expanded from macro 'gt_ggc_m_9tree_node'
  if (X != NULL) gt_ggc_mx_tree_node (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1755:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_9tree_node ((*x).u.fld[2].rt_tree);
                                   ^          ~
./gtype-desc.h:911:39: note: expanded from macro 'gt_ggc_m_9tree_node'
  if (X != NULL) gt_ggc_mx_tree_node (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1764:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9mem_attrs ((*x).u.fld[1].rt_mem);
                               ^          ~
./gtype-desc.h:855:7: note: expanded from macro 'gt_ggc_m_9mem_attrs'
  if (X != NULL) gt_ggc_mx_mem_attrs (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1764:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9mem_attrs ((*x).u.fld[1].rt_mem);
                               ^          ~
./gtype-desc.h:855:39: note: expanded from macro 'gt_ggc_m_9mem_attrs'
  if (X != NULL) gt_ggc_mx_mem_attrs (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1771:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1771:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1783:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9reg_attrs ((*x).u.fld[2].rt_reg);
                               ^          ~
./gtype-desc.h:851:7: note: expanded from macro 'gt_ggc_m_9reg_attrs'
  if (X != NULL) gt_ggc_mx_reg_attrs (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1783:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9reg_attrs ((*x).u.fld[2].rt_reg);
                               ^          ~
./gtype-desc.h:851:39: note: expanded from macro 'gt_ggc_m_9reg_attrs'
  if (X != NULL) gt_ggc_mx_reg_attrs (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1803:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1803:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1811:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1811:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1821:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1821:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1825:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1825:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1826:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1826:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1830:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[3].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1830:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[3].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1831:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1831:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1832:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[1].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:7: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1832:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[1].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:39: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1845:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[5].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:7: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1845:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[5].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:39: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1846:32: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[4].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:7: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1846:32: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[4].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:39: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1847:32: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[3].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:7: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1847:32: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_9rtvec_def ((*x).u.fld[3].rt_rtvec);
                               ^          ~
./gtype-desc.h:899:39: note: expanded from macro 'gt_ggc_m_9rtvec_def'
  if (X != NULL) gt_ggc_mx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1848:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_S ((*x).u.fld[1].rt_str);
                      ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1858:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1858:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1862:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          switch (NOTE_KIND (&(*x)))
                  ^~~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1865:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_S ((*x).u.fld[4].rt_str);
                          ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1874:34: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_7rtx_def ((*x).u.fld[4].rt_rtx);
                                 ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1874:34: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_7rtx_def ((*x).u.fld[4].rt_rtx);
                                 ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1887:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:911:7: note: expanded from macro 'gt_ggc_m_9tree_node'
  if (X != NULL) gt_ggc_mx_tree_node (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1887:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:911:39: note: expanded from macro 'gt_ggc_m_9tree_node'
  if (X != NULL) gt_ggc_mx_tree_node (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1890:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:911:7: note: expanded from macro 'gt_ggc_m_9tree_node'
  if (X != NULL) gt_ggc_mx_tree_node (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1890:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:911:39: note: expanded from macro 'gt_ggc_m_9tree_node'
  if (X != NULL) gt_ggc_mx_tree_node (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1893:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_ggc_m_S ((*x).u.fld[4].rt_str);
                          ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1898:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:7: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1898:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:45: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1899:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1899:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1900:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1900:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1903:23: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_S ((*x).u.fld[7].rt_str);
                      ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1904:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1904:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1905:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:7: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1905:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:45: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1906:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1906:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1907:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1907:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1910:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1910:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1911:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1911:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1914:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1914:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1915:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1915:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1916:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1916:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1917:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:7: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1917:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:45: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1918:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1918:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1919:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1919:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1922:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1922:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1923:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1923:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1924:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1924:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1925:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:7: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1925:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:45: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1926:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1926:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1927:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1927:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1930:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1930:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1931:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1931:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1932:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:7: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1932:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:45: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1933:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1933:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1934:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1934:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1937:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1937:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1938:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1938:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1939:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:7: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1939:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:875:45: note: expanded from macro 'gt_ggc_m_15basic_block_def'
  if (X != NULL) gt_ggc_mx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1940:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1940:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1941:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1941:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1950:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1950:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1954:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:7: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:1954:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_ggc_m_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:903:37: note: expanded from macro 'gt_ggc_m_7rtx_def'
  if (X != NULL) gt_ggc_mx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3513:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (((((*x)).flags & BB_RTL) != 0))
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:3536:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (current_ir_type () == IR_GIMPLE)
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:4174:11: warning: switch condition has boolean value [-Wswitch-bool]
          switch (SYMBOL_REF_HAS_BLOCK_INFO_P (&(*x)))
          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:3824:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:343:25: note: expanded from macro 'RTX_PREV'
                     && PREV_INSN (X) != NULL           \
                        ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3824:41: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:344:25: note: expanded from macro 'RTX_PREV'
                     && NEXT_INSN (PREV_INSN (X)) == X  \
                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3824:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:344:36: note: expanded from macro 'RTX_PREV'
                     && NEXT_INSN (PREV_INSN (X)) == X  \
                                   ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:760:31: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                              ^~~~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3824:41: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        struct rtx_def * const xprev = (RTX_PREV (&(*x)));
                                        ^~~~~~~~~~~~~~~~
./rtl.h:345:24: note: expanded from macro 'RTX_PREV'
                     ? PREV_INSN (X) : NULL)
                       ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3834:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3834:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3844:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3844:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3848:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3848:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3852:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3852:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3865:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3865:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3869:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3869:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3873:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3873:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3880:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3880:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3884:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3884:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3888:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3888:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3889:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3889:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3893:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3893:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3900:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3900:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3901:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3901:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3905:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3905:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3906:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3906:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3973:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3973:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3977:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3977:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3981:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3981:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3985:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3985:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3989:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3989:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3993:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3993:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3997:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:3997:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4001:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4001:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4005:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4005:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4009:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4009:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4013:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4013:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4017:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4017:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4021:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4021:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4025:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4025:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4029:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4029:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4033:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4033:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4037:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4037:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4041:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4041:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4045:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4045:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4049:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4049:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4065:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4065:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4069:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4069:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4073:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4073:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4077:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4077:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4081:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4081:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4085:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4085:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4089:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4089:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4093:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4093:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4097:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4097:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4104:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4104:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4108:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4108:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4112:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4112:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4116:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4116:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4120:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4120:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4124:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4124:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4128:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4128:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4132:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4132:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4136:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4136:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4140:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4140:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4144:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4144:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4148:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4148:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4155:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4155:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4159:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4159:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4163:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4163:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4167:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4167:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4168:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4168:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4174:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          switch (SYMBOL_REF_HAS_BLOCK_INFO_P (&(*x)))
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1425:5: note: expanded from macro 'SYMBOL_REF_HAS_BLOCK_INFO_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_HAS_BLOCK_INFO) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4185:51: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_23constant_descriptor_rtx ((*x).u.fld[2].rt_constant);
                                                  ^          ~
./gtype-desc.h:1566:7: note: expanded from macro 'gt_pch_n_23constant_descriptor_rtx'
  if (X != NULL) gt_pch_nx_constant_descriptor_rtx (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4185:51: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_23constant_descriptor_rtx ((*x).u.fld[2].rt_constant);
                                                  ^          ~
./gtype-desc.h:1566:53: note: expanded from macro 'gt_pch_n_23constant_descriptor_rtx'
  if (X != NULL) gt_pch_nx_constant_descriptor_rtx (X);\
                                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4188:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_9tree_node ((*x).u.fld[2].rt_tree);
                                   ^          ~
./gtype-desc.h:1646:7: note: expanded from macro 'gt_pch_n_9tree_node'
  if (X != NULL) gt_pch_nx_tree_node (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4188:36: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_9tree_node ((*x).u.fld[2].rt_tree);
                                   ^          ~
./gtype-desc.h:1646:39: note: expanded from macro 'gt_pch_n_9tree_node'
  if (X != NULL) gt_pch_nx_tree_node (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4197:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9mem_attrs ((*x).u.fld[1].rt_mem);
                               ^          ~
./gtype-desc.h:1590:7: note: expanded from macro 'gt_pch_n_9mem_attrs'
  if (X != NULL) gt_pch_nx_mem_attrs (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4197:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9mem_attrs ((*x).u.fld[1].rt_mem);
                               ^          ~
./gtype-desc.h:1590:39: note: expanded from macro 'gt_pch_n_9mem_attrs'
  if (X != NULL) gt_pch_nx_mem_attrs (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4204:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4204:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4216:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9reg_attrs ((*x).u.fld[2].rt_reg);
                               ^          ~
./gtype-desc.h:1586:7: note: expanded from macro 'gt_pch_n_9reg_attrs'
  if (X != NULL) gt_pch_nx_reg_attrs (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4216:32: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9reg_attrs ((*x).u.fld[2].rt_reg);
                               ^          ~
./gtype-desc.h:1586:39: note: expanded from macro 'gt_pch_n_9reg_attrs'
  if (X != NULL) gt_pch_nx_reg_attrs (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4236:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4236:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4244:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4244:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4254:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4254:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4258:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4258:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4259:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4259:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4263:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[3].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4263:30: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[3].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4264:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4264:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4265:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[1].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:7: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4265:32: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[1].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:39: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4278:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[5].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:7: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4278:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[5].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:39: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4279:32: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[4].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:7: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4279:32: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[4].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:39: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4280:32: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[3].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:7: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4280:32: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_9rtvec_def ((*x).u.fld[3].rt_rtvec);
                               ^          ~
./gtype-desc.h:1634:39: note: expanded from macro 'gt_pch_n_9rtvec_def'
  if (X != NULL) gt_pch_nx_rtvec_def (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4281:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_S ((*x).u.fld[1].rt_str);
                      ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4291:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4291:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4295:19: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          switch (NOTE_KIND (&(*x)))
                  ^~~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4298:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_S ((*x).u.fld[4].rt_str);
                          ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4307:34: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_7rtx_def ((*x).u.fld[4].rt_rtx);
                                 ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4307:34: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_7rtx_def ((*x).u.fld[4].rt_rtx);
                                 ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4320:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:1646:7: note: expanded from macro 'gt_pch_n_9tree_node'
  if (X != NULL) gt_pch_nx_tree_node (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4320:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:1646:39: note: expanded from macro 'gt_pch_n_9tree_node'
  if (X != NULL) gt_pch_nx_tree_node (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4323:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:1646:7: note: expanded from macro 'gt_pch_n_9tree_node'
  if (X != NULL) gt_pch_nx_tree_node (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4323:36: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_9tree_node ((*x).u.fld[4].rt_tree);
                                   ^          ~
./gtype-desc.h:1646:39: note: expanded from macro 'gt_pch_n_9tree_node'
  if (X != NULL) gt_pch_nx_tree_node (X);\
                                      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4326:27: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
              gt_pch_n_S ((*x).u.fld[4].rt_str);
                          ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4331:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:7: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4331:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:45: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4332:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4332:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4333:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4333:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4336:23: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_S ((*x).u.fld[7].rt_str);
                      ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4337:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4337:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4338:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:7: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4338:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:45: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4339:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4339:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4340:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4340:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4343:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4343:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4344:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4344:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4347:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4347:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4348:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4348:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4349:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4349:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4350:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:7: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4350:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:45: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4351:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4351:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4352:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4352:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4355:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4355:30: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[8].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4356:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4356:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4357:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4357:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4358:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:7: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4358:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:45: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4359:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4359:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4360:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4360:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4363:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4363:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4364:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4364:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4365:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:7: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4365:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:45: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4366:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4366:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4367:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4367:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4370:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4370:30: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[7].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4371:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4371:30: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[5].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4372:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:7: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4372:39: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_15basic_block_def ((*x).u.fld[3].rt_bb);
                                      ^          ~
./gtype-desc.h:1610:45: note: expanded from macro 'gt_pch_n_15basic_block_def'
  if (X != NULL) gt_pch_nx_basic_block_def (X);\
                                            ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4373:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4373:30: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[2].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4374:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4374:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4383:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4383:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4387:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:7: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
      ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:4387:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          gt_pch_n_7rtx_def ((*x).u.fld[1].rt_rtx);
                             ^          ~
./gtype-desc.h:1638:37: note: expanded from macro 'gt_pch_n_7rtx_def'
  if (X != NULL) gt_pch_nx_rtx_def (X);\
                                    ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6077:3: warning: switch condition has boolean value [-Wswitch-bool]
  switch (((((*x)).flags & BB_RTL) != 0))
  ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:6103:3: warning: switch condition has boolean value [-Wswitch-bool]
  switch (current_ir_type () == IR_GIMPLE)
  ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:6976:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (SYMBOL_REF_HAS_BLOCK_INFO_P (&(*x)))
      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gtype-desc.c:6561:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6579:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6587:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6967:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6976:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      switch (SYMBOL_REF_HAS_BLOCK_INFO_P (&(*x)))
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1425:5: note: expanded from macro 'SYMBOL_REF_HAS_BLOCK_INFO_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_HAS_BLOCK_INFO) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6989:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[2].rt_constant), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:6993:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[2].rt_tree), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7031:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_reg), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7085:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7093:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7095:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7115:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[5].rt_rtvec), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7117:15: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[4].rt_rtvec), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7119:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_rtvec), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7140:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      switch (NOTE_KIND (&(*x)))
              ^~~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7144:19: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[4].rt_str), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7154:19: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[4].rt_rtx), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7168:19: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[4].rt_tree), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7172:19: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[4].rt_tree), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7176:19: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
            op (&((*x).u.fld[4].rt_str), cookie);
                  ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7182:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_bb), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7184:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7190:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[7].rt_str), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7192:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[5].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7194:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_bb), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7196:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7202:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7208:15: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[8].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7210:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[7].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7212:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[5].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7214:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_bb), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7216:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7222:15: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[8].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7224:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[7].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7226:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[5].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7228:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_bb), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7230:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7236:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[7].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7238:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[5].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7240:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_bb), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7242:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7248:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[7].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7250:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[5].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7252:15: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[3].rt_bb), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
gtype-desc.c:7254:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
        op (&((*x).u.fld[2].rt_rtx), cookie);
              ^          ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
534 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o dwarf2out.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  dwarf2out.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
dwarf2out.c:1215:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          offset = INTVAL (XEXP (rtl, 1));
                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1220:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          offset = -INTVAL (XEXP (rtl, 1));
                            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1253:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  const_rtx src = SET_SRC (pattern);
                  ^~~~~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1279:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      offset = INTVAL (XEXP (src, 1));
                       ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1299:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx val = XEXP (XEXP (src, 1), 1);
                        ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1299:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              rtx val = XEXP (XEXP (src, 1), 1);
                              ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1355:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        offset = stack_adjust_offset (PATTERN (insn), cur_args_size, 0);
                                      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1361:22: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
                            ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1363:48: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i),
                                                      ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1396:18: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx dest = JUMP_LABEL (insn);
                 ^~~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1442:24: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          for (; insn; insn = NEXT_INSN (insn))
                              ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1466:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              body = PATTERN (insn);
                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1588:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          insn = PATTERN (insn);
                 ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1592:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            insn = SET_SRC (insn);
                   ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1594:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          dwarf2out_args_size ("", INTVAL (XEXP (insn, 1)));
                                           ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1626:35: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    offset = stack_adjust_offset (PATTERN (insn), args_size, 0);
                                  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1632:37: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (offset = 0, i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)
                                    ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1634:44: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i),
                                                  ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1831:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      cfa.offset = INTVAL (XEXP (pat, 1));
                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1855:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = XEXP (pat, 1);
        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1861:29: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      cfa.offset -= INTVAL (XEXP (src, 1));
                            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1885:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = XEXP (set, 1);
        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1899:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      offset = INTVAL (XEXP (addr, 1)) - cfa.offset;
                       ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:1941:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = XEXP (set, 1);
        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2222:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src = SET_SRC (expr);
        ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2288:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  offset = INTVAL (XEXP (src, 1));
                                   ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2291:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  gcc_assert ((unsigned) REGNO (XEXP (src, 1))
                                                ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1041:31: note: expanded from macro 'REGNO'
#define REGNO(RTX) (rhs_regno(RTX))
                              ^~~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2328:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              offset = INTVAL (XEXP (src, 1));
                               ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2345:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  offset = - INTVAL (XEXP (src, 1));
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2356:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                       && XEXP (src, 1) == stack_pointer_rtx)
                          ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2370:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  cfa_temp.offset = INTVAL (XEXP (src, 1));
                                            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2391:31: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          cfa_temp.offset |= INTVAL (XEXP (src, 1));
                                     ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2404:52: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          targetm.dwarf_handle_frame_unspec (label, expr, XINT (src, 1));
                                                          ^          ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2416:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              fde->stack_realignment = INTVAL (XEXP (src, 1));
                                               ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2444:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          offset = -INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1));
                            ^                               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2444:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          offset = -INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1));
                                  ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2496:23: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            offset = INTVAL (XEXP (XEXP (dest, 0), 1));
                             ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2701:15: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))
              ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2701:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))
                                             ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2717:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            n = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2728:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          n = single_set (insn);
              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2728:8: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          n = single_set (insn);
              ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2737:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            n = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2749:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
            n = PATTERN (insn);
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2779:10: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  insn = PATTERN (insn);
         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2797:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (i = NEXT_INSN (insn); i ; i = NEXT_INSN (i))
           ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2797:38: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (i = NEXT_INSN (insn); i ; i = NEXT_INSN (i))
                                     ^~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2811:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx seq = PATTERN (i);
                    ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2846:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx p = PREV_INSN (i);
              ^~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:2849:11: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (NOTE_KIND (p) == NOTE_INSN_BASIC_BLOCK)
          ^~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:3501:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SYMBOL_REF_FLAGS (sym_ref) |= SYMBOL_FLAG_LOCAL;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:3882:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SYMBOL_REF_FLAGS (ref) = SYMBOL_FLAG_LOCAL;
      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:4668:32: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
      && ((offset > 0 && *p <= INTTYPE_MAXIMUM (HOST_WIDE_INT) - offset)
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./system.h:281:44: note: expanded from macro 'INTTYPE_MAXIMUM'
#define INTTYPE_MAXIMUM(t) ((t) (~ (t) 0 - INTTYPE_MINIMUM (t)))
                                           ^~~~~~~~~~~~~~~~~~~
./system.h:280:40: note: expanded from macro 'INTTYPE_MINIMUM'
                             ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
                               ~~~~~~~ ^
dwarf2out.c:4669:28: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
          || (offset < 0 && *p >= INTTYPE_MINIMUM (HOST_WIDE_INT) - offset)))
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./system.h:280:40: note: expanded from macro 'INTTYPE_MINIMUM'
                             ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
                               ~~~~~~~ ^
dwarf2out.c:7773:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((!rtx_equal_p (NOTE_VAR_LOCATION_LOC (temp->last->var_loc_note),
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:7773:26: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if ((!rtx_equal_p (NOTE_VAR_LOCATION_LOC (temp->last->var_loc_note),
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:7774:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         NOTE_VAR_LOCATION_LOC (loc_note)))
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:7774:5: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         NOTE_VAR_LOCATION_LOC (loc_note)))
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12739:26: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              offset += INTVAL (XEXP (elim, 1));
                                ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12814:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
      ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12814:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
      ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12814:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
                                     ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12814:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)
                                     ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12817:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  base = get_base_address (MEM_EXPR (mem));
                           ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12817:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  base = get_base_address (MEM_EXPR (mem));
                           ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12823:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  loc_result = loc_descriptor_from_tree (MEM_EXPR (mem), 1);
                                         ^~~~~~~~~~~~~~
./rtl.h:1267:24: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                       ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12823:42: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  loc_result = loc_descriptor_from_tree (MEM_EXPR (mem), 1);
                                         ^~~~~~~~~~~~~~
./rtl.h:1267:51: note: expanded from macro 'MEM_EXPR'
#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)
                                                  ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12827:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INTVAL (MEM_OFFSET (mem)))
              ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12827:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INTVAL (MEM_OFFSET (mem)))
              ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12828:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    loc_descr_plus_const (&loc_result, INTVAL (MEM_OFFSET (mem)));
                                               ^~~~~~~~~~~~~~~~
./rtl.h:1271:26: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                         ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12828:48: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    loc_descr_plus_const (&loc_result, INTVAL (MEM_OFFSET (mem)));
                                               ^~~~~~~~~~~~~~~~
./rtl.h:1271:53: note: expanded from macro 'MEM_OFFSET'
#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)
                                                    ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12894:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12902:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (SYMBOL_REF_EXTERNAL_P (rtl))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1421:5: note: expanded from macro 'SYMBOL_REF_EXTERNAL_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_EXTERNAL) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:12904:19: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      tree decl = SYMBOL_REF_DECL (rtl);
                  ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13068:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
         rtl = XEXP (rtl, 1);
               ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13079:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)
             ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13118:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtl = XEXP (rtl, 1);
            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13136:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          INTVAL (XEXP (rtl, 1)),
                                                  ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13146:53: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            loc_descr_plus_const (&mem_loc_result, INTVAL (XEXP (rtl, 1)));
                                                           ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13150:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = mem_loc_descriptor (XEXP (rtl, 1), mode,
                                      ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13206:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
                                ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13220:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
                                ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13301:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13340:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 == (INTVAL (XEXP (rtl, 1))
                                             ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13347:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) << shift);
                                                  ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13399:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13429:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) & mask);
                                                  ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13446:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          + INTVAL (XEXP (rtl, 1)));
                                                    ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13465:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,
                                ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13543:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          size = INTVAL (XEXP (rtl, 1));
                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13544:20: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          shift = INTVAL (XEXP (rtl, 2));
                          ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13752:58: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      loc_result = concat_loc_descriptor (XEXP (rtl, 0), XEXP (rtl, 1),
                                                         ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13764:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx loc = PAT_VAR_LOCATION_LOC (rtl);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13771:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtl = XEXP (rtl, 1);
            ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:13838:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                = CONST_DOUBLE_HIGH (rtl);
                  ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
dwarf2out.c:13875:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      hi = CONST_DOUBLE_HIGH (elt);
                           ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
dwarf2out.c:14021:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          varloc = PAT_VAR_LOCATION_LOC (varloc);
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14126:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14126:9: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
    if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14131:11: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
        varloc = NOTE_VAR_LOCATION (node->var_loc_note);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14143:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14143:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (NOTE_VAR_LOCATION_LOC (node->var_loc_note) != NULL_RTX)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14146:16: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      varloc = NOTE_VAR_LOCATION (node->var_loc_note);
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:14269:26: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!TREE_ASM_WRITTEN (SYMBOL_REF_DECL (XEXP (rtl, 0))))
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:1286:34: note: expanded from macro 'TREE_ASM_WRITTEN'
#define TREE_ASM_WRITTEN(NODE) ((NODE)->base.asm_written_flag)
                                 ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:15344:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                         CONST_DOUBLE_HIGH (rtl), CONST_DOUBLE_LOW (rtl));
                         ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
dwarf2out.c:15374:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    hi = CONST_DOUBLE_HIGH (elt);
                         ^~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
dwarf2out.c:15823:7: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || SYMBOL_REF_DECL (XEXP (rtl, 0)) != decl)
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:15919:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && NOTE_VAR_LOCATION (loc_list->first->var_loc_note)
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:15920:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && NOTE_VAR_LOCATION_LOC (loc_list->first->var_loc_note))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:15920:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && NOTE_VAR_LOCATION_LOC (loc_list->first->var_loc_note))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:15925:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtl = NOTE_VAR_LOCATION_LOC (node->var_loc_note);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:3: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:894:36: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                   ^             ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:15925:13: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtl = NOTE_VAR_LOCATION_LOC (node->var_loc_note);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:906:25: note: expanded from macro 'NOTE_VAR_LOCATION_LOC'
  PAT_VAR_LOCATION_LOC (NOTE_VAR_LOCATION (NOTE))
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:894:44: note: expanded from macro 'PAT_VAR_LOCATION_LOC'
#define PAT_VAR_LOCATION_LOC(PAT) (XCEXP ((PAT), 1, VAR_LOCATION))
                                           ^~~
./rtl.h:739:45: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:16270:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      offset += INTVAL (XEXP (elim, 1));
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:18456:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                   && NOTE_KIND (insn) == NOTE_INSN_DELETED_LABEL))))
                      ^~~~~~~~~~~~~~~~
./rtl.h:885:25: note: expanded from macro 'NOTE_KIND'
#define NOTE_KIND(INSN) XCINT (INSN, 5, NOTE)
                        ^            ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:20367:10: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  decl = NOTE_VAR_LOCATION_DECL (loc_note);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:904:26: note: expanded from macro 'NOTE_VAR_LOCATION_DECL'
  PAT_VAR_LOCATION_DECL (NOTE_VAR_LOCATION (NOTE))
                         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:881:33: note: expanded from macro 'NOTE_VAR_LOCATION'
#define NOTE_VAR_LOCATION(INSN) XCEXP (INSN, 4, NOTE)
                                ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:893:46: note: expanded from macro 'PAT_VAR_LOCATION_DECL'
#define PAT_VAR_LOCATION_DECL(PAT) (XCTREE ((PAT), 0, VAR_LOCATION))
                                             ^~~
./rtl.h:743:45: note: expanded from macro 'XCTREE'
#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)
                                            ^~~
./rtl.h:595:38: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:21188:10: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && SYMBOL_REF_DECL (rtl)
         ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
dwarf2out.c:21190:29: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && !TREE_ASM_WRITTEN (SYMBOL_REF_DECL (rtl)))
                            ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./tree.h:1286:34: note: expanded from macro 'TREE_ASM_WRITTEN'
#define TREE_ASM_WRITTEN(NODE) ((NODE)->base.asm_written_flag)
                                 ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from dwarf2out.c:21656:
./gt-dwarf2out.h:484:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (dwarf_version >= 4)
      ^       ~~~~~~~~~~~~~~~~~~
./gt-dwarf2out.h:1047:7: warning: switch condition has boolean value [-Wswitch-bool]
      switch (dwarf_version >= 4)
      ^       ~~~~~~~~~~~~~~~~~~
./gt-dwarf2out.h:1673:3: warning: switch condition has boolean value [-Wswitch-bool]
  switch (dwarf_version >= 4)
  ^       ~~~~~~~~~~~~~~~~~~
120 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o i386.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  i386.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
In file included from i386.c:40:
./recog.h:152:7: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (INSN_CODE (insn) < 0)
      ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from i386.c:40:
./recog.h:153:31: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
                              ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from i386.c:40:
./recog.h:153:5: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);
    ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from i386.c:40:
./recog.h:154:10: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return INSN_CODE (insn);
         ^~~~~~~~~~~~~~~~
./rtl.h:775:25: note: expanded from macro 'INSN_CODE'
#define INSN_CODE(INSN) XINT (INSN, 6)
                        ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
In file included from i386.c:40:
./recog.h:276:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAVE_DESIGNATED_INITIALIZERS
    ^
./system.h:486:8: note: expanded from macro 'HAVE_DESIGNATED_INITIALIZERS'
   && !defined(__cplusplus))
       ^
i386.c:7263:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = PATTERN (insn);
        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:7730:6: warning: array index 6 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                 CODE_LABEL_NUMBER (XEXP (xops[2], 0)));
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:866:33: note: expanded from macro 'CODE_LABEL_NUMBER'
#define CODE_LABEL_NUMBER(INSN) XINT (INSN, 6)
                                ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8215:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last = queued_cfa_restores; XEXP (last, 1); last = XEXP (last, 1))
                                   ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8215:59: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (last = queued_cfa_restores; XEXP (last, 1); last = XEXP (last, 1))
                                                          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8217:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (last, 1) = REG_NOTES (insn);
  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8217:20: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  XEXP (last, 1) = REG_NOTES (insn);
                   ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8218:3: warning: array index 7 is past the end of the array (which contains 1 element) [-Warray-bounds]
  REG_NOTES (insn) = queued_cfa_restores;
  ^~~~~~~~~~~~~~~~
./rtl.h:834:25: note: expanded from macro 'REG_NOTES'
#define REG_NOTES(INSN) XEXP(INSN, 7)
                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8408:37: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      insn = emit_insn_before (seq, NEXT_INSN (entry_of_function ()));
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8806:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    copy_rtx (XVECEXP (PATTERN (insn), 0, 1)));
                                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:8861:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    copy_rtx (XVECEXP (PATTERN (insn), 0, 0)));
                                       ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9283:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                        copy_rtx (XVECEXP (PATTERN (insn), 0, 1)));
                                           ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:597:35: note: expanded from macro 'RTVEC_ELT'
#define RTVEC_ELT(RTVEC, I)         ((RTVEC)->elem[I])
                                      ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9357:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          addends[n++] = XEXP (op, 1);
                         ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9374:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              scale_rtx = XEXP (op, 1);
                          ^         ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9378:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (XINT (op, 1) == UNSPEC_TP
                  ^         ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9413:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      scale_rtx = XEXP (addr, 1);
                  ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9421:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      tmp = XEXP (addr, 1);
            ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9564:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XINT (disp, 1) == UNSPEC_MACHOPIC_OFFSET);
             ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9590:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        switch (XINT (x, 1))
                ^        ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9600:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_EXEC);
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9604:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC);
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9618:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (SYMBOL_REF_TLS_MODEL (x))
          ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9687:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        switch (XINT (inner, 1))
                ^            ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9696:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_EXEC);
                       ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9795:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  switch (XINT (disp, 1))
          ^           ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9821:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SYMBOL_REF_TLS_MODEL (disp) == TLS_MODEL_INITIAL_EXEC);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9825:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SYMBOL_REF_TLS_MODEL (disp) == TLS_MODEL_LOCAL_EXEC);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9829:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              && SYMBOL_REF_TLS_MODEL (disp) == TLS_MODEL_LOCAL_DYNAMIC);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9937:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XINT (XEXP (disp, 0), 1) != UNSPEC_MACHOPIC_OFFSET)
             ^                     ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:9938:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        switch (XINT (XEXP (disp, 0), 1))
                ^                     ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10139:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
            new_rtx = gen_rtx_PLUS (Pmode, new_rtx, XEXP (addr, 1));
                                                    ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:328:42: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                         ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10152:46: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (addr) == 0)
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10234:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx op0 = XEXP (addr, 0), op1 = XEXP (addr, 1);
                                          ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10271:43: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              new_rtx  = legitimize_pic_address (XEXP (addr, 1),
                                                 ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10281:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                      new_rtx = XEXP (new_rtx, 1);
                                ^              ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10517:3: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  SET_SYMBOL_REF_DECL (rtl, to);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1375:49: note: expanded from macro 'SET_SYMBOL_REF_DECL'
  (gcc_assert (!CONSTANT_POOL_ADDRESS_P (RTX)), X0TREE ((RTX), 2) = (DECL))
                                                ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10518:3: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  SYMBOL_REF_FLAGS (rtl) = SYMBOL_FLAG_LOCAL;
  ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10538:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  gcc_assert (SYMBOL_REF_DECL (symbol));
              ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./system.h:625:16: note: expanded from macro 'gcc_assert'
     ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, "?"), 0 : 0))
               ^~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10539:34: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  imp_decl = get_dllimport_decl (SYMBOL_REF_DECL (symbol));
                                 ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1379:43: note: expanded from macro 'SYMBOL_REF_DECL'
  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))
                                          ^              ~
./rtl.h:725:28: note: expanded from macro 'X0TREE'
#define X0TREE(RTX, N)     (RTL_CHECK1 (RTX, N, '0').rt_tree)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10572:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  log = GET_CODE (x) == SYMBOL_REF ? SYMBOL_REF_TLS_MODEL (x) : 0;
                                     ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10578:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && (log = SYMBOL_REF_TLS_MODEL (XEXP (XEXP (x, 0), 0))))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10582:38: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      return gen_rtx_PLUS (Pmode, t, XEXP (XEXP (x, 0), 1));
                                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:328:42: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                         ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10608:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      log = INTVAL (XEXP (x, 1));
                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10622:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          log = INTVAL (XEXP (XEXP (x, 0), 1));
                        ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10633:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          log = INTVAL (XEXP (XEXP (x, 1), 1));
                        ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10633:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          log = INTVAL (XEXP (XEXP (x, 1), 1));
                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10635:35: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                      force_reg (Pmode, XEXP (XEXP (x, 1), 0)),
                                                              ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./genrtl.h:334:34: note: expanded from macro 'gen_rtx_MULT'
  gen_rtx_fmt_ee (MULT, (MODE), (ARG0), (ARG1))
                                 ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10634:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (x, 1) = gen_rtx_MULT (Pmode,
          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10643:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (x, 0) = XEXP (x, 1);
                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10644:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (x, 1) = tmp;
          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10657:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                          XEXP (XEXP (x, 1), 0)),
                                                ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./genrtl.h:328:34: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                 ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10658:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            XEXP (XEXP (x, 1), 1));
                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./genrtl.h:328:42: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                         ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10658:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                            XEXP (XEXP (x, 1), 1));
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./genrtl.h:328:42: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                         ^~~~
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10674:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              constant = XEXP (x, 1);
                         ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10675:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              other = XEXP (XEXP (XEXP (x, 0), 1), 1);
                      ^                            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10675:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              other = XEXP (XEXP (XEXP (x, 0), 1), 1);
                            ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10679:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              constant = XEXP (XEXP (XEXP (x, 0), 1), 1);
                         ^                            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10679:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              constant = XEXP (XEXP (XEXP (x, 0), 1), 1);
                               ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10680:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              other = XEXP (x, 1);
                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10690:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                              XEXP (XEXP (XEXP (x, 0), 1), 0)),
                                                    ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
note: (skipping 2 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./genrtl.h:15:40: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                       ^~
./genrtl.h:328:34: note: expanded from macro 'gen_rtx_PLUS'
  gen_rtx_fmt_ee (PLUS, (MODE), (ARG0), (ARG1))
                                 ^~~~
./genrtl.h:15:36: note: expanded from macro 'gen_rtx_fmt_ee'
        gen_rtx_fmt_ee_stat (c, m, p0, p1 MEM_STAT_INFO)
                                   ^~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10707:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (x, 1) = force_operand (XEXP (x, 1), 0);
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10707:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (x, 1) = force_operand (XEXP (x, 1), 0);
          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10715:39: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (flag_pic && SYMBOLIC_CONST (XEXP (x, 1)))
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./config/i386/i386.h:1789:65: note: expanded from macro 'SYMBOLIC_CONST'
   || (GET_CODE (X) == CONST && symbolic_reference_mentioned_p (X)))
                                                                ^
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10727:30: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx val  = force_operand (XEXP (x, 1), temp);
                                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10731:4: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          XEXP (x, 1) = temp;
          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10787:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && code == 'P' && ! SYMBOL_REF_LOCAL_P (x))
                              ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1408:5: note: expanded from macro 'SYMBOL_REF_LOCAL_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_LOCAL) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10813:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (CONST_DOUBLE_HIGH (x) || CONST_DOUBLE_LOW (x) < 0)
              ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1091:30: note: expanded from macro 'CONST_DOUBLE_HIGH'
#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)
                             ^           ~
./rtl.h:600:36: note: expanded from macro 'XCMWINT'
#define XCMWINT(RTX, N, C, M)       ((RTX)->u.hwint[N])
                                     ^              ~
./rtl.h:317:5: note: array 'hwint' declared here
    HOST_WIDE_INT hwint[1];
    ^
./hwint.h:61:26: note: expanded from macro 'HOST_WIDE_INT'
#   define HOST_WIDE_INT long
                         ^
i386.c:10832:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          output_pic_addr_const (file, XEXP (x, 1), code);
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10837:33: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          output_pic_addr_const (file, XEXP (x, 1), code);
                                       ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10848:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      output_pic_addr_const (file, XEXP (x, 1), code);
                                   ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:10856:16: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
       switch (XINT (x, 1))
               ^        ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11000:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
        reg_addend = XEXP (reg_addend, 1);
                     ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11001:37: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      else if (ix86_pic_register_p (XEXP (reg_addend, 1)))
                                    ^                 ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11012:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  x = XEXP (XEXP (x, 1), 0);
            ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11016:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      const_addend = XEXP (x, 1);
                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11021:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((XINT (x, 1) == UNSPEC_GOT && MEM_P (orig_x) && !addend)
           ^        ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11022:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (XINT (x, 1) == UNSPEC_GOTOFF && !MEM_P (orig_x))))
              ^        ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11374:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)
         ^~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11391:43: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))
                                          ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:11393:20: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
        && for_each_rtx (&PATTERN (insn), get_some_local_dynamic_name_1, 0))
                          ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:12133:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  offset = XEXP (XEXP (disp, 0), 1);
                           ^                     ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:12185:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  switch (XINT (x, 1))
          ^        ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:12540:23: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (asm_noperands (PATTERN (insn)) >= 0
                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:12956:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      model = SYMBOL_REF_TLS_MODEL (op1);
              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:12972:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx addend = XEXP (XEXP (op1, 0), 1);
                   ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:12976:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      model = SYMBOL_REF_TLS_MODEL (symbol);
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1417:23: note: expanded from macro 'SYMBOL_REF_TLS_MODEL'
  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 7))
                      ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13093:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((MEM_P (op0) && (MEM_ALIGN (op0) < align))
                           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13093:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && ((MEM_P (op0) && (MEM_ALIGN (op0) < align))
                           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13094:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (MEM_P (op1) && (MEM_ALIGN (op1) < align))))
                              ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13094:24: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          || (MEM_P (op1) && (MEM_ALIGN (op1) < align))))
                              ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13628:20: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block bb = BLOCK_FOR_INSN (insn);
                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13635:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx prev = PREV_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13654:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          prev = PREV_INSN (prev);
                 ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13692:15: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              prev = PREV_INSN (prev);
                     ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13714:20: warning: array index 3 is past the end of the array (which contains 1 element) [-Warray-bounds]
  basic_block bb = BLOCK_FOR_INSN (insn);
                   ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:762:30: note: expanded from macro 'BLOCK_FOR_INSN'
#define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 3)
                             ^             ~
./rtl.h:709:25: note: expanded from macro 'XBBDEF'
#define XBBDEF(RTX, N)  (RTL_CHECK1 (RTX, N, 'B').rt_bb)
                         ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13721:18: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx next = NEXT_INSN (insn);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13749:11: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          next = NEXT_INSN (next);
                 ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13797:15: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
              next = NEXT_INSN (next);
                     ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13884:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      shift_rtx = XEXP (use_body, 1);
                  ^               ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13903:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx shift_count = XEXP (shift_rtx, 1);
                        ^                ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13920:40: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return ix86_dep_by_shift_count_body (PATTERN (set_insn),
                                       ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:13921:12: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
                                       PATTERN (use_insn));
                                       ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:14524:9: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  set = PATTERN (insn);
        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:14536:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || XEXP (SET_SRC (set), 1) != const0_rtx))
                 ^                    ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:14536:17: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || XEXP (SET_SRC (set), 1) != const0_rtx))
                       ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:704:35: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:15479:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ix86_compare_op1 = XEXP (operands[1], 1);
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:16179:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ix86_compare_op1 = XEXP (operands[1], 1);
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:16495:22: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  ix86_compare_op1 = XEXP (operands[1], 1);
                     ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:16706:38: warning: signed shift result (0x100000000) requires 34 bits to represent, but 'long' only has 32 bits [-Wshift-overflow]
                      ((l[0] & (((HOST_WIDE_INT) 2 << 31) - 1))
                                 ~~~~~~~~~~~~~~~~~ ^  ~~
i386.c:16717:38: warning: signed shift result (0x100000000) requires 34 bits to represent, but 'long' only has 32 bits [-Wshift-overflow]
                      ((l[2] & (((HOST_WIDE_INT) 2 << 31) - 1))
                                 ~~~~~~~~~~~~~~~~~ ^  ~~
i386.c:17527:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_SIZE (destmem))
          ^~~~~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17527:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_SIZE (destmem))
          ^~~~~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17529:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_SIZE (srcmem))
          ^~~~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17529:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_SIZE (srcmem))
          ^~~~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17565:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (MEM_SIZE (destmem))
           ^~~~~~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17565:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (MEM_SIZE (destmem))
           ^~~~~~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17651:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (label) = 1;
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17660:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (label) = 1;
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17669:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (label) = 1;
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17688:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (label) = 1;
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17703:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (label) = 1;
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17714:4: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
          LABEL_NUSES (label) = 1;
          ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17815:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17832:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17840:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17848:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17856:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17875:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17885:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17895:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17912:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src_size = MEM_SIZE (src);
             ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17912:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  src_size = MEM_SIZE (src);
             ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17913:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  dst_size = MEM_SIZE (dst);
             ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17913:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  dst_size = MEM_SIZE (dst);
             ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17925:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 2 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17925:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 2 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17929:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_ALIGN (src) < 2 * BITS_PER_UNIT)
             ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17929:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && MEM_ALIGN (src) < 2 * BITS_PER_UNIT)
             ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17938:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 4 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17938:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 4 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17947:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ALIGN (src) < src_align * BITS_PER_UNIT)
              ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17947:8: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          if (MEM_ALIGN (src) < src_align * BITS_PER_UNIT)
              ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17955:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIGN (dst) < (unsigned int) desired_align * BITS_PER_UNIT)
      ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17955:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIGN (dst) < (unsigned int) desired_align * BITS_PER_UNIT)
      ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17968:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (src) < src_align * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17968:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (src) < src_align * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:17992:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18001:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18010:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18022:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx dst_size = MEM_SIZE (dst);
                 ^~~~~~~~~~~~~~
./rtl.h:1280:2: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18022:18: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  rtx dst_size = MEM_SIZE (dst);
                 ^~~~~~~~~~~~~~
./rtl.h:1280:25: note: expanded from macro 'MEM_SIZE'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size                           \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18033:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 2 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18033:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 2 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18042:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 4 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18042:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (MEM_ALIGN (dst) < 4 * BITS_PER_UNIT)
          ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18049:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIGN (dst) < (unsigned int) desired_align * BITS_PER_UNIT)
      ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18049:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (MEM_ALIGN (dst) < (unsigned int) desired_align * BITS_PER_UNIT)
      ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18300:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (MEM_ALIGN (dst) > (unsigned HOST_WIDE_INT) align * BITS_PER_UNIT)
           ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18300:12: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  else if (MEM_ALIGN (dst) > (unsigned HOST_WIDE_INT) align * BITS_PER_UNIT)
           ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18301:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    align = MEM_ALIGN (dst) / BITS_PER_UNIT;
            ^~~~~~~~~~~~~~~
./rtl.h:1287:2: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
 ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18301:13: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    align = MEM_ALIGN (dst) / BITS_PER_UNIT;
            ^~~~~~~~~~~~~~~
./rtl.h:1287:25: note: expanded from macro 'MEM_ALIGN'
(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align                          \
                        ^~~~~~~~~~~~~~~
./rtl.h:1251:24: note: expanded from macro 'MEM_ATTRS'
#define MEM_ATTRS(RTX) X0MEMATTR (RTX, 1)
                       ^               ~
./rtl.h:729:29: note: expanded from macro 'X0MEMATTR'
#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)
                            ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18485:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18560:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18877:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:18943:7: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
      LABEL_NUSES (label) = 1;
      ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19113:8: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
       JUMP_LABEL (tmp) = end_2_label;
       ^~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19238:9: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && ! SYMBOL_REF_LOCAL_P (XEXP (fnaddr, 0)))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1408:5: note: expanded from macro 'SYMBOL_REF_LOCAL_P'
  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_LOCAL) != 0)
    ^~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19305:5: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
    CALL_INSN_FUNCTION_USAGE (call) = use;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:861:40: note: expanded from macro 'CALL_INSN_FUNCTION_USAGE'
#define CALL_INSN_FUNCTION_USAGE(INSN)  XEXP(INSN, 8)
                                        ^          ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19387:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      SYMBOL_REF_FLAGS (ix86_tls_module_base_symbol)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19578:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      rtx set = PATTERN (insn), addr;
                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19585:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      addr = SET_SRC (set);
             ^~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19705:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((set = single_set (dep_insn)) != 0)
             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19705:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if ((set = single_set (dep_insn)) != 0)
             ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19711:17: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
           && XVECLEN (PATTERN (dep_insn), 0) == 2
                       ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 1 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:705:35: note: expanded from macro 'XVEC'
#define XVEC(RTX, N)    (RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:366:32: note: expanded from macro 'GET_NUM_ELEM'
#define GET_NUM_ELEM(RTVEC)             ((RTVEC)->num_elem)
                                          ^~~~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19715:32: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set = SET_DEST (XVECEXP (PATTERN (dep_insn), 0, 0));
                               ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19716:33: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      set2 = SET_DEST (XVECEXP (PATTERN (dep_insn), 0, 0));
                                ^~~~~~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
note: (skipping 4 expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)
./rtl.h:1329:30: note: expanded from macro 'SET_DEST'
#define SET_DEST(RTX) XC2EXP(RTX, 0, SET, CLOBBER)
                             ^~~
./rtl.h:750:51: note: expanded from macro 'XC2EXP'
#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)
                                                  ^~~
./rtl.h:596:39: note: expanded from macro 'RTL_CHECKC2'
#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19726:38: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (!reg_overlap_mentioned_p (set, PATTERN (insn)))
                                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19729:46: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  if (set2 && reg_overlap_mentioned_p (set2, PATTERN (insn)))
                                             ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19779:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx addr = PATTERN (insn);
                     ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19786:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          addr = SET_SRC (addr);
                 ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19813:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (set = single_set (dep_insn)) != NULL_RTX
                    ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19813:14: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (set = single_set (dep_insn)) != NULL_RTX
                    ^~~~~~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19814:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (set2 = single_set (insn)) != NULL_RTX
                     ^~~~~~~~~~~~~~~~~
./rtl.h:1801:22: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                                          ^~~~~~~~~~~~~~~~
./rtl.h:1803:42: note: expanded from macro 'single_set_1'
#define single_set_1(I) single_set_2 (I, PATTERN (I))
                                         ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19814:15: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && (set2 = single_set (insn)) != NULL_RTX
                     ^~~~~~~~~~~~~~~~~
./rtl.h:1801:8: note: expanded from macro 'single_set'
                          ? PATTERN (I) : single_set_1 (I)) \
                            ^~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:19815:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && rtx_equal_p (SET_DEST (set), SET_SRC (set2))
                                          ^~~~~~~~~~~~~~
./rtl.h:1330:22: note: expanded from macro 'SET_SRC'
#define SET_SRC(RTX) XCEXP(RTX, 1, SET)
                     ^          ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25605:34: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          HOST_WIDE_INT value = INTVAL (XEXP (x, 1));
                                        ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25628:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              if (INTVAL (XEXP (x, 1)) > 32)
                          ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25671:14: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          rtx op1 = XEXP (x, 1);
                    ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25675:47: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              unsigned HOST_WIDE_INT value = INTVAL (XEXP (x, 1));
                                                     ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25738:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              HOST_WIDE_INT val = INTVAL (XEXP (XEXP (XEXP (x, 0), 0), 1));
                                          ^                            ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25742:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  *total += rtx_cost (XEXP (XEXP (x, 0), 1), outer_code, speed);
                                      ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25745:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  *total += rtx_cost (XEXP (x, 1), outer_code, speed);
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25752:36: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              HOST_WIDE_INT val = INTVAL (XEXP (XEXP (x, 0), 1));
                                          ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:1082:28: note: expanded from macro 'INTVAL'
#define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)
                           ^~~
./rtl.h:599:33: note: expanded from macro 'XCWINT'
#define XCWINT(RTX, N, C)           ((RTX)->u.hwint[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25757:25: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  *total += rtx_cost (XEXP (x, 1), outer_code, speed);
                                      ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25765:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              *total += rtx_cost (XEXP (XEXP (x, 0), 1), outer_code, speed);
                                  ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25766:28: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
              *total += rtx_cost (XEXP (x, 1), outer_code, speed);
                                  ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25800:20: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
                    + (rtx_cost (XEXP (x, 1), outer_code, speed)
                                 ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25835:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (XEXP (x, 0), 1) == const1_rtx
             ^                  ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25837:7: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
          && XEXP (x, 1) == const0_rtx)
             ^        ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:25876:11: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (XINT (x, 1) == UNSPEC_TP)
          ^        ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26428:10: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XINT (PATTERN (insn), 1) == UNSPECV_ALIGN)
         ^                     ~
./rtl.h:702:23: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26428:16: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && XINT (PATTERN (insn), 1) == UNSPECV_ALIGN)
               ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:702:35: note: expanded from macro 'XINT'
#define XINT(RTX, N)    (RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)
                                     ^~~
./rtl.h:594:39: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                      ^~~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26436:42: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      && symbolic_reference_mentioned_p (PATTERN (insn))
                                         ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26453:26: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
              || asm_noperands (PATTERN (insn)) >= 0)
                                ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26465:52: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
      if (l < 4 && symbolic_reference_mentioned_p (PATTERN (insn)))
                                                   ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26494:35: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
  for (insn = start; insn; insn = NEXT_INSN (insn))
                                  ^~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26519:13: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
                  start = NEXT_INSN (start);
                          ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26548:12: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]
          start = NEXT_INSN (start);
                  ^~~~~~~~~~~~~~~~~
./rtl.h:760:25: note: expanded from macro 'NEXT_INSN'
#define NEXT_INSN(INSN) XEXP (INSN, 2)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26596:19: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (prev = PREV_INSN (ret); prev; prev = PREV_INSN (prev))
                  ^~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26596:49: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
      for (prev = PREV_INSN (ret); prev; prev = PREV_INSN (prev))
                                                ^~~~~~~~~~~~~~~~
./rtl.h:759:25: note: expanded from macro 'PREV_INSN'
#define PREV_INSN(INSN) XEXP (INSN, 1)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:26676:41: warning: array index 5 is past the end of the array (which contains 1 element) [-Warray-bounds]
  return for_each_rtx (INSN_P (insn) ? &PATTERN (insn) : &insn,
                                        ^~~~~~~~~~~~~~
./rtl.h:771:23: note: expanded from macro 'PATTERN'
#define PATTERN(INSN)   XEXP (INSN, 5)
                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28060:5: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
    SYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_FAR_ADDR;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:1396:31: note: expanded from macro 'SYMBOL_REF_FLAGS'
#define SYMBOL_REF_FLAGS(RTX)   X0INT ((RTX), 1)
                                ^             ~
./rtl.h:718:27: note: expanded from macro 'X0INT'
#define X0INT(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_int)
                            ^                ~
./rtl.h:593:38: note: expanded from macro 'RTL_CHECK1'
#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28165:57: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]
  emit_jump_insn (gen_cbranchxf4 (test, XEXP (test, 0), XEXP (test, 1), label1));
                                                        ^           ~
./rtl.h:704:23: note: expanded from macro 'XEXP'
#define XEXP(RTX, N)    (RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)
                         ^                ~
./rtl.h:594:38: note: expanded from macro 'RTL_CHECK2'
#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28459:3: warning: array index 8 is past the end of the array (which contains 1 element) [-Warray-bounds]
  JUMP_LABEL (tmp) = label;
  ^~~~~~~~~~~~~~~~
./rtl.h:1032:28: note: expanded from macro 'JUMP_LABEL'
#define JUMP_LABEL(INSN)   XCEXP (INSN, 8, JUMP_INSN)
                           ^            ~
./rtl.h:739:32: note: expanded from macro 'XCEXP'
#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28566:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28602:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28664:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28725:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28798:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28842:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28900:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
i386.c:28949:3: warning: array index 4 is past the end of the array (which contains 1 element) [-Warray-bounds]
  LABEL_NUSES (label) = 1;
  ^~~~~~~~~~~~~~~~~~~
./rtl.h:977:26: note: expanded from macro 'LABEL_NUSES'
#define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)
                         ^           ~
./rtl.h:736:32: note: expanded from macro 'XCINT'
#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)
                               ^                 ~
./rtl.h:595:37: note: expanded from macro 'RTL_CHECKC1'
#define RTL_CHECKC1(RTX, N, C)      ((RTX)->u.fld[N])
                                     ^            ~
./rtl.h:316:5: note: array 'fld' declared here
    rtunion fld[1];
    ^
226 warnings generated.
/opt/wasi-sdk/bin/clang --sysroot /opt/wasi-sdk/share/wasi-sysroot -Wl,--export-all -I/opt/wasi-sdk/lib/clang/10.0.0/include/ -c -o fold-const.o -DSPEC -DNDEBUG -I. -I./include -I./spec_qsort -DSPEC_602 -DIN_GCC -DHAVE_CONFIG_H    -O2 -fno-strict-aliasing  -DSPEC_SUPPRESS_OPENMP              -DSPEC_LP64  fold-const.c
clang-10: warning: -Wl,--export-all: 'linker' input unused [-Wunused-command-line-argument]
fold-const.c:180:14: warning: shift count >= width of type [-Wshift-count-overflow]
  words[0] = LOWPART (low);
             ^~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:181:14: warning: shift count >= width of type [-Wshift-count-overflow]
  words[1] = HIGHPART (low);
             ^~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:182:14: warning: shift count >= width of type [-Wshift-count-overflow]
  words[2] = LOWPART (hi);
             ^~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:183:14: warning: shift count >= width of type [-Wshift-count-overflow]
  words[3] = HIGHPART (hi);
             ^~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:194:32: warning: shift count >= width of type [-Wshift-count-overflow]
  *low = words[0] + words[1] * BASE;
                               ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:195:31: warning: shift count >= width of type [-Wshift-count-overflow]
  *hi = words[2] + words[3] * BASE;
                              ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:402:14: warning: shift count >= width of type [-Wshift-count-overflow]
          prod[k] = LOWPART (carry);
                    ^~~~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:403:12: warning: shift count >= width of type [-Wshift-count-overflow]
          carry = HIGHPART (carry);
                  ^~~~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:507:40: warning: shift count >= width of type [-Wshift-count-overflow]
              ? -((unsigned HOST_WIDE_INT) h1 >> (HOST_BITS_PER_WIDE_INT - 1))
                                              ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:677:52: warning: shift count >= width of type [-Wshift-count-overflow]
  if (hden == 0 && lden < (unsigned HOST_WIDE_INT) BASE)
                                                   ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:682:28: warning: shift count >= width of type [-Wshift-count-overflow]
          work = num[i] + carry * BASE;
                                  ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:705:15: warning: shift count >= width of type [-Wshift-count-overflow]
      scale = BASE / (den[den_hi_sig] + 1);
              ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:712:17: warning: shift count >= width of type [-Wshift-count-overflow]
              num[i] = LOWPART (work);
                       ^~~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:713:16: warning: shift count >= width of type [-Wshift-count-overflow]
              carry = HIGHPART (work);
                      ^~~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:721:17: warning: shift count >= width of type [-Wshift-count-overflow]
              den[i] = LOWPART (work);
                       ^~~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:722:16: warning: shift count >= width of type [-Wshift-count-overflow]
              carry = HIGHPART (work);
                      ^~~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:738:29: warning: shift count >= width of type [-Wshift-count-overflow]
          work = num[num_hi_sig] * BASE + num[num_hi_sig - 1];
                                   ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:742:16: warning: shift count >= width of type [-Wshift-count-overflow]
            quo_est = BASE - 1;
                      ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:746:14: warning: shift count >= width of type [-Wshift-count-overflow]
          if (tmp < BASE
                    ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:748:14: warning: shift count >= width of type [-Wshift-count-overflow]
                  > (tmp * BASE + num[num_hi_sig - 2])))
                           ^~~~
fold-const.c:171:42: note: expanded from macro 'BASE'
#define BASE ((unsigned HOST_WIDE_INT) 1 << HOST_BITS_PER_WIDE_INT / 2)
                                         ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:759:16: warning: shift count >= width of type [-Wshift-count-overflow]
              carry = HIGHPART (work);
                      ^~~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:760:28: warning: shift count >= width of type [-Wshift-count-overflow]
              work = num[i + j] - LOWPART (work);
                                  ^~~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:761:21: warning: shift count >= width of type [-Wshift-count-overflow]
              num[i + j] = LOWPART (work);
                           ^~~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:762:17: warning: shift count >= width of type [-Wshift-count-overflow]
              carry += HIGHPART (work) != 0;
                       ^~~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:774:13: warning: shift count >= width of type [-Wshift-count-overflow]
                  carry = HIGHPART (work);
                          ^~~~~~~~~~~~~~~
fold-const.c:170:33: note: expanded from macro 'HIGHPART'
  ((unsigned HOST_WIDE_INT) (x) >> HOST_BITS_PER_WIDE_INT / 2)
                                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
fold-const.c:775:18: warning: shift count >= width of type [-Wshift-count-overflow]
                  num[i + j] = LOWPART (work);
                               ^~~~~~~~~~~~~~
fold-const.c:168:39: note: expanded from macro 'LOWPART'
  ((x) & (((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)) - 1))
                                      ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
26 warnings generated.
Stop make command: 2020-05-22 22:08:23 (1590210503.05812)
Elapsed time for make command: 00:00:24 (24.181202173233)
Error with make 'specmake --output-sync -j8 build':
  ----------------------------------------------------------------------------
  Please review this file:
    "/home/ucsd/SpectreSandboxing/spec2017/benchspec/CPU/602.gcc_s/build/build_base_wasm_lucet.0000/make.out"
  ----------------------------------------------------------------------------
  Command returned exit code 2
  Error with make!
  Compile for '602.gcc_s' ended at: 2020-05-22 22:08:23 (1590210503)
  Elapsed compile for '602.gcc_s': 00:00:25 (25)
*** Error building 602.gcc_s base
If you wish to ignore this error, please use '-I' or ignore errors.
runcpu finished at 2020-05-22 22:08:23; 25 total seconds elapsed
The log for this run is in /home/ucsd/SpectreSandboxing/spec2017/result/CPU2017.109.log
The debug log for this run is in /home/ucsd/SpectreSandboxing/spec2017/result/CPU2017.109.log.debug
*
* Temporary files were NOT deleted; keeping temporaries such as
* /home/ucsd/SpectreSandboxing/spec2017/result/CPU2017.109.log.debug and
* /home/ucsd/SpectreSandboxing/spec2017/tmp/CPU2017.109
* (These may be large!)
*
runcpu finished at 2020-05-22 22:08:23; 26 total seconds elapsed
